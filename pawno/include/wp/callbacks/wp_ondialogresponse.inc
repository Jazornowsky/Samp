/***
*
* File: wp_ondialogresponse.inc
* Auth: Damian Wojdat
* Date: 15.09.2011
* Desc: OnDialogResponse callback and dialogs.
*
*************************************************************************************************************/

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	static string[4096];
	static string2[512];
	static string3[256];

	strdel(string, 0, sizeof(string));
	strdel(string2, 0, sizeof(string2));
	strdel(string3, 0, sizeof(string3));

	switch(dialogid)
	{
		// case DIALOG_MAKE_OBJECT:
		// {
			// if(response)
			// {
				// new Float: objX, Float: objY, Float:objZ;
				// GetPlayerPos( playerid, objX, objY, objZ );
				// switch( listitem )
				// {
					// case 0:
					// {
						// if( CountPlayerObjects( playerid ) >= gPlayerData[playerid][pVipCustomObjects] )
						// {
							// format( string, sizeof(string), "Osi¹gn¹³eœ limit wykupionych slotów (%d) na obiekty", gPlayerData[playerid][pVipCustomObjects] );
							// ShowPlayerDialog( playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Limit slotów", string, "Zamknij", " " );
							// return 1;
						// }
						// CreateCustomObject( playerid, 1010110 /* some model */, objX, objY, objZ );
					// }
				// }
			// }
		// }
		case DIALOG_ONOFF:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						if(gPlayerData[playerid][pOOCStatus])
						{
							gPlayerData[playerid][pOOCStatus] = 0;
							SavePlayerData(playerid, "OOCStatus");
						}
						else
						{
							gPlayerData[playerid][pOOCStatus] = 1;
							SavePlayerData(playerid, "OOCStatus");
						}
					}
					case 1:
					{
						if(gPlayerData[playerid][pPWStatus])
						{
							gPlayerData[playerid][pPWStatus] = 0;
							SavePlayerData(playerid, "PWStatus");
						}
						else
						{
							gPlayerData[playerid][pPWStatus] = 1;
							SavePlayerData(playerid, "PWStatus");
						}
					}
					case 2:
					{
						if(PlayerStatusShowed[playerid])
						{
							PlayerTextDrawHide(playerid, PlayerStatus[playerid]);
							PlayerStatusShowed[playerid] = 0;
						}
						else
						{
							PlayerStatusShowed[playerid] = 1;
							PlayerTextDrawShow(playerid, PlayerStatus[playerid]);
						}
					}
					case 3:
					{
						if(ShowFuel[playerid])
							ShowFuel[playerid] = 0;
						else
							ShowFuel[playerid] = 1;
					}
					case 4:
					{
						if(gPlayerData[playerid][pShowHealthBars])
						{
							gPlayerData[playerid][pShowHealthBars] = 0;
							SavePlayerData(playerid, "ShowHealthBars");
							HideProgressBarForPlayer(playerid, gPlayerData[playerid][pEnergyProgressBarID]);
							HideProgressBarForPlayer(playerid, gPlayerData[playerid][pHungerProgressBarID]);
							HideProgressBarForPlayer(playerid, gPlayerData[playerid][pThirstProgressBarID]);
							// HideProgressBarForPlayer(playerid, gPlayerData[playerid][pPoisonProgressBarID]);
							// HideProgressBarForPlayer(playerid, gPlayerData[playerid][pFatProgressBarID]);
							// HideProgressBarForPlayer(playerid, gPlayerData[playerid][pStomachProgressBarID]);
							// HideProgressBarForPlayer(playerid, gPlayerData[playerid][pVitaminsProgressBarID]);
							// HideProgressBarForPlayer(playerid, gPlayerData[playerid][pEnergyProgressBarID]);
							// HideProgressBarForPlayer(playerid, gPlayerData[playerid][pDrunkProgressBarID]);
							// HideProgressBarForPlayer(playerid, gPlayerData[playerid][pNarcoticProgressBarID]);
							TextDrawHideForPlayer(playerid, gHealthTextEnergy);
						}
						else
						{
							gPlayerData[playerid][pShowHealthBars] = 1;
							SavePlayerData(playerid, "ShowHealthBars");
							SetProgressBarValue(gPlayerData[playerid][pEnergyProgressBarID], gPlayerData[playerid][pEnergy]);
							SetProgressBarValue(gPlayerData[playerid][pHungerProgressBarID], gPlayerData[playerid][pHunger]);
							SetProgressBarValue(gPlayerData[playerid][pThirstProgressBarID], gPlayerData[playerid][pThirst]);
							// SetProgressBarValue(gPlayerData[playerid][pPoisonProgressBarID], gPlayerData[playerid][pPoison]);
							// SetProgressBarValue(gPlayerData[playerid][pFatProgressBarID], gPlayerData[playerid][pFat]);
							// SetProgressBarValue(gPlayerData[playerid][pStomachProgressBarID], gPlayerData[playerid][pStomach]);
							// SetProgressBarValue(gPlayerData[playerid][pVitaminsProgressBarID], gPlayerData[playerid][pVitamins]);
							// SetProgressBarValue(gPlayerData[playerid][pDrunkProgressBarID], gPlayerData[playerid][pDrunk]);
							// SetProgressBarValue(gPlayerData[playerid][pNarcoticProgressBarID], gPlayerData[playerid][pNarcotic]);
							ShowProgressBarForPlayer(playerid, gPlayerData[playerid][pEnergyProgressBarID]);
							ShowProgressBarForPlayer(playerid, gPlayerData[playerid][pHungerProgressBarID]);
							ShowProgressBarForPlayer(playerid, gPlayerData[playerid][pThirstProgressBarID]);
							// ShowProgressBarForPlayer(playerid, gPlayerData[playerid][pPoisonProgressBarID]);
							// ShowProgressBarForPlayer(playerid, gPlayerData[playerid][pFatProgressBarID]);
							// ShowProgressBarForPlayer(playerid, gPlayerData[playerid][pStomachProgressBarID]);
							// ShowProgressBarForPlayer(playerid, gPlayerData[playerid][pVitaminsProgressBarID]);
							//ShowProgressBarForPlayer(playerid, gPlayerData[playerid][pDrunkProgressBarID]);
							//ShowProgressBarForPlayer(playerid, gPlayerData[playerid][pNarcoticProgressBarID]);
							TextDrawShowForPlayer(playerid, gHealthTextEnergy);
						}
					}
					case 5:
					{
						if(gPlayerData[playerid][pJoinInfoStatus])
						{
							gPlayerData[playerid][pJoinInfoStatus] = 0;
							SavePlayerData(playerid, "JoinInfoStatus");
						}
						else
						{
							gPlayerData[playerid][pJoinInfoStatus] = 1;
							SavePlayerData(playerid, "JoinInfoStatus");
						}
					}
					case 6:
					{
						if(gPlayerData[playerid][pLeaveInfoStatus])
						{
							gPlayerData[playerid][pLeaveInfoStatus] = 0;
							SavePlayerData(playerid, "LeaveInfoStatus");
						}
						else
						{
							gPlayerData[playerid][pLeaveInfoStatus] = 1;
							SavePlayerData(playerid, "LeaveInfoStatus");
						}
					}
					case 7:
					{
						if(gPlayerData[playerid][pTipsStatus])
						{
							gPlayerData[playerid][pTipsStatus] = 0;
							SavePlayerData(playerid, "TipsStatus");
						}
						else
						{
							gPlayerData[playerid][pTipsStatus] = 1;
							SavePlayerData(playerid, "TipsStatus");
						}
					}
					case 8:
					{
						if(gPlayerData[playerid][pBackgroundSoundStatus])
						{
							gPlayerData[playerid][pBackgroundSoundStatus] = 0;
							SavePlayerData(playerid, "BackgroundSoundStatus");
							if(gBackgroundAudio1[playerid] != -1)
							{
								Audio_Stop(playerid, gBackgroundAudio1[playerid]);
								gBackgroundAudio1[playerid] = -1;
							}
						}
						else
						{
							gPlayerData[playerid][pBackgroundSoundStatus] = 1;
							SavePlayerData(playerid, "BackgroundSoundStatus");
						}
					}
				}
				if(gPlayerData[playerid][pOOCStatus])
					format(string, sizeof(string), "Chat OOC					{33AA33}ON\n");
				else
					format(string, sizeof(string), "Chat OOC					{A10000}OFF\n");
				if(gPlayerData[playerid][pPWStatus])
					format(string, sizeof(string), "%sChat PW					{33AA33}ON\n", string);
				else
					format(string, sizeof(string), "%sChat PW					{A10000}OFF\n", string);
				if(PlayerStatusShowed[playerid])
					format(string, sizeof(string), "%sPasek statusu gracza				{33AA33}ON\n", string);
				else
					format(string, sizeof(string), "%sPasek statusu gracza				{A10000}OFF\n", string);
				if(ShowFuel[playerid])
					format(string, sizeof(string), "%sPasek statusu pojazdu				{33AA33}ON\n", string);
				else
					format(string, sizeof(string), "%sPasek statusu pojazdu				{A10000}OFF\n", string);
				if(gPlayerData[playerid][pShowHealthBars])
					format(string, sizeof(string), "%sPaski stanu zdrowia				{33AA33}ON\n", string);
				else
					format(string, sizeof(string), "%sPaski stanu zdrowia				{A10000}OFF\n", string);
				if(gPlayerData[playerid][pJoinInfoStatus])
					format(string, sizeof(string), "%sInfo o do³¹czeniu nowych graczy		{33AA33}ON\n", string);
				else
					format(string, sizeof(string), "%sInfo o do³¹czeniu nowych graczy		{A10000}OFF\n", string);
				if(gPlayerData[playerid][pLeaveInfoStatus])
					format(string, sizeof(string), "%sInfo o opuszczeniu gry przez graczy		{33AA33}ON\n", string);
				else
					format(string, sizeof(string), "%sInfo o opuszczeniu gry przez graczy		{A10000}OFF\n", string);
				if(gPlayerData[playerid][pTipsStatus])
					format(string, sizeof(string), "%sTipsy						{33AA33}ON\n", string);
				else
					format(string, sizeof(string), "%sTipsy						{A10000}OFF\n", string);
				if(gPlayerData[playerid][pBackgroundSoundStatus])
					format(string, sizeof(string), "%sDŸwiêki otoczenia				{33AA33}ON\n", string);
				else
					format(string, sizeof(string), "%sDŸwiêki otoczenia				{A10000}OFF\n", string);
				ShowPlayerDialog(playerid, DIALOG_ONOFF, DIALOG_STYLE_LIST, ""#COLOR_TITLE"Panel gracza", string, "Wybierz", "Zamknij");
			}
		}
		case DIALOG_NEW_VERSION:
		{
			gPlayerData[playerid][pNewVersion] = 1;
			SavePlayerData(playerid, "NewVersion");
		}
		case DIALOG_DRIVINGTESTQ:
		{
			new i = gSelectedTest[playerid];
			switch(listitem)
			{
				case 0:
				{
					gSelectedTestQ[playerid] = 0;
					format(string, sizeof(string), "%s\na) %s\nb) %s\nc) %s\nPodaj odpowiedni¹ odpowiedŸ w postaci a, b lub c", gTestQuestions[i][q1], gTestQuestions[i][a1a], gTestQuestions[i][a1b], gTestQuestions[i][a1c]);
					ShowPlayerDialog(playerid, DIALOG_DRIVINGTESTQ_2, DIALOG_STYLE_INPUT, DIALOG_DRIVINGTESTQ_TITLE, string, "Wybierz", "Wróæ");
				}
				case 1:
				{
					gSelectedTestQ[playerid] = 1;
					format(string, sizeof(string), "%s\na) %s\nb) %s\nc) %s\nPodaj odpowiedni¹ odpowiedŸ w postaci a, b lub c", gTestQuestions[i][q2], gTestQuestions[i][a2a], gTestQuestions[i][a2b], gTestQuestions[i][a2c]);
					ShowPlayerDialog(playerid, DIALOG_DRIVINGTESTQ_2, DIALOG_STYLE_INPUT, DIALOG_DRIVINGTESTQ_TITLE, string, "Wybierz", "Wróæ");
				}
				case 2:
				{
					gSelectedTestQ[playerid] = 2;
					format(string, sizeof(string), "%s\na) %s\nb) %s\nc) %s\nPodaj odpowiedni¹ odpowiedŸ w postaci a, b lub c", gTestQuestions[i][q3], gTestQuestions[i][a3a], gTestQuestions[i][a3b], gTestQuestions[i][a3c]);
					ShowPlayerDialog(playerid, DIALOG_DRIVINGTESTQ_2, DIALOG_STYLE_INPUT, DIALOG_DRIVINGTESTQ_TITLE, string, "Wybierz", "Wróæ");
				}
				case 3:
				{
					gSelectedTestQ[playerid] = 3;
					format(string, sizeof(string), "%s\na) %s\nb) %s\nc) %s\nPodaj odpowiedni¹ odpowiedŸ w postaci a, b lub c", gTestQuestions[i][q4], gTestQuestions[i][a4a], gTestQuestions[i][a4b], gTestQuestions[i][a4c]);
					ShowPlayerDialog(playerid, DIALOG_DRIVINGTESTQ_2, DIALOG_STYLE_INPUT, DIALOG_DRIVINGTESTQ_TITLE, string, "Wybierz", "Wróæ");
				}
				case 4:
				{
					gSelectedTestQ[playerid] = 4;
					format(string, sizeof(string), "%s\na) %s\nb) %s\nc) %s\nPodaj odpowiedni¹ odpowiedŸ w postaci a, b lub c", gTestQuestions[i][q5], gTestQuestions[i][a5a], gTestQuestions[i][a5b], gTestQuestions[i][a5c]);
					ShowPlayerDialog(playerid, DIALOG_DRIVINGTESTQ_2, DIALOG_STYLE_INPUT, DIALOG_DRIVINGTESTQ_TITLE, string, "Wybierz", "Wróæ");
				}
				case 5:
				{
					new goodA = 0, slot[MAX_PLAYER_ITEM_SLOT];
					if(gTestQuestionsA[playerid][0] == gTestQuestions[i][a1])
					{
						goodA++;
					}
					if(gTestQuestionsA[playerid][1] == gTestQuestions[i][a2])
					{
						goodA++;
					}
					if(gTestQuestionsA[playerid][2] == gTestQuestions[i][a3])
					{
						goodA++;
					}
					if(gTestQuestionsA[playerid][3] == gTestQuestions[i][a4])
					{
						goodA++;
					}
					if(gTestQuestionsA[playerid][4] == gTestQuestions[i][a5])
					{
						goodA++;
					}
					
					if(goodA < 5)
					{
						if(TakingDrivingTestA[playerid])
						{
							TakingDrivingTestA[playerid] = 0;
						}
						else if(TakingDrivingTestB[playerid])
						{
							TakingDrivingTestB[playerid] = 0;
						}
						else if(TakingDrivingTestCE[playerid])
						{
							TakingDrivingTestCE[playerid] = 0;
						}
						
						gTestResult[playerid] = 0;
						
						format(string, sizeof(string), "Test niezaliczony");
						format(string2, sizeof(string2), "[INFO:] %s obla³ test", gPlayerData[playerid][pName]);
						
						foreach(Player, j)
						{
							if(!gPlayerLogged[j])
							{
								continue;
							}
							
							PHaveItemEx(j, 3, 18, slot);
							
							for(new k = 1; k <= MAX_PLAYER_ITEM_SLOT; k++)
							{
								if(slot[k-1] && SlotParam1(j, k))
								{
									SendClientMessage(j, COLOR_LIGHTYELLOW2, string2);
								}
							}
						}
					}
					else
					{
						gTestResult[playerid] = 1;
						if(TakingDrivingTestA[playerid] && gPlayerData[playerid][pPenaltyPointsA] > 0)
						{
							gPlayerData[playerid][pPenaltyPointsA] -= PENALTY_POINTS_DECRESE;
							if(gPlayerData[playerid][pPenaltyPointsA] < 0)
								gPlayerData[playerid][pPenaltyPointsA] = 0;
							SavePlayerData(playerid, "PenaltyPointsA");
							format(string, sizeof(string), "Test zosta³ zaliczony jednak¿e w zwi¹zku z tym ¿e posiadasz punkty karne nie mo¿esz rozpocz¹æ egzaminu\nAktualna liczba twoich punktów karnych: %d\nJeœli jest ona równa 0 to mo¿esz rozpocz¹æ egzamin po wykonaniu kolejnego testu",
								gPlayerData[playerid][pPenaltyPointsA]);
							TakingDrivingTestA[playerid] = 0;
						}
						else if(TakingDrivingTestB[playerid] && gPlayerData[playerid][pPenaltyPointsB] > 0)
						{
							gPlayerData[playerid][pPenaltyPointsB] -= PENALTY_POINTS_DECRESE;
							if(gPlayerData[playerid][pPenaltyPointsB] < 0)
								gPlayerData[playerid][pPenaltyPointsB] = 0;
							SavePlayerData(playerid, "PenaltyPointsB");
							format(string, sizeof(string), "Test zosta³ zaliczony jednak¿e w zwi¹zku z tym ¿e posiadasz punkty karne nie mo¿esz rozpocz¹æ egzaminu\nAktualna liczba twoich punktów karnych: %d\nJeœli jest ona równa 0 to mo¿esz rozpocz¹æ egzamin po wykonaniu kolejnego testu",
								gPlayerData[playerid][pPenaltyPointsB]);
							TakingDrivingTestB[playerid] = 0;
						}
						else if(TakingDrivingTestCE[playerid] && gPlayerData[playerid][pPenaltyPointsCE] > 0)
						{
							gPlayerData[playerid][pPenaltyPointsCE] -= PENALTY_POINTS_DECRESE;
							if(gPlayerData[playerid][pPenaltyPointsCE] < 0)
								gPlayerData[playerid][pPenaltyPointsCE] = 0;
							SavePlayerData(playerid, "PenaltyPointsCE");
							format(string, sizeof(string), "Test zosta³ zaliczony jednak¿e w zwi¹zku z tym ¿e posiadasz punkty karne nie mo¿esz rozpocz¹æ egzaminu\nAktualna liczba twoich punktów karnych: %d\nJeœli jest ona równa 0 to mo¿esz rozpocz¹æ egzamin po wykonaniu kolejnego testu",
								gPlayerData[playerid][pPenaltyPointsCE]);
							TakingDrivingTestCE[playerid] = 0;
						}
						else
						{
							format(string, sizeof(string), "Test zaliczony - teraz udaj siê do wolnego instruktora i rozpocznij test praktyczny !");
							if(TakingDrivingTestA[playerid])
								format(string2, sizeof(string2), "[INFO:] %s zaliczy³ test na prawko kat. A", gPlayerData[playerid][pName]);
							else if(TakingDrivingTestB[playerid])
								format(string2, sizeof(string2), "[INFO:] %s zaliczy³ test na prawko kat. B", gPlayerData[playerid][pName]);
							else if(TakingDrivingTestCE[playerid])
								format(string2, sizeof(string2), "[INFO:] %s zaliczy³ test na prawko kat. C+E", gPlayerData[playerid][pName]);
							foreach(Player, j)
							{
								if(gPlayerLogged[j])
								{
									if(PHaveItemParam5Ex(j, 3, 18, gPlayerData[j][pName]) != -1)
										ShowPlayerDialog(j, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", string2, "Zamknij", "");
								}
							}
						}
					}
					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, DIALOG_DRIVINGTESTQ_TITLE, string, "Zakoñcz", "");
				}
			}
		}
		case DIALOG_DRIVINGTESTQ_2:
		{
			if(response)
			{
				if(strcmp(inputtext, "a", true, 1) == 0)
					gTestQuestionsA[playerid][gSelectedTestQ[playerid]] = 1;
				else if(strcmp(inputtext, "b", true, 1) == 0)
					gTestQuestionsA[playerid][gSelectedTestQ[playerid]] = 2;
				else if(strcmp(inputtext, "c", true, 1) == 0)
					gTestQuestionsA[playerid][gSelectedTestQ[playerid]] = 3;
			}
			format(string, sizeof(string), "Pytanie nr 1\nPytanie nr 2\nPytanie nr 3\nPytanie nr 4\nPytanie nr 5\nZakoñcz test i poka¿ wynik");
			ShowPlayerDialog(playerid, DIALOG_DRIVINGTESTQ, DIALOG_STYLE_LIST, DIALOG_DRIVINGTESTQ_TITLE, string, "Wybierz", "");
		}
		case DIALOG_LAWYER_1:
		{
			if(response)
			{
				new giveplayerid = gLawyerOffer[playerid][playerOffering];
				new Float:time, roundedjailtime;
				roundedjailtime = floatround( gPlayerData[playerid][pJailTime]/3600, floatround_round );
				if( roundedjailtime >= 0 && roundedjailtime <= 1 )
					time = 0.0;
				else if( roundedjailtime > 1 && roundedjailtime <= 2 )
					time = 0.1;
				else if( roundedjailtime > 2 && roundedjailtime <= 12 )
					time = 0.2;
				else if( roundedjailtime > 12 && roundedjailtime <= 24 )
					time = 0.5;
				else if( roundedjailtime > 24 )
					time = 0.8;
				new Float:addchance;
				if( gPlayerData[giveplayerid][pDoktor] )
					addchance += 0.1;
				if( gPlayerData[giveplayerid][pMagister] )
					addchance += 0.05;
				new Float:chance = 0.006*float(gPlayerData[giveplayerid][pLaw])+0.006*float(gPlayerData[giveplayerid][pPol])+0.006*float(gPlayerData[giveplayerid][pMat])+0.2*float(gPlayerData[giveplayerid][pLevel])-time+addchance;
				if( chance < 0 )
					chance = 0.0;
				if( ( gPlayerData[playerid][pBank] >= ( gLawyerOffer[playerid][offerCost] + gLawyerOffer[playerid][govCost] ) ) || ( gPlayerData[playerid][pCash] >= ( gLawyerOffer[playerid][offerCost] + gLawyerOffer[playerid][govCost] ) ) )
				{
					gPlayerData[playerid][pBank] -= gLawyerOffer[playerid][offerCost] + gLawyerOffer[playerid][govCost];
					gPlayerData[ gLawyerOffer[playerid][playerOffering] ][pBank] += gLawyerOffer[playerid][offerCost];
					new rand = random(100)+1;
					new chanced = floatround( chance*100, floatround_round);
					printf(" chanced is %d", chanced);
					if( rand < chanced )
					{
						gPlayerData[playerid][pJailed] = 0;
						SavePlayerData(playerid, "Jailed");

						if(!PlayerToPoint(8.0, playerid, 268.0, 77.0, 1001.0))
						{
							SetPlayerToPos(playerid,-302.0,1504.0, 76.5);
							SetPlayerInterior(playerid, 0);
							SetPlayerVirtualWorld(playerid,0);

							gPlayerData[playerid][pCrashInt] = 0;
							gPlayerData[playerid][pCrashW] = 0;
						}
						else
							SetPlayerToPos(playerid,268.0,77.0, 1001.0);

						if( gPlayerData[playerid][pDuty] && DynamicFactions[ gLawyerOffer[playerid][playerOffering] ][fUseSkins] )
							SetPlayerToFactionSkin(playerid);
						else
							SetPlayerSkinEx(playerid,gPlayerData[playerid][pSkin]);

						GetPlayerPos(playerid,gPlayerData[playerid][pCrashX],gPlayerData[playerid][pCrashY],gPlayerData[playerid][pCrashZ]);

						TogglePlayerControllable(playerid, 0);
						defer UnfreezePlayer(playerid);

						SendClientMessage(playerid, COLOR_LIGHTYELLOW2,"[INFO:] Zosta³eœ rozgrzeszony i wypuszczony.");

						gPlayerData[ gLawyerOffer[playerid][playerOffering] ][pLawyerPts]++;
						if( gPlayerData[ gLawyerOffer[playerid][playerOffering] ][pLawyerPts] >= 3*gPlayerData[ gLawyerOffer[playerid][playerOffering] ][pLawyerLvl]^2+5*gPlayerData[ gLawyerOffer[playerid][playerOffering] ][pLawyerLvl]+10 )
						{
							gPlayerData[ gLawyerOffer[playerid][playerOffering] ][pLawyerLvl]++;
							gPlayerData[ gLawyerOffer[playerid][playerOffering] ][pLawyerPts] = 0;
							SavePlayerData( gLawyerOffer[playerid][playerOffering], "LawyerLvl" );
							SavePlayerData( gLawyerOffer[playerid][playerOffering], "LawyerPts" );
						}
						format(string, sizeof(string), "[INFO:] Osi¹gna³eœ nowy poziom pracy prawnika ! - %d", gPlayerData[ gLawyerOffer[playerid][playerOffering] ][pLawyerLvl]);
						SendClientMessage( gLawyerOffer[playerid][playerOffering], COLOR_LIGHTYELLOW2, string );
						return 1;
					}
					else
					{
						ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Oferta prawnika", "Nie uda³o siê prawnikowi wygraæ sprawy. Zostajesz w pace !", "Zamknij", "" );
						return 1;
					}
				}
				else
				{
					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Oferta prawnika", "Niestety nie posiadasz wy¿ej wymienionej kwoty.", "Zamknij", "" );
					return 1;
				}
			}
		}
		case DIALOG_REFUEL_VEH:
		{
		}
		case DIALOG_RAF_RSC_CP_MAIN:
		{
			if(response)
			{
				new vehID = GetPlayerVehicleID(playerid);
				
				/* No truck */
				if(vehID == INVALID_VEHICLE_ID)
				{
					ShowPlayerDialog(playerid, DIALOG_RAF_RSC_CP_INFO_A, DIALOG_STYLE_MSGBOX, 	RAF_RSC_CP_MENU_HEADER, RAF_RSC_CP_MENU_INV_VEHID, RAF_RSC_CP_MENU_EXIT, "");
					return 1;
				}
				
				/* Not a faction truck */
				if(gVehData[vehID-1][mVehFaction] != FACTIONID_RAFINERY)
				{
					ShowPlayerDialog(playerid,
													DIALOG_RAF_RSC_CP_INFO_A,
													DIALOG_STYLE_MSGBOX,
													RAF_RSC_CP_MENU_HEADER,
													RAF_RSC_CP_MENU_INV_VEHFAC,
													RAF_RSC_CP_MENU_EXIT,
													"");
					return 1;
				}
				
				new tlID = GetVehicleTrailer(vehID);
				
				/* Truck has no attached tanker */
				if(tlID == 0)
				{
					ShowPlayerDialog(playerid,
													DIALOG_RAF_RSC_CP_INFO_A,
													DIALOG_STYLE_MSGBOX,
													RAF_RSC_CP_MENU_HEADER,
													RAF_RSC_CP_MENU_INV_TLID,
													RAF_RSC_CP_MENU_EXIT,
													"");
					return 1;
				}
				
				/* Not a faction tanker */
				if(gVehData[tlID-1][mVehFaction] != FACTIONID_RAFINERY)
				{
					ShowPlayerDialog(playerid,
													DIALOG_RAF_RSC_CP_INFO_A,
													DIALOG_STYLE_MSGBOX,
													RAF_RSC_CP_MENU_HEADER,
													RAF_RSC_CP_MENU_INV_TLFAC,
													RAF_RSC_CP_MENU_EXIT,
													"");
					return 1;
				}
				
				/* Refuel petrol */
				if(listitem == 0)
				{
					/* Tanker is already filled with other type of fuel */
					if(gVehData[tlID-1][TankerResourceType] != TANKER_TYPE_PETROL && gVehData[tlID-1][TankerResourceType] != TANKER_TYPE_NONE)
					{
						ShowPlayerDialog(playerid,
														DIALOG_RAF_RSC_CP_INFO_B,
														DIALOG_STYLE_MSGBOX,
														RAF_RSC_CP_MENU_HEADER,
														RAF_RSC_CP_MENU_INV_TYPE,
														RAF_RSC_CP_MENU_BACK,
														"");
						return 1;
					}
					/* Tanker is already refueling */
					if(gVehData[tlID-1][TankerIsRefueling])
					{
						ShowPlayerDialog(playerid,
														DIALOG_RAF_RSC_CP_INFO_A,
														DIALOG_STYLE_MSGBOX,
														RAF_RSC_CP_MENU_HEADER,
														RAF_RSC_CP_MENU_AREFUELING,
														RAF_RSC_CP_MENU_EXIT,
														"");
						return 1;
					}
					/* Tanker is already full */
					if(gVehData[tlID-1][TankerResourceValue] >= MAX_TANKER_RESOURCE_VALUE)
					{
						ShowPlayerDialog(playerid,
														DIALOG_RAF_RSC_CP_INFO_A,
														DIALOG_STYLE_MSGBOX,
														RAF_RSC_CP_MENU_HEADER,
														RAF_RSC_CP_MENU_AMAX,
														RAF_RSC_CP_MENU_EXIT,
														"");
						return 1;
					}
					/* No rafinery resource */
					if(gRafinery[RafResourcePetrol] <= 0)
					{
						ShowPlayerDialog(playerid,
														DIALOG_RAF_RSC_CP_INFO_A,
														DIALOG_STYLE_MSGBOX,
														RAF_RSC_CP_MENU_HEADER,
														RAF_RSC_CP_MENU_REFUELED_B,
														RAF_RSC_CP_MENU_EXIT,
														"");
						return 1;
					}
					new Float:tX, Float:tY, Float:tZ;
					GetPlayerPos(playerid, tX, tY, tZ);
					gVehData[tlID-1][TankerIsRefueling] = 1;
					gVehData[tlID-1][TankerResourceType] = TANKER_TYPE_PETROL;
					SaveVehData(tlID-1, "TankerResourceType");
					SetTimerEx("FuelTankerPetrol", FUEL_TANKER_STEP, false, "ifff", playerid, tX, tY, tZ);
					ShowPlayerDialog(playerid,
													DIALOG_RAF_RSC_CP_INFO_A,
													DIALOG_STYLE_MSGBOX,
													RAF_RSC_CP_MENU_HEADER,
													RAF_RSC_CP_MENU_REFUELING,
													RAF_RSC_CP_MENU_EXIT,
													"");
					return 1;
				}
				
				/* Refuel oil */
				else if(listitem == 1)
				{
					/* Tanker is already filled with other type of fuel */
					if(gVehData[tlID-1][TankerResourceType] != TANKER_TYPE_OIL && gVehData[tlID-1][TankerResourceType] != TANKER_TYPE_NONE)
					{
						ShowPlayerDialog(playerid,
														DIALOG_RAF_RSC_CP_INFO_B,
														DIALOG_STYLE_MSGBOX,
														RAF_RSC_CP_MENU_HEADER,
														RAF_RSC_CP_MENU_INV_TYPE,
														RAF_RSC_CP_MENU_BACK,
														"");
						return 1;
					}
					/* Tanker is already refueling */
					if(gVehData[tlID-1][TankerIsRefueling])
					{
						ShowPlayerDialog(playerid,
														DIALOG_RAF_RSC_CP_INFO_A,
														DIALOG_STYLE_MSGBOX,
														RAF_RSC_CP_MENU_HEADER,
														RAF_RSC_CP_MENU_AREFUELING,
														RAF_RSC_CP_MENU_EXIT,
														"");
						return 1;
					}
					/* Tanker is already full */
					if(gVehData[tlID-1][TankerResourceValue] >= MAX_TANKER_RESOURCE_VALUE)
					{
						ShowPlayerDialog(playerid,
														DIALOG_RAF_RSC_CP_INFO_A,
														DIALOG_STYLE_MSGBOX,
														RAF_RSC_CP_MENU_HEADER,
														RAF_RSC_CP_MENU_AMAX,
														RAF_RSC_CP_MENU_EXIT,
														"");
						return 1;
					}
					/* No rafinery resource */
					if(gRafinery[RafResourceOil] <= 0)
					{
						ShowPlayerDialog(playerid,
														DIALOG_RAF_RSC_CP_INFO_A,
														DIALOG_STYLE_MSGBOX,
														RAF_RSC_CP_MENU_HEADER,
														RAF_RSC_CP_MENU_REFUELED_B,
														RAF_RSC_CP_MENU_EXIT,
														"");
						return 1;
					}
					new Float:tX, Float:tY, Float:tZ;
					GetPlayerPos(playerid, tX, tY, tZ);
					gVehData[tlID-1][TankerIsRefueling] = 1;
					gVehData[tlID-1][TankerResourceType] = TANKER_TYPE_OIL;
					SaveVehData(tlID-1, "TankerResourceType");
					SetTimerEx("FuelTankerOil", FUEL_TANKER_STEP, false, "ifff", playerid, tX, tY, tZ);
					ShowPlayerDialog(playerid,
													DIALOG_RAF_RSC_CP_INFO_A,
													DIALOG_STYLE_MSGBOX,
													RAF_RSC_CP_MENU_HEADER,
													RAF_RSC_CP_MENU_REFUELING,
													RAF_RSC_CP_MENU_EXIT,
													"");
					return 1;
				}
				
				/* Refuel gas */
				else if(listitem == 2)
				{
					/* Tanker is already filled with other type of fuel */
					if(gVehData[tlID-1][TankerResourceType] != TANKER_TYPE_GAS && gVehData[tlID-1][TankerResourceType] != TANKER_TYPE_NONE)
					{
						ShowPlayerDialog(playerid, DIALOG_RAF_RSC_CP_INFO_B, DIALOG_STYLE_MSGBOX, RAF_RSC_CP_MENU_HEADER, RAF_RSC_CP_MENU_INV_TYPE, RAF_RSC_CP_MENU_BACK, "");
						return 1;
					}
					
					/* Tanker is already refueling */
					if(gVehData[tlID-1][TankerIsRefueling])
					{
						ShowPlayerDialog(playerid, DIALOG_RAF_RSC_CP_INFO_A, DIALOG_STYLE_MSGBOX, RAF_RSC_CP_MENU_HEADER, RAF_RSC_CP_MENU_AREFUELING, RAF_RSC_CP_MENU_EXIT, "");
						return 1;
					}
					
					/* Tanker is already full */
					if(gVehData[tlID-1][TankerResourceValue] >= MAX_TANKER_RESOURCE_VALUE)
					{
						ShowPlayerDialog(playerid, DIALOG_RAF_RSC_CP_INFO_A, DIALOG_STYLE_MSGBOX, RAF_RSC_CP_MENU_HEADER, RAF_RSC_CP_MENU_AMAX, RAF_RSC_CP_MENU_EXIT, "");
						return 1;
					}
					
					/* No rafinery resource */
					if(gRafinery[RafResourceGas] <= 0)
					{
						ShowPlayerDialog(playerid, DIALOG_RAF_RSC_CP_INFO_A, DIALOG_STYLE_MSGBOX, 	RAF_RSC_CP_MENU_HEADER, RAF_RSC_CP_MENU_REFUELED_B, RAF_RSC_CP_MENU_EXIT, "");
						return 1;
					}
					
					new Float:tX, Float:tY, Float:tZ;
					GetPlayerPos(playerid, tX, tY, tZ);
					
					gVehData[tlID-1][TankerIsRefueling] = 1;
					gVehData[tlID-1][TankerResourceType] = TANKER_TYPE_GAS;					
					SaveVehData(tlID-1, "TankerResourceType");
					
					SetTimerEx("FuelTankerGas", FUEL_TANKER_STEP, false, "ifff", playerid, tX, tY, tZ);
					
					ShowPlayerDialog(playerid, DIALOG_RAF_RSC_CP_INFO_A, DIALOG_STYLE_MSGBOX, RAF_RSC_CP_MENU_HEADER, RAF_RSC_CP_MENU_REFUELING, RAF_RSC_CP_MENU_EXIT, "");
					
					return 1;
				}
				
				/* Refuel avitaion fuel */
				else if(listitem == 3)
				{
					/* Tanker is already filled with other type of fuel */
					if(gVehData[tlID-1][TankerResourceType] != TANKER_TYPE_GAS && gVehData[tlID-1][TankerResourceType] != TANKER_TYPE_NONE)
					{
						ShowPlayerDialog(playerid, DIALOG_RAF_RSC_CP_INFO_B, DIALOG_STYLE_MSGBOX, RAF_RSC_CP_MENU_HEADER, RAF_RSC_CP_MENU_INV_TYPE, RAF_RSC_CP_MENU_BACK, "");
						return 1;
					}
					
					/* Tanker is already refueling */
					if(gVehData[tlID-1][TankerIsRefueling])
					{
						ShowPlayerDialog(playerid, DIALOG_RAF_RSC_CP_INFO_A, DIALOG_STYLE_MSGBOX, RAF_RSC_CP_MENU_HEADER, RAF_RSC_CP_MENU_AREFUELING, RAF_RSC_CP_MENU_EXIT, "");
						return 1;
					}
					
					/* Tanker is already full */
					if(gVehData[tlID-1][TankerResourceValue] >= MAX_TANKER_RESOURCE_VALUE)
					{
						ShowPlayerDialog(playerid, DIALOG_RAF_RSC_CP_INFO_A, DIALOG_STYLE_MSGBOX, RAF_RSC_CP_MENU_HEADER, RAF_RSC_CP_MENU_AMAX, RAF_RSC_CP_MENU_EXIT, "");
						return 1;
					}
					
					/* No rafinery resource */
					if(gRafinery[RafResourceFly] <= 0)
					{
						ShowPlayerDialog(playerid, DIALOG_RAF_RSC_CP_INFO_A, DIALOG_STYLE_MSGBOX, 	RAF_RSC_CP_MENU_HEADER, RAF_RSC_CP_MENU_REFUELED_B, RAF_RSC_CP_MENU_EXIT, "");
						return 1;
					}
					
					new Float:tX, Float:tY, Float:tZ;
					GetPlayerPos(playerid, tX, tY, tZ);
					
					gVehData[tlID-1][TankerIsRefueling] = 1;
					gVehData[tlID-1][TankerResourceType] = TANKER_TYPE_FLY;					
					SaveVehData(tlID-1, "TankerResourceType");
					
					SetTimerEx("FuelTankerFly", FUEL_TANKER_STEP, false, "ifff", playerid, tX, tY, tZ);
					
					ShowPlayerDialog(playerid, DIALOG_RAF_RSC_CP_INFO_A, DIALOG_STYLE_MSGBOX, RAF_RSC_CP_MENU_HEADER, RAF_RSC_CP_MENU_REFUELING, RAF_RSC_CP_MENU_EXIT, "");
					
					return 1;
				}
				
				/* Return fuel to rafinery */
				else if(listitem == 4)
				{
					/* Tanker has no defined fuel type */
					if(gVehData[tlID-1][TankerResourceType] == TANKER_TYPE_NONE)
					{
						ShowPlayerDialog(playerid,
														DIALOG_RAF_RSC_CP_INFO_B,
														DIALOG_STYLE_MSGBOX,
														RAF_RSC_CP_MENU_HEADER,
														RAF_RSC_CP_MENU_NO_TYPE,
														RAF_RSC_CP_MENU_BACK,
														"");
						return 1;
					}
					/* Tanker is empty */
					if(gVehData[tlID-1][TankerResourceValue] == 0)
					{
						ShowPlayerDialog(playerid,
														DIALOG_RAF_RSC_CP_INFO_A,
														DIALOG_STYLE_MSGBOX,
														RAF_RSC_CP_MENU_HEADER,
														RAF_RSC_CP_MENU_EMPTY,
														RAF_RSC_CP_MENU_EXIT,
														"");
						return 1;
					}
					new Float:tX, Float:tY, Float:tZ;
					GetPlayerPos(playerid, tX, tY, tZ);
					gVehData[tlID-1][TankerIsRefueling] = 1;
					SetTimerEx("DrainTankerFuel", FUEL_TANKER_STEP, false, "ifff", playerid, tX, tY, tZ);
					ShowPlayerDialog(playerid,
													DIALOG_RAF_RSC_CP_INFO_A,
													DIALOG_STYLE_MSGBOX,
													RAF_RSC_CP_MENU_HEADER,
													RAF_RSC_CP_MENU_DRAINING,
													RAF_RSC_CP_MENU_EXIT,
													"");
					return 1;
				}
			}
		}
		case DIALOG_RAF_RSC_CP_INFO_A:
		{
			/* Just confirm that dialog has been handled */
			return 1;
		}
		case DIALOG_RAF_RSC_CP_INFO_B:
		{
			/* Return to main menu */
			ShowPlayerDialog(playerid,
											DIALOG_RAF_RSC_CP_MAIN,
											DIALOG_STYLE_LIST,
											RAF_RSC_CP_MENU_HEADER,
											RAF_RSC_CP_MENU_OPTIONS_MAIN,
											RAF_RSC_CP_MENU_EXIT,
											"" );
			return 1;
		}
		case DIALOG_WMENU_1:
		{
			if(response)
			{
				gListItem[playerid] = listitem;
				if(listitem == 0)
				{
					format( string, sizeof(string),
					DIALOG_WMENU_W_LIST_TXT,
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactory9MM],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactory9MMSil],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryDesEagle],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryMicroSMG],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryMP5],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryTec9],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryShotgun],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAK47],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryM4],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifle],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactorySRifle]);

					ShowPlayerDialog( playerid, DIALOG_WMENU_2_WEAPON, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, string, "Wybierz", "Wróæ" );

					return 1;
				}
				if(listitem == 1)
				{
					format( string, sizeof(string),
					"1. Czêœci g³ówne\n2. Podczêœci");

					ShowPlayerDialog( playerid, DIALOG_WMENU_2_PARTS, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, string, "Wybierz", "Wróæ" );

					return 1;
				}
				if(listitem == 2)
				{
					format( string, sizeof(string),
					"1. Nabój 9mm [%d]\n2. Nabój .50 AE [%d]\n3. Œrut [%d]\n4. Nabój 7.62mm [%d]\n5. Nabój 12.7 [%d]",
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactory9MMAmmo],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactory50AEAmmo],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryBuckshot],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactory762MMAmmo],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactory127MMAmmo]);

					ShowPlayerDialog( playerid, DIALOG_WMENU_2_AMMO, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, string, "Wybierz", "Wróæ" );

					return 1;
				}
				if (listitem == 3)
				{
					format( string, sizeof(string),
					"Czy napewno chcesz zwróciæ posiadane czêœci ?\n Jeœli bêdziesz chcia³ ponownie zmontowaæ broñ poprostu wybierz z menu odpowiedniej czêœci opcje \"zmontuj\"" );
					ShowPlayerDialog( playerid, DIALOG_WMENU_2_RETURN, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Tak", "Nie" );

					return 1;
				}
			}
		}
		case DIALOG_WLMENU_1_SELECT:
		{
			if( response )
			{
				gListItem[playerid] = listitem;
				if( listitem == 0 )
				{
					if( gPlayerData[playerid][pWFOrderedCount] >= PMAX_ORDERS )
					{
						ShowPlayerDialog( playerid, DIALOG_WLMENU_2_LIMIT, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_LIM_TXT, "Wróæ", "" );
						return 1;
					}
					ShowPlayerDialog( playerid, DIALOG_WLMENU_2_SEL_ORD, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_SEL_TXT, "Wybierz", "Wróæ" );
				}
				if( listitem == 1 )
				{
					ShowPlayerDialog( playerid, DIALOG_WLMENU_2_SEL_BUY, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_SEL_TXT, "Wybierz", "Wróæ" );
				}
				return 1;
			}
		}
		case DIALOG_WLMENU_2_SEL_BUY:
		{
			if( response )
			{
				if( listitem == 0 )
				{
					format( string, sizeof(string),
					DIALOG_WMENU_W_LIST_TXT,
					WFactoryLegalLight[WFactory9MM],
					WFactoryLegalLight[WFactory9MMSil],
					WFactoryLegalLight[WFactoryDesEagle],
					WFactoryLegalLight[WFactoryMicroSMG],
					WFactoryLegalLight[WFactoryMP5],
					WFactoryLegalLight[WFactoryTec9],
					WFactoryLegalHeavy[WFactoryShotgun],
					WFactoryLegalHeavy[WFactoryAK47],
					WFactoryLegalHeavy[WFactoryM4],
					WFactoryLegalHeavy[WFactoryRifle],
					WFactoryLegalHeavy[WFactorySRifle]);

					ShowPlayerDialog( playerid, DIALOG_WLMENU_2_WEAPON_B, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );

					return 1;
				}
				if( listitem == 1 )
				{
					format( string, sizeof(string),
					"1. Nabój 9mm [%d]\n2. Nabój .50 AE [%d]\n3. Œrut [%d]\n4. Nabój 7.62mm [%d]\n5. Nabój 12.7mm [%d]",
					WFactoryLegalLight[WFactory9MMAmmo],
					WFactoryLegalLight[WFactory50AEAmmo],
					WFactoryLegalHeavy[WFactoryBuckshot],
					WFactoryLegalHeavy[WFactory762MMAmmo],
					WFactoryLegalHeavy[WFactory127MMAmmo]);

					ShowPlayerDialog( playerid, DIALOG_WLMENU_2_AMMO_B, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );

					return 1;
				}
			}
			else
			{
				ShowPlayerDialog( playerid, DIALOG_WLMENU_1_SELECT, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_SEL_OB_TXT, "Wybierz", "Anuluj" );
				return 1;
			}
		}
		case DIALOG_WLMENU_2_SEL_ORD:
		{
			if( response )
			{
				gListItem[playerid] = listitem;
				if( listitem == 0 )
				{
					format( string, sizeof(string),
					DIALOG_WMENU_W_LIST_TXT,
					WFactoryLegalLight[WFactory9MM],
					WFactoryLegalLight[WFactory9MMSil],
					WFactoryLegalLight[WFactoryDesEagle],
					WFactoryLegalLight[WFactoryMicroSMG],
					WFactoryLegalLight[WFactoryMP5],
					WFactoryLegalLight[WFactoryTec9],
					WFactoryLegalHeavy[WFactoryShotgun],
					WFactoryLegalHeavy[WFactoryAK47],
					WFactoryLegalHeavy[WFactoryM4],
					WFactoryLegalHeavy[WFactoryRifle],
					WFactoryLegalHeavy[WFactorySRifle]);

					ShowPlayerDialog( playerid, DIALOG_WLMENU_2_WEAPON_O, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, string, "Zamów", "Wróæ" );

					return 1;
				}
				if( listitem == 1 )
				{
					format( string, sizeof(string),
					"1. Nabój 9mm [%d]\n2. Nabój .50 AE [%d]\n3. Œrut [%d]\n4. Nabój 7.62mm [%d]\n5. Nabój 12.7mm [%d]",
					WFactoryLegalLight[WFactory9MMAmmo],
					WFactoryLegalLight[WFactory50AEAmmo],
					WFactoryLegalHeavy[WFactoryBuckshot],
					WFactoryLegalHeavy[WFactory762MMAmmo],
					WFactoryLegalHeavy[WFactory127MMAmmo]);

					ShowPlayerDialog( playerid, DIALOG_WLMENU_2_AMMO_O, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, string, "Zamów", "Wróæ" );

					return 1;
				}
			}
			else
			{
				ShowPlayerDialog( playerid, DIALOG_WLMENU_1_SELECT, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_SEL_OB_TXT, "Wybierz", "Zamknij" );
				return 1;
			}
		}
		case DIALOG_WLMENU_2_LIMIT:
		{
			if( response )
			{
				ShowPlayerDialog( playerid, DIALOG_WLMENU_1_SELECT, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_SEL_OB_TXT, "Wybierz", "Zamknij" );
				return 1;
			}
		}
		case DIALOG_WLMENU_2_WEAPON_O:
		{
			if( response )
			{
				GOTO_WLMENU_2_WEAPON_O:
				if( gPlayerData[playerid][pWFOrderedCount] >= PMAX_ORDERS )
				{
					ShowPlayerDialog( playerid, DIALOG_WLMENU_2_LIMIT, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_LIM_TXT, "Wróæ", "" );
					return 1;
				}
				gListItem[playerid] = listitem;
				if( gListOverItem[playerid] != -1 )
				{
					gListItem[playerid] = gListOverItem[playerid];
					gListOverItem[playerid] = -1;
				}
				switch( gListItem[playerid] )
				{
					case 0: // 9MM
					{
						format( string, sizeof(string), DIALOG_WMENU_ORD_W_TXT,
						ItemName( 1, 16 ),
						WFactoryLegalLight[WFactory9MM],
						WFactoryLegalLight[WFactory9MMO],
						ItemPrice( 1, 16 ) );
					}
					case 1: // 9MMSIL
					{
						format( string, sizeof(string), DIALOG_WMENU_ORD_W_TXT,
						ItemName( 1, 17 ),
						WFactoryLegalLight[WFactory9MMSil],
						WFactoryLegalLight[WFactory9MMSilO],
						ItemPrice( 1, 17 ) );
					}
					case 2: // DesEagle
					{
						format( string, sizeof(string), DIALOG_WMENU_ORD_W_TXT,
						ItemName( 1, 18 ),
						WFactoryLegalLight[WFactoryDesEagle],
						WFactoryLegalLight[WFactoryDesEagleO],
						ItemPrice( 1, 18 ) );
					}
					case 3: // msmg
					{
						format( string, sizeof(string), DIALOG_WMENU_ORD_W_TXT,
						ItemName( 1, 22 ),
						WFactoryLegalLight[WFactoryMicroSMG],
						WFactoryLegalLight[WFactoryMicroSMGO],
						ItemPrice( 1, 22 ) );
					}
					case 4: // mp5
					{
						format( string, sizeof(string), DIALOG_WMENU_ORD_W_TXT,
						ItemName( 1, 23 ),
						WFactoryLegalLight[WFactoryMP5],
						WFactoryLegalLight[WFactoryMP5O],
						ItemPrice( 1, 23 ) );
					}
					case 5: // tec9
					{
						format( string, sizeof(string), DIALOG_WMENU_ORD_W_TXT,
						ItemName( 1, 26 ),
						WFactoryLegalLight[WFactoryTec9],
						WFactoryLegalLight[WFactoryTec9O],
						ItemPrice( 1, 26 ) );
					}
					case 6: // shot
					{
						format( string, sizeof(string), DIALOG_WMENU_ORD_W_TXT,
						ItemName( 1, 19 ),
						WFactoryLegalHeavy[WFactoryShotgun],
						WFactoryLegalHeavy[WFactoryShotgunO],
						ItemPrice( 1, 19 ) );
					}
					case 7: // ak47
					{
						format( string, sizeof(string), DIALOG_WMENU_ORD_W_TXT,
						ItemName( 1, 24 ),
						WFactoryLegalHeavy[WFactoryAK47],
						WFactoryLegalHeavy[WFactoryAK47O],
						ItemPrice( 1, 24 ) );
					}
					case 8: // m4
					{
						format( string, sizeof(string), DIALOG_WMENU_ORD_W_TXT,
						ItemName( 1, 25 ),
						WFactoryLegalHeavy[WFactoryM4],
						WFactoryLegalHeavy[WFactoryM4O],
						ItemPrice( 1, 25 ) );
					}
					case 9: // rifle
					{
						format( string, sizeof(string), DIALOG_WMENU_ORD_W_TXT,
						ItemName( 1, 27 ),
						WFactoryLegalHeavy[WFactoryRifle],
						WFactoryLegalHeavy[WFactoryRifleO],
						ItemPrice( 1, 27 ) );
					}
					case 10: // srifle
					{
						format( string, sizeof(string), DIALOG_WMENU_ORD_W_TXT,
						ItemName( 1, 28 ),
						WFactoryLegalHeavy[WFactorySRifle],
						WFactoryLegalHeavy[WFactorySRifleO],
						ItemPrice( 1, 28 ) );
					}
				}
				ShowPlayerDialog( playerid, DIALOG_WLMENU_3_WEAPON_O, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zamów", "Wróæ" );
				return 1;
			}
			else
			{
				ShowPlayerDialog( playerid, DIALOG_WLMENU_2_SEL_ORD, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_SEL_TXT, "Wybierz", "Wróæ" );
				return 1;
			}
		}
		case DIALOG_WLMENU_3_WEAPON_O:
		{
			if( response )
			{
				gListOverItem[playerid] = gListItem[playerid];
				switch( gListItem[playerid] )
				{
					case 0: // 9MM
					{
						WFactoryLegalLight[WFactory9MMO]++;
						SaveWFactoryData("WFactory9MMO");
						gPlayerData[playerid][pWFOrderedCount]++;
					}
					case 1: // 9MMSIL
					{
						WFactoryLegalLight[WFactory9MMSilO]++;
						SaveWFactoryData("WFactory9MMSilO");
						gPlayerData[playerid][pWFOrderedCount]++;
					}
					case 2: // DesEagle
					{
						WFactoryLegalLight[WFactoryDesEagleO]++;
						SaveWFactoryData("WFactoryDesEagleO");
						gPlayerData[playerid][pWFOrderedCount]++;
					}
					case 3: // msmg
					{
						WFactoryLegalLight[WFactoryMicroSMGO]++;
						SaveWFactoryData("WFactoryMicroSMGO");
						gPlayerData[playerid][pWFOrderedCount]++;
					}
					case 4: // mp5
					{
						WFactoryLegalLight[WFactoryMP5O]++;
						SaveWFactoryData("WFactoryMP5O");
						gPlayerData[playerid][pWFOrderedCount]++;
					}
					case 5: // tec9
					{
						WFactoryLegalLight[WFactoryTec9O]++;
						SaveWFactoryData("WFactoryTec9O");
						gPlayerData[playerid][pWFOrderedCount]++;
					}
					case 6: // Shot
					{
						WFactoryLegalHeavy[WFactoryShotgunO]++;
						SaveWFactoryData("WFactoryShotgunO");
						gPlayerData[playerid][pWFOrderedCount]++;
					}
					case 7: // AK47
					{
						WFactoryLegalHeavy[WFactoryAK47O]++;
						SaveWFactoryData("WFactoryAK47O");
						gPlayerData[playerid][pWFOrderedCount]++;
					}
					case 8: // M4
					{
						WFactoryLegalHeavy[WFactoryM4O]++;
						SaveWFactoryData("WFactoryM4O");
						gPlayerData[playerid][pWFOrderedCount]++;
					}
					case 9: // Rifle
					{
						WFactoryLegalHeavy[WFactoryRifleO]++;
						SaveWFactoryData("WFactoryRifleO");
						gPlayerData[playerid][pWFOrderedCount]++;
					}
					case 10: // SRifle
					{
						WFactoryLegalHeavy[WFactorySRifleO]++;
						SaveWFactoryData("WFactorySRifleO");
						gPlayerData[playerid][pWFOrderedCount]++;
					}
				}
				goto GOTO_WLMENU_2_WEAPON_O;
				return 1;
			}
			else
			{
				format( string, sizeof(string),
				DIALOG_WMENU_W_LIST_TXT,
				WFactoryLegalLight[WFactory9MM],
				WFactoryLegalLight[WFactory9MMSil],
				WFactoryLegalLight[WFactoryDesEagle],
				WFactoryLegalLight[WFactoryMicroSMG],
				WFactoryLegalLight[WFactoryMP5],
				WFactoryLegalLight[WFactoryTec9],
				WFactoryLegalHeavy[WFactoryShotgun],
				WFactoryLegalHeavy[WFactoryAK47],
				WFactoryLegalHeavy[WFactoryM4],
				WFactoryLegalHeavy[WFactoryRifle],
				WFactoryLegalHeavy[WFactorySRifle]);

				ShowPlayerDialog( playerid, DIALOG_WLMENU_2_WEAPON_O, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, string, "Zamów", "Wróæ" );

				return 1;
			}
		}
		case DIALOG_WLMENU_2_WEAPON_B:
		{
			if( response )
			{
				GOTO_WLMENU_2_WEAPON_B:
				gListItem[playerid] = listitem;
				if( gListOverItem[playerid] != -1 )
				{
					gListItem[playerid] = gListOverItem[playerid];
					gListOverItem[playerid] = -1;
				}
				switch( gListItem[playerid] )
				{
					case 0: // 9MM
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_W_TXT,
						ItemName( 1, 16 ),
						WFactoryLegalLight[WFactory9MM],
						ItemPrice( 1, 16 ) );

						ShowPlayerDialog( playerid, DIALOG_WLMENU_3_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					}
					case 1: // 9mm sil
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_W_TXT,
						ItemName( 1, 17 ),
						WFactoryLegalLight[WFactory9MMSil],
						ItemPrice( 1, 17 ) );

						ShowPlayerDialog( playerid, DIALOG_WLMENU_3_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					}
					case 2: // deag
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_W_TXT,
						ItemName( 1, 18 ),
						WFactoryLegalLight[WFactoryDesEagle],
						ItemPrice( 1, 18 ) );

						ShowPlayerDialog( playerid, DIALOG_WLMENU_3_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					}
					case 3: // msmg
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_W_TXT,
						ItemName( 1, 22 ),
						WFactoryLegalLight[WFactoryMicroSMG],
						ItemPrice( 1, 22 ) );

						ShowPlayerDialog( playerid, DIALOG_WLMENU_3_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					}
					case 4: // mp5
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_W_TXT,
						ItemName( 1, 23 ),
						WFactoryLegalLight[WFactoryMP5],
						ItemPrice( 1, 23 ) );

						ShowPlayerDialog( playerid, DIALOG_WLMENU_3_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					}
					case 5: // tec9
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_W_TXT,
						ItemName( 1, 26 ),
						WFactoryLegalLight[WFactoryTec9],
						ItemPrice( 1, 26 ) );

						ShowPlayerDialog( playerid, DIALOG_WLMENU_3_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					}
					case 6: // shot
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_W_TXT,
						ItemName( 1, 19 ),
						WFactoryLegalHeavy[WFactoryShotgun],
						ItemPrice( 1, 19 ) );

						ShowPlayerDialog( playerid, DIALOG_WLMENU_3_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					}
					case 7: // ak47
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_W_TXT,
						ItemName( 1, 24 ),
						WFactoryLegalHeavy[WFactoryAK47],
						ItemPrice( 1, 24 ) );

						ShowPlayerDialog( playerid, DIALOG_WLMENU_3_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					}
					case 8: // m4
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_W_TXT,
						ItemName( 1, 25 ),
						WFactoryLegalHeavy[WFactoryM4],
						ItemPrice( 1, 25 ) );

						ShowPlayerDialog( playerid, DIALOG_WLMENU_3_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					}
					case 9: // rifle
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_W_TXT,
						ItemName( 1, 27 ),
						WFactoryLegalHeavy[WFactoryRifle],
						ItemPrice( 1, 27 ) );

						ShowPlayerDialog( playerid, DIALOG_WLMENU_3_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					}
					case 10: // srifle
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_W_TXT,
						ItemName( 1, 28 ),
						WFactoryLegalHeavy[WFactorySRifle],
						ItemPrice( 1, 28 ) );

						ShowPlayerDialog( playerid, DIALOG_WLMENU_3_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					}
				}
				return 1;
			}
			else
			{
				ShowPlayerDialog( playerid, DIALOG_WLMENU_2_SEL_BUY, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_SEL_TXT, "Wybierz", "Wróæ" );
				return 1;
			}
		}
		case DIALOG_WLMENU_3_WEAPON_B:
		{
			if( response )
			{
				GOTO_WLMENU_3_WEAPON_B:
				gListOverItem[playerid] = gListItem[playerid];
				ShowPlayerDialog(playerid, DIALOG_WLMENU_4_WEAPON_B, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, "1. Frakcja\n2. Biznes", "Wybierz", "Wróæ");
				return 1;
			}
			else
			{
				format( string, sizeof(string),
				DIALOG_WMENU_W_LIST_TXT,
				WFactoryLegalLight[WFactory9MM],
				WFactoryLegalLight[WFactory9MMSil],
				WFactoryLegalLight[WFactoryDesEagle],
				WFactoryLegalLight[WFactoryMicroSMG],
				WFactoryLegalLight[WFactoryMP5],
				WFactoryLegalLight[WFactoryTec9],
				WFactoryLegalHeavy[WFactoryShotgun],
				WFactoryLegalHeavy[WFactoryAK47],
				WFactoryLegalHeavy[WFactoryM4],
				WFactoryLegalHeavy[WFactoryRifle],
				WFactoryLegalHeavy[WFactorySRifle]);

				ShowPlayerDialog( playerid, DIALOG_WLMENU_2_WEAPON_B, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
		}
		case DIALOG_WLMENU_4_WEAPON_B:
		{
			if(response)
			{
				if(listitem == 0) // User selected faction
				{
					if(gPlayerData[playerid][pFaction] == 255)
					{
						ShowPlayerDialog(playerid, DIALOG_WLMENU_4_WEAPON_B_NFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, "Nie nale¿ysz do ¿adnej frakcji !", "Wróæ", "");
						return 1;
					}
					if(gPlayerData[playerid][pRank] != 1)
					{
						ShowPlayerDialog(playerid, DIALOG_WLMENU_4_WEAPON_B_NFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, "Nie jesteœ liderem !", "Wróæ", "");
						return 1;
					}
					if(DynamicFactions[gPlayerData[playerid][pFaction]][fType] != 1)
					{
						ShowPlayerDialog(playerid, DIALOG_WLMENU_4_WEAPON_B_NFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, "Ta frakcja nie przyjmuje zamówieñ broni z tej fabryki", "Wróæ", "");
						return 1;
					}
					ShowPlayerDialog(playerid, DIALOG_WLMENU_5_WEAPON_B_F, DIALOG_STYLE_INPUT, DIALOG_WMENU_TITLE_TXT, "Podaj ile sztuk danej broni chcesz kupiæ", "Dalej", "Wróæ");
					return 1;
				}
				else if(listitem == 1)
				{
					ShowPlayerDialog(playerid, DIALOG_WLMENU_5_WEAPON_B, DIALOG_STYLE_INPUT, DIALOG_WMENU_TITLE_TXT, "Podaj ID biznesu do którego chcesz z³o¿yæ zamówienie", "Wybierz", "Wróæ");
					return 1;
				}
			}
			else
			{
				goto GOTO_WLMENU_2_WEAPON_B;
				return 1;
			}
		}
		case DIALOG_WLMENU_5_WEAPON_B_F:
		{
			if(response)
			{
				new howmuch = strval(inputtext);
				if(howmuch <= 0 || howmuch > 10)
				{
					ShowPlayerDialog(playerid, DIALOG_WLMENU_5_WEAPON_B_F, DIALOG_STYLE_INPUT, DIALOG_WMENU_TITLE_TXT, "Poda³eœ niepoprawn¹ iloœæ w zamówieniu, wprowadŸ ponownie ile sztuk danej broni chcesz kupiæ (jednorazowo do 10 sztuk)", "Dalej", "Wróæ");
					return 1;
				}
				switch( gListItem[playerid] )
				{
					case 0: // 9mm
					{
						if( WFactoryLegalLight[WFactory9MM] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_4_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 16 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalLight[WFactory9MM] -= howmuch;
						SaveWFactoryData( "WFactory9MM" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 16 )*howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactory9MM] += howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "WFactory9MM" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 16), ItemPrice(1,16), ItemPrice(1,16)*howmuch);
					}
					case 1: // 9mm sil
					{
						if( WFactoryLegalLight[WFactory9MMSil] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_4_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 17 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalLight[WFactory9MMSil] -= howmuch;
						SaveWFactoryData( "WFactory9MMSil" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 17 )*howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactory9MMSil] += howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "WFactory9MMSil" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 17), ItemPrice(1,17), ItemPrice(1,17)*howmuch);
					}
					case 2: // deag
					{
						if( WFactoryLegalLight[WFactoryDesEagle] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_4_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 18 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalLight[WFactoryDesEagle] -= howmuch;
						SaveWFactoryData( "WFactoryDesEagle" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 18 )*howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryDesEagle] += howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryDesEagle" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 18), ItemPrice(1,18), ItemPrice(1,18)*howmuch);
					}
					case 3: // micro smg
					{
						if( WFactoryLegalLight[WFactoryMicroSMG] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_4_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 22 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalLight[WFactoryMicroSMG] -= howmuch;
						SaveWFactoryData( "WFactoryMicroSMG" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 22 )*howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryMicroSMG] += howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryMicroSMG" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 22), ItemPrice(1,22), ItemPrice(1,22)*howmuch);
					}
					case 4: // mp5
					{
						if( WFactoryLegalLight[WFactoryMP5] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_4_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 23 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalLight[WFactoryMP5] -= howmuch;
						SaveWFactoryData( "WFactoryMP5" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 23 )*howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryMP5] += howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryMP5" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 23), ItemPrice(1,23), ItemPrice(1,23)*howmuch);
					}
					case 5: // tec9
					{
						if( WFactoryLegalLight[WFactoryTec9] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_4_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 26 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalLight[WFactoryTec9] -= howmuch;
						SaveWFactoryData( "WFactoryTec9" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 26 )*howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryTec9] += howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryTec9" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 26), ItemPrice(1,26), ItemPrice(1,26)*howmuch);
					}
					case 6: // shot
					{
						if( WFactoryLegalHeavy[WFactoryShotgun] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_4_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 19 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalHeavy[WFactoryShotgun] -= howmuch;
						SaveWFactoryData( "WFactoryShotgun" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 19 )*howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryShotgun] += howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryShotgun" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 19), ItemPrice(1,19), ItemPrice(1,19)*howmuch);
					}
					case 7: // ak47
					{
						if( WFactoryLegalHeavy[WFactoryAK47] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_4_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 24 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalHeavy[WFactoryAK47] -= howmuch;
						SaveWFactoryData( "WFactoryAK47" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 24 )*howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAK47] += howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAK47" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 24), ItemPrice(1,24), ItemPrice(1,24)*howmuch);
					}
					case 8: // m4
					{
						if( WFactoryLegalHeavy[WFactoryM4] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_4_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 25 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalHeavy[WFactoryM4] -= howmuch;
						SaveWFactoryData( "WFactoryM4" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 25 )*howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryM4] += howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryM4" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 25), ItemPrice(1,25), ItemPrice(1,25)*howmuch);
					}
					case 9: // rifle
					{
						if( WFactoryLegalHeavy[WFactoryRifle] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_4_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 27 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalHeavy[WFactoryRifle] -= howmuch;
						SaveWFactoryData( "WFactoryRifle" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 27 )*howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifle] += howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRifle" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 27), ItemPrice(1,27), ItemPrice(1,27)*howmuch);
					}
					case 10: // srifle
					{
						if( WFactoryLegalHeavy[WFactorySRifle] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_4_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 28 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalHeavy[WFactorySRifle] -= howmuch;
						SaveWFactoryData( "WFactorySRifle" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 28 )*howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactorySRifle] += howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "WFactorySRifle" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 28), ItemPrice(1,28), ItemPrice(1,28)*howmuch);
					}
				}
				ShowPlayerDialog(playerid, DIALOG_WLMENU_4_WEAPON_B_NFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Wybierz", "Wróæ");
			}
			else
			{
				goto GOTO_WLMENU_3_WEAPON_B;
				return 1;
			}
		}
		case DIALOG_WLMENU_4_WEAPON_B_NFO:
		{
			goto GOTO_WLMENU_2_WEAPON_B;
			return 1;
		}
		case DIALOG_WLMENU_5_WEAPON_B:
		{
			if(response)
			{
				new bizid = strval(inputtext);
				if(bizid > sizeof(Businesses) || bizid < 0)
				{
					ShowPlayerDialog(playerid, DIALOG_WLMENU_5_WEAPON_B, DIALOG_STYLE_INPUT, DIALOG_WMENU_TITLE_TXT, "Poda³eœ niepoprawne ID biznesu, wpisz je ponownie", "Wybierz", "Wróæ");
					return 1;
				}
				if(strcmp(gPlayerData[playerid][pName], Businesses[bizid][Owner], false) != 0)
				{
					ShowPlayerDialog(playerid, DIALOG_WLMENU_5_WEAPON_B, DIALOG_STYLE_INPUT, DIALOG_WMENU_TITLE_TXT, "Nie jesteœ w³aœcicielem tego biznesu !", "Wybierz", "Wróæ");
					return 1;
				}
				gDialogValue[playerid] = bizid;
				ShowPlayerDialog(playerid, DIALOG_WLMENU_5_WEAPON_B_B, DIALOG_STYLE_INPUT, DIALOG_WMENU_TITLE_TXT, "Podaj ile sztuk danej broni chcesz kupiæ (jednorazowo do 10 sztuk)", "Dalej", "Wróæ");
				return 1;
			}
			else
			{
				goto GOTO_WLMENU_2_WEAPON_B;
				return 1;
			}
		}
		case DIALOG_WLMENU_5_WEAPON_B_B:
		{
			if(response)
			{
				new howmuch = strval(inputtext);
				if(howmuch <= 0 || howmuch > 10)
				{
					ShowPlayerDialog(playerid, DIALOG_WLMENU_5_WEAPON_B_F, DIALOG_STYLE_INPUT, DIALOG_WMENU_TITLE_TXT, "Poda³eœ niepoprawn¹ iloœæ w zamówieniu, wprowadŸ ponownie ile sztuk danej broni chcesz kupiæ (jednorazowo do 10 sztuk)", "Dalej", "Wróæ");
					return 1;
				}
				new bizid = gDialogValue[playerid];
				switch(gListItem[playerid])
				{
					case 0: // 9mm
					{
						if( WFactoryLegalLight[WFactory9MM] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_2_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 16 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalLight[WFactory9MM] -= howmuch;
						SaveWFactoryData( "WFactory9MM" );
						Businesses[bizid][W9MM] += howmuch;
						SaveBizData(bizid, "W9MM" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 16), ItemPrice(1,16), ItemPrice(1,16)*howmuch);
					}
					case 1: // 9mm sil
					{
						if( WFactoryLegalLight[WFactory9MMSil] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_2_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 17 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalLight[WFactory9MMSil] -= howmuch;
						SaveWFactoryData( "WFactory9MMSil" );
						Businesses[ bizid ][W9MM] += howmuch;
						SaveBizData( bizid, "W9MMSil" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 17), ItemPrice(1,17), ItemPrice(1,17)*howmuch);
					}
					case 2: // deag
					{
						if( WFactoryLegalLight[WFactoryDesEagle] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_2_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 18 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalLight[WFactoryDesEagle] -= howmuch;
						SaveWFactoryData( "WFactoryDesEagle" );
						Businesses[ bizid ][WDesEagle] += howmuch;
						SaveBizData( bizid, "WDesEagle" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 18), ItemPrice(1,18), ItemPrice(1,18)*howmuch);
					}
					case 3: // micro smg
					{
						if( WFactoryLegalLight[WFactoryMicroSMG] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_2_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 22 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalLight[WFactoryMicroSMG] -= howmuch;
						SaveWFactoryData( "WFactoryMicroSMG" );
						Businesses[ bizid ][WMicroSMG] += howmuch;
						SaveBizData( bizid, "WMicroSMG" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 22), ItemPrice(1,22), ItemPrice(1,22)*howmuch);
					}
					case 4: // mp5
					{
						if( WFactoryLegalLight[WFactoryMP5] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_2_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 23 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalLight[WFactoryMP5] -= howmuch;
						SaveWFactoryData( "WFactoryMP5" );
						Businesses[ bizid ][WMP5] += howmuch;
						SaveBizData( bizid, "WMP5" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 23), ItemPrice(1,23), ItemPrice(1,23)*howmuch);
					}
					case 5: // tec9
					{
						if( WFactoryLegalLight[WFactoryTec9] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_2_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 26 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalLight[WFactoryTec9] -= howmuch;
						SaveWFactoryData( "WFactoryTec9" );
						Businesses[ bizid ][WTec9] += howmuch;
						SaveBizData( bizid, "WTec9" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 26), ItemPrice(1,26), ItemPrice(1,26)*howmuch);
					}
					case 6: // shot
					{
						if( WFactoryLegalHeavy[WFactoryShotgun] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_2_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 19 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalHeavy[WFactoryShotgun] -= howmuch;
						SaveWFactoryData( "WFactoryShotgun" );
						Businesses[ bizid ][WShotgun] += howmuch;
						SaveBizData( bizid, "WShotgun" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 19), ItemPrice(1,19), ItemPrice(1,19)*howmuch);
					}
					case 7: // ak47
					{
						if( WFactoryLegalHeavy[WFactoryAK47] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_2_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 24 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalHeavy[WFactoryAK47] -= howmuch;
						SaveWFactoryData( "WFactoryAK47" );
						Businesses[ bizid ][WAK47] += howmuch;
						SaveBizData( bizid, "WAK47" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 24), ItemPrice(1,24), ItemPrice(1,24)*howmuch);
					}
					case 8: // m4
					{
						if( WFactoryLegalHeavy[WFactoryM4] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_2_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 25 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalHeavy[WFactoryM4] -= howmuch;
						SaveWFactoryData( "WFactoryM4" );
						Businesses[ bizid ][WM4] += howmuch;
						SaveBizData( bizid, "WM4" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 25), ItemPrice(1,25), ItemPrice(1,25)*howmuch);
					}
					case 9: // rifle
					{
						if( WFactoryLegalHeavy[WFactoryRifle] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_2_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 27 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalHeavy[WFactoryRifle] -= howmuch;
						SaveWFactoryData( "WFactoryRifle" );
						Businesses[ bizid ][WRifle] += howmuch;
						SaveBizData( bizid, "WRifle" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 27), ItemPrice(1,27), ItemPrice(1,27)*howmuch);
					}
					case 10: // srifle
					{
						if( WFactoryLegalHeavy[WFactorySRifle] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_2_WEAPON_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 28 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalHeavy[WFactorySRifle] -= howmuch;
						SaveWFactoryData( "WFactorySRifle" );
						Businesses[ bizid ][WSRifle] += howmuch;
						SaveBizData( bizid, "WSRifle" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 28), ItemPrice(1,28), ItemPrice(1,28)*howmuch);
					}
				}
				ShowPlayerDialog(playerid, DIALOG_WLMENU_4_WEAPON_B_NFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Wybierz", "Wróæ");
			}
			else
			{
				goto GOTO_WLMENU_3_WEAPON_B;
				return 1;
			}
		}
		case DIALOG_WLMENU_2_AMMO_O:
		{
			if( response )
			{
				GOTO_WLMENU_2_AMMO_O:
				if( gPlayerData[playerid][pWFOrderedCount] >= PMAX_ORDERS )
				{
					ShowPlayerDialog( playerid, DIALOG_WLMENU_2_LIMIT, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_LIM_TXT, "Wróæ", "" );
					return 1;
				}
				gListItem[playerid] = listitem;
				if( gListOverItem[playerid] != -1 )
				{
					gListItem[playerid] = gListOverItem[playerid];
					gListOverItem[playerid] = -1;
				}
				switch( gListItem[playerid] )
				{
					case 0: // 9mm ammo
					{
						format( string, sizeof(string), DIALOG_WMENU_ORD_A_TXT,
						ItemName( 1, 36 ),
						WFactoryLegalLight[WFactory9MMAmmo],
						WFactoryLegalLight[WFactory9MMAmmoO],
						ItemPrice( 1, 36 ) );
					}
					case 1: // 50ae
					{
						format( string, sizeof(string), DIALOG_WMENU_ORD_A_TXT,
						ItemName( 1, 37 ),
						WFactoryLegalLight[WFactory50AEAmmo],
						WFactoryLegalLight[WFactory50AEAmmoO],
						ItemPrice( 1, 37 ) );
					}
					case 2: // buckshot
					{
						format( string, sizeof(string), DIALOG_WMENU_ORD_A_TXT,
						ItemName( 1, 38 ),
						WFactoryLegalHeavy[WFactoryBuckshot],
						WFactoryLegalHeavy[WFactoryBuckshotO],
						ItemPrice( 1, 38 ) );
					}
					case 3: // 762mm
					{
						format( string, sizeof(string), DIALOG_WMENU_ORD_A_TXT,
						ItemName( 1, 39 ),
						WFactoryLegalHeavy[WFactory762MMAmmo],
						WFactoryLegalHeavy[WFactory762MMAmmoO],
						ItemPrice( 1, 39 ) );
					}
					case 4: //  127mm
					{
						format( string, sizeof(string), DIALOG_WMENU_ORD_A_TXT,
						ItemName( 1, 40 ),
						WFactoryLegalHeavy[WFactory127MMAmmo],
						WFactoryLegalHeavy[WFactory127MMAmmoO],
						ItemPrice( 1, 40 ) );
					}
				}
				ShowPlayerDialog( playerid, DIALOG_WLMENU_3_AMMO_O, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zamów", "Wróæ" );
				return 1;
			}
			else
			{
				ShowPlayerDialog( playerid, DIALOG_WLMENU_2_SEL_ORD, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_SEL_TXT, "Wybierz", "Wróæ" );
				return 1;
			}
		}
		case DIALOG_WLMENU_3_AMMO_O:
		{
			if( response )
			{
				gListOverItem[playerid] = gListItem[playerid];
				switch( gListItem[playerid] )
				{
					case 0: // 9mm ammo
					{
						WFactoryLegalLight[WFactory9MMAmmoO]++;
						gPlayerData[playerid][pWFOrderedCount]++;
					}
					case 1: // 50ae
					{
						WFactoryLegalLight[WFactory50AEAmmoO]++;
						gPlayerData[playerid][pWFOrderedCount]++;
					}
					case 2: // buckshot
					{
						WFactoryLegalHeavy[WFactoryBuckshotO]++;
						gPlayerData[playerid][pWFOrderedCount]++;
					}
					case 3: // 762mm
					{
						WFactoryLegalHeavy[WFactory762MMAmmoO]++;
						gPlayerData[playerid][pWFOrderedCount]++;
					}
					case 4: //  127mm
					{
						WFactoryLegalHeavy[WFactory127MMAmmoO]++;
						gPlayerData[playerid][pWFOrderedCount]++;
					}
				}
				goto GOTO_WLMENU_2_AMMO_O;
				return 1;
			}
			else
			{
				format( string, sizeof(string),
				"1. Nabój 9mm [%d]\n2. Nabój .50 AE [%d]\n3. Œrut [%d]\n4. Nabój 7.62mm [%d]\n5. Nabój 12.7mm [%d]",
				WFactoryLegalLight[WFactory9MMAmmo],
				WFactoryLegalLight[WFactory50AEAmmo],
				WFactoryLegalHeavy[WFactoryBuckshot],
				WFactoryLegalHeavy[WFactory762MMAmmo],
				WFactoryLegalHeavy[WFactory127MMAmmo]);

				ShowPlayerDialog( playerid, DIALOG_WLMENU_2_AMMO_O, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, string, "Zamów", "Wróæ" );

				return 1;
			}
		}
		case DIALOG_WLMENU_2_AMMO_B:
		{
			if( response )
			{
				GOTO_WLMENU_2_AMMO_B:
				gListItem[playerid] = listitem;
				if( gListOverItem[playerid] != -1 )
				{
					gListItem[playerid] = gListOverItem[playerid];
					gListOverItem[playerid] = -1;
				}
				switch( gListItem[playerid] )
				{
					case 0: // 9mm ammo
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_A_TXT,
						ItemName( 1, 36 ),
						WFactoryLegalLight[WFactory9MMAmmo],
						ItemPrice( 1, 36 ) );
					}
					case 1: // 50ae
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_A_TXT,
						ItemName( 1, 37 ),
						WFactoryLegalLight[WFactory50AEAmmo],
						ItemPrice( 1, 37 ) );
					}
					case 2: // buckshot
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_A_TXT,
						ItemName( 1, 38 ),
						WFactoryLegalHeavy[WFactoryBuckshot],
						ItemPrice( 1, 38 ) );
					}
					case 3: // 762mm
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_A_TXT,
						ItemName( 1, 39 ),
						WFactoryLegalHeavy[WFactory762MMAmmo],
						ItemPrice( 1, 39 ) );
					}
					case 4: //  127mm
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_A_TXT,
						ItemName( 1, 40 ),
						WFactoryLegalHeavy[WFactory127MMAmmo],
						ItemPrice( 1, 40 ) );
					}
				}
				ShowPlayerDialog( playerid, DIALOG_WLMENU_3_AMMO_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else
			{
				ShowPlayerDialog( playerid, DIALOG_WLMENU_2_SEL_BUY, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_SEL_TXT, "Wybierz", "Wróæ" );
				return 1;
			}
		}
		case DIALOG_WLMENU_3_AMMO_B:
		{
			if( response )
			{
				GOTO_WLMENU_3_AMMO_B:
				gListOverItem[playerid] = gListItem[playerid];
				ShowPlayerDialog(playerid, DIALOG_WLMENU_4_AMMO_B, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, "1. Frakcja\n2. Biznes", "Wybierz", "Wróæ");
				return 1;
			}
			else
			{
				format( string, sizeof(string),
				"1. Nabój 9mm [%d]\n2. Nabój .50 AE [%d]\n3. Œrut [%d]\n4. Nabój 7.62mm [%d]\n5. Nabój 12.7mm [%d]",
				WFactoryLegalLight[WFactory9MMAmmo],
				WFactoryLegalLight[WFactory50AEAmmo],
				WFactoryLegalHeavy[WFactoryBuckshot],
				WFactoryLegalHeavy[WFactory762MMAmmo],
				WFactoryLegalHeavy[WFactory127MMAmmo]);

				ShowPlayerDialog( playerid, DIALOG_WLMENU_2_AMMO_B, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, string, "Zamów", "Wróæ" );

				return 1;
			}
		}
		case DIALOG_WLMENU_4_AMMO_B:
		{
			if(response)
			{
				if(listitem == 0) // User selected faction
				{
					if(gPlayerData[playerid][pFaction] == 255)
					{
						ShowPlayerDialog(playerid, DIALOG_WLMENU_4_AMMO_B_NFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, "Nie nale¿ysz do ¿adnej frakcji !", "Wróæ", "");
						return 1;
					}
					if(gPlayerData[playerid][pRank] != 1)
					{
						ShowPlayerDialog(playerid, DIALOG_WLMENU_4_AMMO_B_NFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, "Nie jesteœ liderem !", "Wróæ", "");
						return 1;
					}
					if(DynamicFactions[gPlayerData[playerid][pFaction]][fType] != 1)
					{
						ShowPlayerDialog(playerid, DIALOG_WLMENU_4_AMMO_B_NFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, "Ta frakcja nie przyjmuje zamówieñ amunicji z tej fabryki", "Wróæ", "");
						return 1;
					}
					ShowPlayerDialog(playerid, DIALOG_WLMENU_5_AMMO_B_F, DIALOG_STYLE_INPUT, DIALOG_WMENU_TITLE_TXT, "Podaj ile sztuk danej amunicji chcesz kupiæ (jednorazowo do 100 sztuk)", "Dalej", "Wróæ");
					return 1;
				}
				else if(listitem == 1)
				{
					ShowPlayerDialog(playerid, DIALOG_WLMENU_5_AMMO_B, DIALOG_STYLE_INPUT, DIALOG_WMENU_TITLE_TXT, "Podaj ID biznesu do którego chcesz z³o¿yæ zamówienie", "Wybierz", "Wróæ");
					return 1;
				}
			}
			else
			{
				goto GOTO_WLMENU_2_AMMO_B;
				return 1;
			}
		}
		case DIALOG_WLMENU_5_AMMO_B_F:
		{
			if(response)
			{
				new howmuch = strval(inputtext);
				if(howmuch <= 0 || howmuch > 100)
				{
					ShowPlayerDialog(playerid, DIALOG_WLMENU_5_AMMO_B_F, DIALOG_STYLE_INPUT, DIALOG_WMENU_TITLE_TXT, "Poda³eœ niepoprawn¹ iloœæ w zamówieniu, wprowadŸ ponownie ile sztuk danej amunicji chcesz kupiæ (jednorazowo do 100 sztuk)", "Dalej", "Wróæ");
					return 1;
				}
				switch( gListItem[playerid] )
				{
					case 0: // 9mm ammo
					{
						if( WFactoryLegalLight[WFactory9MMAmmo] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_2_AMMO_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 36 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalLight[WFactory9MMAmmo] -= howmuch;
						SaveWFactoryData( "WFactory9MMAmmo" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 36 )*howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactory9MMAmmo] += howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "WFactory9MMAmmo" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 36), ItemPrice(1,36), ItemPrice(1,36)*howmuch);
					}
					case 1: // 50ae
					{
						if( WFactoryLegalLight[WFactory50AEAmmo] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_2_AMMO_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 37 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalLight[WFactory50AEAmmo] -= howmuch;
						SaveWFactoryData( "WFactory50AEAmmo" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 37 )*howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactory50AEAmmo] += howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "WFactory50AEAmmo" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 37), ItemPrice(1,37), ItemPrice(1,37)*howmuch);
					}
					case 2: // buckshot
					{
						if( WFactoryLegalHeavy[WFactoryBuckshot] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_2_AMMO_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 38 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalHeavy[WFactoryBuckshot] -= howmuch;
						SaveWFactoryData( "WFactoryBuckshot" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 38 )*howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryBuckshot] += howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryBuckshot" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 38), ItemPrice(1,38), ItemPrice(1,38)*howmuch);
					}
					case 3: // 762mm
					{
						if( WFactoryLegalHeavy[WFactory762MMAmmo] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_2_AMMO_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 39 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalHeavy[WFactory762MMAmmo] -= howmuch;
						SaveWFactoryData( "WFactory762MMAmmo" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 39 )*howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactory762MMAmmo] += howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "WFactory762MMAmmo" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 39), ItemPrice(1,39), ItemPrice(1,39)*howmuch);
					}
					case 4: //  127mm
					{
						if( WFactoryLegalHeavy[WFactory127MMAmmo] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_2_AMMO_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 40 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalHeavy[WFactory127MMAmmo] -= howmuch;
						SaveWFactoryData( "WFactory127MMAmmo" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 40 )*howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactory127MMAmmo] += howmuch;
						SaveFData( gPlayerData[playerid][pFaction], "WFactory127MMAmmo" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 40), ItemPrice(1,40), ItemPrice(1,40)*howmuch);
					}
				}
				ShowPlayerDialog(playerid, DIALOG_WLMENU_4_AMMO_B_NFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Wróæ", "");
			}
			else
			{
				goto GOTO_WLMENU_3_AMMO_B;
				return 1;
			}
		}
		case DIALOG_WLMENU_4_AMMO_B_NFO:
		{
			goto GOTO_WLMENU_2_AMMO_B;
			return 1;
		}
		case DIALOG_WLMENU_5_AMMO_B:
		{
			if(response)
			{
				new bizid = strval(inputtext);
				if(bizid > sizeof(Businesses) || bizid < 0)
				{
					ShowPlayerDialog(playerid, DIALOG_WLMENU_5_AMMO_B, DIALOG_STYLE_INPUT, DIALOG_WMENU_TITLE_TXT, "Poda³eœ niepoprawne ID biznesu, wpisz je ponownie", "Wybierz", "Wróæ");
					return 1;
				}
				if(strcmp(gPlayerData[playerid][pName], Businesses[bizid][Owner], false) != 0)
				{
					ShowPlayerDialog(playerid, DIALOG_WLMENU_5_AMMO_B, DIALOG_STYLE_INPUT, DIALOG_WMENU_TITLE_TXT, "Nie jesteœ w³aœcicielem tego biznesu !", "Wybierz", "Wróæ");
					return 1;
				}
				gDialogValue[playerid] = bizid;
				ShowPlayerDialog(playerid, DIALOG_WLMENU_5_AMMO_B_B, DIALOG_STYLE_INPUT, DIALOG_WMENU_TITLE_TXT, "Podaj ile sztuk danej amunicji chcesz kupiæ (jednorazowo do 100 sztuk)", "Dalej", "Wróæ");
				return 1;
			}
			else
			{
				goto GOTO_WLMENU_2_AMMO_B;
				return 1;
			}
		}
		case DIALOG_WLMENU_5_AMMO_B_B:
		{
			if(response)
			{
				new howmuch = strval(inputtext);
				if(howmuch <= 0 || howmuch > 100)
				{
					ShowPlayerDialog(playerid, DIALOG_WLMENU_5_AMMO_B_F, DIALOG_STYLE_INPUT, DIALOG_WMENU_TITLE_TXT, "Poda³eœ niepoprawn¹ iloœæ w zamówieniu, wprowadŸ ponownie ile sztuk danej amunicji chcesz kupiæ (jednorazowo do 100 sztuk)", "Dalej", "Wróæ");
					return 1;
				}
				new bizid = gDialogValue[playerid];
				switch( gListItem[playerid] )
				{
					case 0: // 9mm ammo
					{
						if( WFactoryLegalLight[WFactory9MMAmmo] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_2_AMMO_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 36 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalLight[WFactory9MMAmmo] -= howmuch;
						SaveWFactoryData( "WFactory9MMAmmo" );
						Businesses[bizid][W9MMAmmo] += howmuch;
						SaveBizData(bizid, "W9MMAmmo" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 36), ItemPrice(1,36), ItemPrice(1,36)*howmuch);
					}
					case 1: // 50ae
					{
						if( WFactoryLegalLight[WFactory50AEAmmo] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_2_AMMO_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 37 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalLight[WFactory50AEAmmo] -= howmuch;
						SaveWFactoryData( "WFactory50AEAmmo" );
						Businesses[bizid][W50AEAmmo] += howmuch;
						SaveBizData(bizid, "W50AEAmmo" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 37), ItemPrice(1,37), ItemPrice(1,37)*howmuch);
					}
					case 2: // buckshot
					{
						if( WFactoryLegalHeavy[WFactoryBuckshot] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_2_AMMO_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 38 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalHeavy[WFactoryBuckshot] -= howmuch;
						SaveWFactoryData( "WFactoryBuckshot" );
						Businesses[bizid][WBuckshot] += howmuch;
						SaveBizData(bizid, "WBuckshot" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 38), ItemPrice(1,38), ItemPrice(1,38)*howmuch);
					}
					case 3: // 762mm
					{
						if( WFactoryLegalHeavy[WFactory762MMAmmo] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_2_AMMO_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 39 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalHeavy[WFactory762MMAmmo] -= howmuch;
						SaveWFactoryData( "WFactory762MMAmmo" );
						Businesses[bizid][W762MMAmmo] += howmuch;
						SaveBizData(bizid, "W762MMAmmo" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 39), ItemPrice(1,39), ItemPrice(1,39)*howmuch);
					}
					case 4: //  127mm
					{
						if( WFactoryLegalHeavy[WFactory127MMAmmo] < howmuch)
						{
							ShowPlayerDialog( playerid, DIALOG_WLMENU_2_AMMO_B, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_B_OUT_TXT, "Wróæ", "" );
							return 1;
						}
						DynamicFactions[FACTIONID_GOVERNMENT][fBank] += ItemPrice( 1, 40 )*howmuch;
						SaveFData( FACTIONID_GOVERNMENT, "Bank" );
						WFactoryLegalHeavy[WFactory127MMAmmo] -= howmuch;
						SaveWFactoryData( "WFactory127MMAmmo" );
						Businesses[bizid][W127MMAmmo] += howmuch;
						SaveBizData(bizid, "W127MMAmmo" );
						format(string, sizeof(string), "Zamówi³eœ %d sztuk %s po $%d, koszt ca³kowity $%d", howmuch, ItemName(1, 40), ItemPrice(1,40), ItemPrice(1,40)*howmuch);
					}
				}
				ShowPlayerDialog(playerid, DIALOG_WLMENU_4_AMMO_B_NFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Wróæ", "");
			}
			else
			{
				goto GOTO_WLMENU_3_WEAPON_B;
				return 1;
			}
		}
		case DIALOG_WMENU_2_RETURN:
		{
			if (response)
			{
				new slotitem = -1;
				/* Slot 1 */
				if( PSlotItemType( playerid, I_SLOT1 ) == 1 )
				{
					slotitem = ShowSlotItem( playerid, I_SLOT1 );
					if ( slotitem >= 43 && slotitem <= 104 )
					{
						InsertItemToFactory( gPlayerData[playerid][pFaction], slotitem, SlotParam6( playerid, I_SLOT1 ) );
						RemovePlayerItemUsed( playerid, I_SLOT1 );
					}
				}
				if( PSlotItemType( playerid, I_SLOT2 ) == 1 )
				{
					slotitem = ShowSlotItem( playerid, I_SLOT2 );
					if ( slotitem >= 43 && slotitem <= 104 )
					{
						InsertItemToFactory( gPlayerData[playerid][pFaction], slotitem, SlotParam6( playerid, I_SLOT2 ) );
						RemovePlayerItemUsed( playerid, I_SLOT2 );
					}
				}
				if( PSlotItemType( playerid, I_SLOT3 ) == 1 )
				{
					slotitem = ShowSlotItem( playerid, I_SLOT3 );
					if ( slotitem >= 43 && slotitem <= 104 )
					{
						InsertItemToFactory( gPlayerData[playerid][pFaction], slotitem, SlotParam6( playerid, I_SLOT3 ) );
						RemovePlayerItemUsed( playerid, I_SLOT3 );
					}
				}
				if( PSlotItemType( playerid, I_SLOT4 ) == 1 )
				{
					slotitem = ShowSlotItem( playerid, I_SLOT4 );
					if ( slotitem >= 43 && slotitem <= 104 )
					{
						InsertItemToFactory( gPlayerData[playerid][pFaction], slotitem, SlotParam6( playerid, I_SLOT4 ) );
						RemovePlayerItemUsed( playerid, I_SLOT4 );
					}
				}
				if( PSlotItemType( playerid, I_SLOT5 ) == 1 )
				{
					slotitem = ShowSlotItem( playerid, I_SLOT5 );
					if ( slotitem >= 43 && slotitem <= 104 )
					{
						InsertItemToFactory( gPlayerData[playerid][pFaction], slotitem, SlotParam6( playerid, I_SLOT5 ) );
						RemovePlayerItemUsed( playerid, I_SLOT5 );
					}
				}
				if( PSlotItemType( playerid, I_SLOT6 ) == 1 )
				{
					slotitem = ShowSlotItem( playerid, I_SLOT6 );
					if ( slotitem >= 43 && slotitem <= 104 )
					{
						InsertItemToFactory( gPlayerData[playerid][pFaction], slotitem, SlotParam6( playerid, I_SLOT6 ) );
						RemovePlayerItemUsed( playerid, I_SLOT6 );
					}
				}
				if( PSlotItemType( playerid, I_SLOT7 ) == 1 )
				{
					slotitem = ShowSlotItem( playerid, I_SLOT7 );
					if ( slotitem >= 43 && slotitem <= 104 )
					{
						InsertItemToFactory( gPlayerData[playerid][pFaction], slotitem, SlotParam6( playerid, I_SLOT7 ) );
						RemovePlayerItemUsed( playerid, I_SLOT7 );
					}
				}
				if( PSlotItemType( playerid, I_SLOT8 ) == 1 )
				{
					slotitem = ShowSlotItem( playerid, I_SLOT8 );
					if ( slotitem >= 43 && slotitem <= 104 )
					{
						InsertItemToFactory( gPlayerData[playerid][pFaction], slotitem, SlotParam6( playerid, I_SLOT8 ) );
						RemovePlayerItemUsed( playerid, I_SLOT8 );
					}
				}
				if( PSlotItemType( playerid, I_SLOT9 ) == 1 )
				{
					slotitem = ShowSlotItem( playerid, I_SLOT9 );
					if ( slotitem >= 43 && slotitem <= 104 )
					{
						InsertItemToFactory( gPlayerData[playerid][pFaction], slotitem, SlotParam6( playerid, I_SLOT9 ) );
						RemovePlayerItemUsed( playerid, I_SLOT9 );
					}
				}
				if( PSlotItemType( playerid, I_SLOT10 ) == 1 )
				{
					slotitem = ShowSlotItem( playerid, I_SLOT10 );
					if ( slotitem >= 43 && slotitem <= 104 )
					{
						InsertItemToFactory( gPlayerData[playerid][pFaction], slotitem, SlotParam6( playerid, I_SLOT10 ) );
						RemovePlayerItemUsed( playerid, I_SLOT10 );
					}
				}
				if( PSlotItemType( playerid, I_SLOT11 ) == 1 )
				{
					slotitem = ShowSlotItem( playerid, I_SLOT11 );
					if ( slotitem >= 43 && slotitem <= 104 )
					{
						InsertItemToFactory( gPlayerData[playerid][pFaction], slotitem, SlotParam6( playerid, I_SLOT11 ) );
						RemovePlayerItemUsed( playerid, I_SLOT11 );
					}
				}
				if( PSlotItemType( playerid, I_SLOT12 ) == 1 )
				{
					slotitem = ShowSlotItem( playerid, I_SLOT12 );
					if ( slotitem >= 43 && slotitem <= 104 )
					{
						InsertItemToFactory( gPlayerData[playerid][pFaction], slotitem, SlotParam6( playerid, I_SLOT12 ) );
						RemovePlayerItemUsed( playerid, I_SLOT12 );
					}
				}
				if( PSlotItemType( playerid, I_SLOT13 ) == 1 )
				{
					slotitem = ShowSlotItem( playerid, I_SLOT13 );
					if ( slotitem >= 43 && slotitem <= 104 )
					{
						InsertItemToFactory( gPlayerData[playerid][pFaction], slotitem, SlotParam6( playerid, I_SLOT13 ) );
						RemovePlayerItemUsed( playerid, I_SLOT13 );
					}
				}
				if( PSlotItemType( playerid, I_SLOT14 ) == 1 )
				{
					slotitem = ShowSlotItem( playerid, I_SLOT14 );
					if ( slotitem >= 43 && slotitem <= 104 )
					{
						InsertItemToFactory( gPlayerData[playerid][pFaction], slotitem, SlotParam6( playerid, I_SLOT14 ) );
						RemovePlayerItemUsed( playerid, I_SLOT14 );
					}
				}
				if( PSlotItemType( playerid, I_SLOT15 ) == 1 )
				{
					slotitem = ShowSlotItem( playerid, I_SLOT15 );
					if ( slotitem >= 43 && slotitem <= 104 )
					{
						InsertItemToFactory( gPlayerData[playerid][pFaction], slotitem, SlotParam6( playerid, I_SLOT15 ) );
						RemovePlayerItemUsed( playerid, I_SLOT15 );
					}
				}
				if( PSlotItemType( playerid, I_SLOT16 ) == 1 )
				{
					slotitem = ShowSlotItem( playerid, I_SLOT16 );
					if ( slotitem >= 43 && slotitem <= 104 )
					{
						InsertItemToFactory( gPlayerData[playerid][pFaction], slotitem, SlotParam6( playerid, I_SLOT16 ) );
						RemovePlayerItemUsed( playerid, I_SLOT16 );
					}
				}
				if( PSlotItemType( playerid, I_SLOT17 ) == 1 )
				{
					slotitem = ShowSlotItem( playerid, I_SLOT17 );
					if ( slotitem >= 43 && slotitem <= 104 )
					{
						InsertItemToFactory( gPlayerData[playerid][pFaction], slotitem, SlotParam6( playerid, I_SLOT17 ) );
						RemovePlayerItemUsed( playerid, I_SLOT17 );
					}
				}
				if( PSlotItemType( playerid, I_SLOT18 ) == 1 )
				{
					slotitem = ShowSlotItem( playerid, I_SLOT18 );
					if ( slotitem >= 43 && slotitem <= 104 )
					{
						InsertItemToFactory( gPlayerData[playerid][pFaction], slotitem, SlotParam6( playerid, I_SLOT18 ) );
						RemovePlayerItemUsed( playerid, I_SLOT18 );
					}
				}
				if( PSlotItemType( playerid, I_SLOT19 ) == 1 )
				{
					slotitem = ShowSlotItem( playerid, I_SLOT19 );
					if ( slotitem >= 43 && slotitem <= 104 )
					{
						InsertItemToFactory( gPlayerData[playerid][pFaction], slotitem, SlotParam6( playerid, I_SLOT19 ) );
						RemovePlayerItemUsed( playerid, I_SLOT19 );
					}
				}
				if( PSlotItemType( playerid, I_SLOT20 ) == 1 )
				{
					slotitem = ShowSlotItem( playerid, I_SLOT20 );
					if ( slotitem >= 43 && slotitem <= 104 )
					{
						InsertItemToFactory( gPlayerData[playerid][pFaction], slotitem, SlotParam6( playerid, I_SLOT20 ) );
						RemovePlayerItemUsed( playerid, I_SLOT20 );
					}
				}
				if( PSlotItemType( playerid, I_SLOT21 ) == 1 )
				{
					slotitem = ShowSlotItem( playerid, I_SLOT21 );
					if ( slotitem >= 43 && slotitem <= 104 )
					{
						InsertItemToFactory( gPlayerData[playerid][pFaction], slotitem, SlotParam6( playerid, I_SLOT21 ) );
						RemovePlayerItemUsed( playerid, I_SLOT21 );
					}
				}
				if( PSlotItemType( playerid, I_SLOT22 ) == 1 )
				{
					slotitem = ShowSlotItem( playerid, I_SLOT22 );
					if ( slotitem >= 43 && slotitem <= 104 )
					{
						InsertItemToFactory( gPlayerData[playerid][pFaction], slotitem, SlotParam6( playerid, I_SLOT22 ) );
						RemovePlayerItemUsed( playerid, I_SLOT22 );
					}
				}
				if( PSlotItemType( playerid, I_SLOT23 ) == 1 )
				{
					slotitem = ShowSlotItem( playerid, I_SLOT23 );
					if ( slotitem >= 43 && slotitem <= 104 )
					{
						InsertItemToFactory( gPlayerData[playerid][pFaction], slotitem, SlotParam6( playerid, I_SLOT23 ) );
						RemovePlayerItemUsed( playerid, I_SLOT23 );
					}
				}
				if( PSlotItemType( playerid, I_SLOT24 ) == 1 )
				{
					slotitem = ShowSlotItem( playerid, I_SLOT24 );
					if ( slotitem >= 43 && slotitem <= 104 )
					{
						InsertItemToFactory( gPlayerData[playerid][pFaction], slotitem, SlotParam6( playerid, I_SLOT24 ) );
						RemovePlayerItemUsed( playerid, I_SLOT24 );
					}
				}
				if( PSlotItemType( playerid, I_SLOT25 ) == 1 )
				{
					slotitem = ShowSlotItem( playerid, I_SLOT25 );
					if ( slotitem >= 43 && slotitem <= 104 )
					{
						InsertItemToFactory( gPlayerData[playerid][pFaction], slotitem, SlotParam6( playerid, I_SLOT25 ) );
						RemovePlayerItemUsed( playerid, I_SLOT25 );
					}
				}
				gPlayerData[playerid][pPartType] = 0;
				gPlayerData[playerid][pPartItem] = 0;
				gPlayerData[playerid][pMountsLeft] = 0;
				SavePlayerData( playerid, "PartType" );
				SavePlayerData( playerid, "PartItem" );
				SavePlayerData( playerid, "MountsLeft" );
				SendClientMessage(playerid, COLOR_GREEN, "[INFO:] Zwróci³eœ wszystkie posiadane czêœci do magazynu");
				return 1;
			}
		}
		case DIALOG_WMENU_2_WEAPON:
		{
			if(response)
			{
				gListItem[playerid] = listitem;
				if (listitem == 0) // 9mm
				{
					format( string2, sizeof(string2), DIALOG_WMENU_BUY_CHECKOUT2_TXT,
					ItemName( 1, 16 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactory9MM] );
					format( string, sizeof(string), "%sWymagane czêœci:\n- szkielet broni [%d/1]\n- zespó³ zamka [%d/1]\n- magazynek [%d/1]\n- sprê¿yna powrotna [%d/1]\n- komplet œrubek [%d/1]",
					string2,
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart1],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart2],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart3],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart4],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart5]);

					ShowPlayerDialog( playerid, DIALOG_WMENU_3_WEAPON_MAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );

					return 1;
				}
				else if (listitem == 1) // 9mm tlumik
				{
					format( string2, sizeof(string2), DIALOG_WMENU_BUY_CHECKOUT2_TXT,
					ItemName( 1, 17 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactory9MMSil] );
					format( string, sizeof(string), "%sWymagane czêœci:\n- szkielet broni [%d/1]\n- zespó³ zamka [%d/1]\n- magazynek [%d/1]\n- sprê¿yna powrotna [%d/1]\n- komplet œrubek [%d/1]\n- t³umik [%d/1]",
					string2,
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart1],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart2],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart3],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart4],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart5],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart6]);

					ShowPlayerDialog( playerid, DIALOG_WMENU_3_WEAPON_MAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );

					return 1;
				}
				else if (listitem == 2) // desert eagle
				{
					// format( string2, sizeof(string2), DIALOG_WMENU_BUY_CHECKOUT2_TXT,
					// ItemName( 1, 18 ),
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryDesEagle] );
					// format( string, sizeof(string), "%sWymagane czêœci:\n- szkielet broni [%d/4]\n- zespó³ zamka [%d/2]\n- magazynek [%d/2]\n- sprê¿yna powrotna [%d/2]\n- komplet œrubek [%d/1]\n- carbon [%d/1]",
					// string2,
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart1],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart2],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart3],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart4],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart5],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryDesEaglePart]);

					// ShowPlayerDialog( playerid, DIALOG_WMENU_3_WEAPON_MAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );
					ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, "Broñ jest niedostêpna", string, "Zmontuj", "Wróæ" );

					return 1;
				}
				else if (listitem == 6) // shotgun
				{
					format( string2, sizeof(string2), DIALOG_WMENU_BUY_CHECKOUT2_TXT,
					ItemName( 1, 19 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryShotgun] );
					format( string, sizeof(string), "%sWymagane czêœci:\n- szkielet broni karabinowej [%d/2]\n- zespó³ zamka karabinu [%d/1]\n- magazynek karabinu [%d/1]\n- sprê¿yna powrotna karabinu [%d/3]\n- kolba [%d/1]\n- komplet œrubek karabinu [%d/1]\n- rêkojeœæ prze³adowania [%d/1]",
					string2,
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryShotPart]);

					ShowPlayerDialog( playerid, DIALOG_WMENU_3_WEAPON_MAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );

					return 1;
				}
				else if (listitem == 3) // micro smg
				{
					format( string2, sizeof(string2), DIALOG_WMENU_BUY_CHECKOUT2_TXT,
					ItemName( 1, 22 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryMicroSMG] );
					format( string, sizeof(string), "%sWymagane czêœci:\n- szkielet broni [%d/4]\n- zespó³ zamka [%d/4]\n- magazynek [%d/4]\n- sprê¿yna powrotna [%d/1]\n- komplet œrubek [%d/1]",
					string2,
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart1],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart2],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart3],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart4],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart5]);

					ShowPlayerDialog( playerid, DIALOG_WMENU_3_WEAPON_MAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );

					return 1;
				}
				else if (listitem == 4) // mp5
				{
					// format( string2, sizeof(string2), DIALOG_WMENU_BUY_CHECKOUT2_TXT,
					// ItemName( 1, 23 ),
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryMP5] );
					// format( string, sizeof(string), "%sWymagane czêœci:\n- szkielet broni karabinowej [%d/2]\n- zespó³ zamka karabinu [%d/2]\n- magazynek karabinu [%d/1]\n- sprê¿yna powrotna karabinu [%d/1]\n- kolba [%d/1]\n- komplet œrubek karabinu [%d/1]\n- skrzynka monta¿owa MP5 [%d/1]",
					// string2,
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryMP5Part]);

					// ShowPlayerDialog( playerid, DIALOG_WMENU_3_WEAPON_MAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );
					ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, "Broñ jest niedostêpna", string, "Zmontuj", "Wróæ" );
					
					return 1;
				}
				else if (listitem == 7) // ak-47
				{
					// format( string2, sizeof(string2), DIALOG_WMENU_BUY_CHECKOUT2_TXT,
					// ItemName( 1, 24 ),
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAK47] );
					// format( string, sizeof(string), "%sWymagane czêœci:\n- szkielet broni karabinowej [%d/3]\n- zespó³ zamka karabinu [%d/2]\n- magazynek karabinu [%d/2]\n- sprê¿yna powrotna karabinu [%d/1]\n- kolba [%d/1]\n- komplet œrubek karabinu [%d/1]\n- zestaw monta¿owy AK-47 [%d/1]",
					// string2,
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAK47Part]);

					// ShowPlayerDialog( playerid, DIALOG_WMENU_3_WEAPON_MAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );
					ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, "Broñ jest niedostêpna", string, "Zmontuj", "Wróæ" );

					return 1;
				}
				else if (listitem == 8) // m4
				{
					// format( string2, sizeof(string2), DIALOG_WMENU_BUY_CHECKOUT2_TXT,
					// ItemName( 1, 25 ),
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryM4] );
					// format( string, sizeof(string), "%sWymagane czêœci:\n- szkielet broni karabinowej [%d/3]\n- zespó³ zamka karabinu [%d/2]\n- magazynek karabinu [%d/2]\n- sprê¿yna powrotna karabinu [%d/1]\n- kolba [%d/1]\n- komplet œrubek karabinu [%d/1]\n- skrzynka monta¿owa M4 [%d/1]",
					// string2,
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryM4Part]);

					// ShowPlayerDialog( playerid, DIALOG_WMENU_3_WEAPON_MAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );
					ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, "Broñ jest niedostêpna", string, "Zmontuj", "Wróæ" );
					
					return 1;
				}
				else if (listitem == 5) // tec9
				{
					format( string2, sizeof(string2), DIALOG_WMENU_BUY_CHECKOUT2_TXT,
					ItemName( 1, 26 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryTec9] );
					format( string, sizeof(string), "%sWymagane czêœci:\n- szkielet broni [%d/3]\n- zespó³ zamka [%d/2]\n- magazynek [%d/2]\n- sprê¿yna powrotna [%d/1]\n- komplet œrubek [%d/1]\n- t³umik [%d/1]\n- zestaw monta¿owy Tec9 [%d/1]",
					string2,
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart1],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart2],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart3],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart4],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart5],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart6],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryTec9Part]);

					ShowPlayerDialog( playerid, DIALOG_WMENU_3_WEAPON_MAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );

					return 1;
				}
				else if (listitem == 9) // country rifle (karabin)
				{
					// format( string2, sizeof(string2), DIALOG_WMENU_BUY_CHECKOUT2_TXT,
					// ItemName( 1, 27 ),
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifle] );
					// format( string, sizeof(string), "%sWymagane czêœci:\n- szkielet broni karabinowej [%d/2]\n- zespó³ zamka karabinu [%d/1]\n- magazynek karabinu [%d/1]\n- sprê¿yna powrotna karabinu [%d/1]\n- kolba [%d/1]\n- komplet œrubek karabinu [%d/1]\n- skrzynka monta¿owa karabinu [%d/1]",
					// string2,
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart]);

					// ShowPlayerDialog( playerid, DIALOG_WMENU_3_WEAPON_MAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );
					ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, "Broñ jest niedostêpna", string, "Zmontuj", "Wróæ" );

					return 1;
				}
				else if (listitem == 10) // snajperka
				{
					// format( string2, sizeof(string2), DIALOG_WMENU_BUY_CHECKOUT2_TXT,
					// ItemName( 1, 28 ),
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactorySRifle] );
					// format( string, sizeof(string), "%sWymagane czêœci:\n- szkielet broni karabinowej [%d/3]\n- zespó³ zamka karabinu [%d/3]\n- magazynek karabinu [%d/2]\n- sprê¿yna powrotna karabinu [%d/2]\n- kolba [%d/2]\n- komplet œrubek karabinu [%d/2]\n- luneta [%d/1]\n- siatka maskuj¹ca [%d/1]",
					// string2,
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart7],
					// DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactorySniperPart]);

					// ShowPlayerDialog( playerid, DIALOG_WMENU_3_WEAPON_MAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );
					ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, "Broñ jest niedostêpna", string, "Zmontuj", "Wróæ" );
					
					return 1;
				}
				else if(listitem == 11) // kastet
				{
					InsertPlayerItemEx(playerid, 1, 147, 0, 0, 0, 0, "Puste", 1);
					DynamicFactions[gPlayerData[playerid][pFaction]][fBank] -= 20;
					SaveFData(gPlayerData[playerid][pFaction], "Bank");
				}
				else if(listitem == 12) // ³om
				{
					InsertPlayerItemEx(playerid, 3, 20, 15, 0, 0, 0, "Puste", 1);
					DynamicFactions[gPlayerData[playerid][pFaction]][fBank] -= 15;
					SaveFData(gPlayerData[playerid][pFaction], "Bank");
				}
				else if(listitem == 13) // ³om
				{
					InsertPlayerItemEx(playerid, 3, 21, 4, 0, 0, 0, "Puste", 1);
					DynamicFactions[gPlayerData[playerid][pFaction]][fBank] -= 5;
					SaveFData(gPlayerData[playerid][pFaction], "Bank");
				}
				else if(listitem == 14) // pancerz
				{
					gPlayerData[playerid][pArmour] = 50;
					SavePlayerData(playerid, "Armour");
					SetPlayerArmourEx(playerid, 50);
				}
			}
			else
			{
				ShowPlayerDialog( playerid, DIALOG_WMENU_1, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_MAIN_TXT, "Wybierz", "Anuluj" );
				return 1;
			}
		}
		case DIALOG_WMENU_3_INFO:
		{
			if(response)
				ShowPlayerDialog( playerid, DIALOG_WMENU_1, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_MAIN_TXT, "Wybierz", "Anuluj" );
			return 1;
		}
		case DIALOG_WMENU_3_WEAPON_MAKE:
		{
			if(response)
			{
				if( gPlayerData[playerid][pMountsLeft] != 0 )
				{
					ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_3_WEAPON_INFO_TXT, "Wróæ", "" );
					return 1;
				}
				new slot, enough;
				if(gListItem[playerid] == 0) // 9mm
				{
					if( PlayerFreeSlotCount( playerid ) < 5 )
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_3_NO_SPACE_TXT, "Wróæ", "" );
						return 1;
					}
					if( !PlayerHaveWFItemsEx( playerid, WF_WEAPON, WF_9MM ) )
						goto nosparepart;
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO1_TXT );
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO2_TXT );
					gPlayerData[playerid][pPartType] = WF_WEAPON;
					gPlayerData[playerid][pPartItem] = WF_9MM;
					gPlayerData[playerid][pMountsLeft] = 5;
					gPlayerData[playerid][pMountsPasses] = WF_LPT;
					SavePlayerData( playerid, "PartType" );
					SavePlayerData( playerid, "PartItem" );
					SavePlayerData( playerid, "MountsLeft" );
					SavePlayerData( playerid, "MountsPasses" );
					return 1;
				}
				else if(gListItem[playerid] == 1) // 9mm tlumik
				{
					if( PlayerFreeSlotCount( playerid ) < 6 )
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_3_NO_SPACE_TXT, "Wróæ", "" );
						return 1;
					}
					#define P1COUNT1 1
					#define P1COUNT2 1
					#define P1COUNT3 1
					#define P1COUNT4 1
					#define P1COUNT5 1
					#define P1COUNT6 1
					if ( !( slot = PHaveItem( playerid, 1, 48 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart1] - P1COUNT1 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 48, 0, 0, 0, 0, "Puste", P1COUNT1 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart1] -= P1COUNT1;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart1" );
					}
					else
					{
						enough = P1COUNT1 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart1] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 48, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart1] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart1" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 49 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart2] - P1COUNT2 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 49, 0, 0, 0, 0, "Puste", P1COUNT2 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart2] -= P1COUNT2;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart2" );
					}
					else
					{
						enough = P1COUNT2 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart2] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 49, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart2] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart2" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 50 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart3] - P1COUNT3 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 50, 0, 0, 0, 0, "Puste", P1COUNT3 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart3] -= P1COUNT3;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart3" );
					}
					else
					{
						enough = P1COUNT3 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart3] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 50, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart3] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart3" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 51 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart4] - P1COUNT4 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 51, 0, 0, 0, 0, "Puste", P1COUNT4 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart4] -= P1COUNT4;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart4" );
					}
					else
					{
						enough = P1COUNT4 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart4] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 51, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart4] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart4" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 52 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart5] - P1COUNT5 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 52, 0, 0, 0, 0, "Puste", P1COUNT5 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart5] -= P1COUNT5;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart5" );
					}
					else
					{
						enough = P1COUNT5 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart5] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 52, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart5] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart5" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 59 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart6] - P1COUNT6 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 59, 0, 0, 0, 0, "Puste", P1COUNT6 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart6] -= P1COUNT6;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart6" );
					}
					else
					{
						enough = P1COUNT6 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart6] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 59, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart6] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart6" );
						}
					}
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO1_TXT );
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO2_TXT );
					gPlayerData[playerid][pPartType] = WF_WEAPON;
					gPlayerData[playerid][pPartItem] = WF_9MMSIL;
					gPlayerData[playerid][pMountsLeft] = 6;
					gPlayerData[playerid][pMountsPasses] = WF_LPT;
					SavePlayerData( playerid, "PartType" );
					SavePlayerData( playerid, "PartItem" );
					SavePlayerData( playerid, "MountsLeft" );
					SavePlayerData( playerid, "MountsPasses" );
					return 1;
				}
				else if(gListItem[playerid] == 2) // desert eagle
				{
					if( PlayerFreeSlotCount( playerid ) < 6 )
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_3_NO_SPACE_TXT, "Wróæ", "" );
						return 1;
					}
					#define P2COUNT1 1
					#define P2COUNT2 2
					#define P2COUNT3 2
					#define P2COUNT4 2
					#define P2COUNT5 1
					#define P2COUNT6 1
					if ( !(slot = PHaveItem( playerid, 1, 87 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryDesEaglePart] - P2COUNT6 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 87, 0, 0, 0, 0, "Puste", P2COUNT6 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryDesEaglePart] -= P2COUNT6;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryDesEaglePart" );
					}
					else
					{
						enough = P2COUNT6 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryDesEaglePart] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 87, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryDesEaglePart] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryDesEaglePart" );
						}
					}
					if ( !(slot = PHaveItem( playerid, 1, 48 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart1] - P2COUNT1 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 48, 0, 0, 0, 0, "Puste", P2COUNT1 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart1] -= P2COUNT1;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart1" );
					}
					else
					{
						enough = P2COUNT1 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart1] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 48, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart1] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart1" );
						}
					}
					if ( !(slot = PHaveItem( playerid, 1, 49 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart2] - P2COUNT2 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 49, 0, 0, 0, 0, "Puste", P2COUNT2 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart2] -= P2COUNT2;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart2" );
					}
					else
					{
						enough = P2COUNT2 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart2] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 49, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart2] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart2" );
						}
					}
					if ( !(slot = PHaveItem( playerid, 1, 50 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart3] - P2COUNT3 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 50, 0, 0, 0, 0, "Puste", P2COUNT3 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart3] -= P2COUNT3;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart3" );
					}
					else
					{
						enough = P2COUNT3 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart3] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 50, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart3] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart3" );
						}
					}
					if ( !(slot = PHaveItem( playerid, 1, 51 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart4] - P2COUNT4 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 51, 0, 0, 0, 0, "Puste", P2COUNT4 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart4] -= P2COUNT4;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart4" );
					}
					else
					{
						enough = P2COUNT4 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart4] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 51, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart4] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart4" );
						}
					}
					if ( !(slot = PHaveItem( playerid, 1, 52 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart5] - P2COUNT5 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 52, 0, 0, 0, 0, "Puste", P2COUNT5 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart5] -= P2COUNT5;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart5" );
					}
					else
					{
						enough = P2COUNT5 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart5] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 51, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart5] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart5" );
						}
					}
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO1_TXT );
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO2_TXT );
					gPlayerData[playerid][pPartType] = WF_WEAPON;
					gPlayerData[playerid][pPartItem] = WF_DESEAGLE;
					gPlayerData[playerid][pMountsLeft] = 6;
					gPlayerData[playerid][pMountsPasses] = WF_LPT;
					SavePlayerData( playerid, "PartType" );
					SavePlayerData( playerid, "PartItem" );
					SavePlayerData( playerid, "MountsLeft" );
					SavePlayerData( playerid, "MountsPasses" );
					return 1;
				}
				else if(gListItem[playerid] == 6) // shotgun
				{
					if( PlayerFreeSlotCount( playerid ) < 7 )
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_3_NO_SPACE_TXT, "Wróæ", "" );
						return 1;
					}
					#define P3COUNT1 2
					#define P3COUNT2 1
					#define P3COUNT3 1
					#define P3COUNT4 3
					#define P3COUNT5 1
					#define P3COUNT6 1
					#define P3COUNT7 1
					if ( !( slot = PHaveItem( playerid, 1, 86 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryShotPart] - P3COUNT7 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 86, 0, 0, 0, 0, "Puste", P3COUNT7 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryShotPart] -= P3COUNT7;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryShotPart" );
					}
					else
					{
						enough = P3COUNT7 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryShotPart] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 86, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryShotPart] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryShotPart" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 53 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1] - P3COUNT1 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 53, 0, 0, 0, 0, "Puste", P3COUNT1 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1] -= P3COUNT1;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart1" );
					}
					else
					{
						enough = P3COUNT1 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 53, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart1" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 54 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2] - P3COUNT2 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 54, 0, 0, 0, 0, "Puste", P3COUNT2 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2] -= P3COUNT2;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart2" );
					}
					else
					{
						enough = P3COUNT2 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 54, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart2" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 55 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3] - P3COUNT3 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 55, 0, 0, 0, 0, "Puste", P3COUNT3 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3] -= P3COUNT3;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart3" );
					}
					else
					{
						enough = P3COUNT3 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 55, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart3" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 56 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4] - P3COUNT4 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 56, 0, 0, 0, 0, "Puste", P3COUNT4 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4] -= P3COUNT4;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart4" );
					}
					else
					{
						enough = P3COUNT4 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 56, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart4" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 57 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5] - P3COUNT5 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 57, 0, 0, 0, 0, "Puste", P3COUNT5 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5] -= P3COUNT5;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart5" );
					}
					else
					{
						enough = P3COUNT5 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 57, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart5" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 58 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6] - P3COUNT6 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 58, 0, 0, 0, 0, "Puste", P3COUNT6 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6] -= P3COUNT6;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart6" );
					}
					else
					{
						enough = P3COUNT6 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 58, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart6" );
						}
					}
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO1_TXT );
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO2_TXT );
					gPlayerData[playerid][pPartType] = WF_WEAPON;
					gPlayerData[playerid][pPartItem] = WF_SHOTGUN;
					gPlayerData[playerid][pMountsLeft] = 7;
					gPlayerData[playerid][pMountsPasses] = WF_HPT;
					SavePlayerData( playerid, "PartType" );
					SavePlayerData( playerid, "PartItem" );
					SavePlayerData( playerid, "MountsLeft" );
					SavePlayerData( playerid, "MountsPasses" );
					return 1;
				}
				else if(gListItem[playerid] == 3) // micro smg
				{
					if( PlayerFreeSlotCount( playerid ) < 5 )
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_3_NO_SPACE_TXT, "Wróæ", "" );
						return 1;
					}
					#define P4COUNT1 4
					#define P4COUNT2 4
					#define P4COUNT3 4
					#define P4COUNT4 1
					#define P4COUNT5 1
					if ( !( slot = PHaveItem( playerid, 1, 48 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart1] - P4COUNT1 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 48, 0, 0, 0, 0, "Puste", P4COUNT1 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart1] -= P4COUNT1;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart1" );
					}
					else
					{
						enough = P4COUNT1 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart1] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 48, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart1] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart1" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 49 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart2] - P4COUNT2 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 49, 0, 0, 0, 0, "Puste", P4COUNT2 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart2] -= P4COUNT2;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart2" );
					}
					else
					{
						enough = P4COUNT2 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart2] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 49, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart2] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart2" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 50 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart3] - P4COUNT3 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 50, 0, 0, 0, 0, "Puste", P4COUNT3 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart3] -= P4COUNT3;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart3" );
					}
					else
					{
						enough = P4COUNT3 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart3] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 50, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart3] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart3" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 51 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart4] - P4COUNT4 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 51, 0, 0, 0, 0, "Puste", P4COUNT4 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart4] -= P4COUNT4;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart4" );
					}
					else
					{
						enough = P4COUNT4 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart4] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 51, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart4] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart4" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 52 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart5] - P4COUNT5 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 52, 0, 0, 0, 0, "Puste", P4COUNT5 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart5] -= P4COUNT5;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart5" );
					}
					else
					{
						enough = P4COUNT5 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart5] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 52, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart5] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart5" );
						}
					}
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO1_TXT );
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO2_TXT );
					gPlayerData[playerid][pPartType] = WF_WEAPON;
					gPlayerData[playerid][pPartItem] = WF_MICROSMG;
					gPlayerData[playerid][pMountsLeft] = 5;
					gPlayerData[playerid][pMountsPasses] = WF_LPT;
					SavePlayerData( playerid, "PartType" );
					SavePlayerData( playerid, "PartItem" );
					SavePlayerData( playerid, "MountsLeft" );
					SavePlayerData( playerid, "MountsPasses" );
					return 1;
				}
				else if(gListItem[playerid] == 4) // mp5
				{
					if( PlayerFreeSlotCount( playerid ) < 7 )
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_3_NO_SPACE_TXT, "Wróæ", "" );
						return 1;
					}
					#define P5COUNT1 2
					#define P5COUNT2 2
					#define P5COUNT3 1
					#define P5COUNT4 1
					#define P5COUNT5 1
					#define P5COUNT6 1
					#define P5COUNT7 1
					if ( !( slot = PHaveItem( playerid, 1, 83 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryMP5Part] - P5COUNT7 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 83, 0, 0, 0, 0, "Puste", P5COUNT7 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryMP5Part] -= P5COUNT7;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryMP5Part" );
					}
					else
					{
						enough = P5COUNT7 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryMP5Part] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 83, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryMP5Part] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryMP5Part" );
						}
					}
					if ( !(slot = PHaveItem( playerid, 1, 53 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1] - P5COUNT1 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 53, 0, 0, 0, 0, "Puste", P5COUNT1 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1] -= P5COUNT1;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart1" );
					}
					else
					{
						enough = P5COUNT1 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 53, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart1" );
						}
					}
					if ( !(slot = PHaveItem( playerid, 1, 54 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2] - P5COUNT2 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 54, 0, 0, 0, 0, "Puste", P5COUNT2 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2] -= P5COUNT2;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart2" );
					}
					else
					{
						enough = P5COUNT2 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 54, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart2" );
						}
					}
					if ( !(slot = PHaveItem( playerid, 1, 55 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3] - P5COUNT3 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 55, 0, 0, 0, 0, "Puste", P5COUNT3 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3] -= P5COUNT3;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart3" );
					}
					else
					{
						enough = P5COUNT3 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 55, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart3" );
						}
					}
					if ( !(slot = PHaveItem( playerid, 1, 56 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4] - P5COUNT4 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 56, 0, 0, 0, 0, "Puste", P5COUNT4 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4] -= P5COUNT4;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart4" );
					}
					else
					{
						enough = P5COUNT4 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 56, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart4" );
						}
					}
					if ( !(slot = PHaveItem( playerid, 1, 57 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5] - P5COUNT5 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 57, 0, 0, 0, 0, "Puste", P5COUNT5 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5] -= P5COUNT5;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart5" );
					}
					else
					{
						enough = P5COUNT5 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 57, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart5" );
						}
					}
					if ( !(slot = PHaveItem( playerid, 1, 58 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6] - P5COUNT6 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 58, 0, 0, 0, 0, "Puste", P5COUNT6 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6] -= P5COUNT6;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart6" );
					}
					else
					{
						enough = P5COUNT6 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 58, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart6" );
						}
					}
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO1_TXT );
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO2_TXT );
					gPlayerData[playerid][pPartType] = WF_WEAPON;
					gPlayerData[playerid][pPartItem] = WF_MP5;
					gPlayerData[playerid][pMountsLeft] = 7;
					gPlayerData[playerid][pMountsPasses] = WF_HPT;
					SavePlayerData( playerid, "PartType" );
					SavePlayerData( playerid, "PartItem" );
					SavePlayerData( playerid, "MountsLeft" );
					SavePlayerData( playerid, "MountsPasses" );
					return 1;
				}
				else if(gListItem[playerid] == 7) // ak-47
				{
					if( PlayerFreeSlotCount( playerid ) < 7 )
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_3_NO_SPACE_TXT, "Wróæ", "" );
						return 1;
					}
					#define P6COUNT1 3
					#define P6COUNT2 2
					#define P6COUNT3 2
					#define P6COUNT4 1
					#define P6COUNT5 1
					#define P6COUNT6 1
					#define P6COUNT7 1
					if ( !( slot = PHaveItem( playerid, 1, 84 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAK47Part] - P6COUNT7 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 84, 0, 0, 0, 0, "Puste", P6COUNT7 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAK47Part] -= P6COUNT7;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAK47Part" );
					}
					else
					{
						enough = P6COUNT7 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAK47Part] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 84, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAK47Part] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryAK47Part" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 53 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1] - P6COUNT1 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 53, 0, 0, 0, 0, "Puste", P6COUNT1 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1] -= P6COUNT1;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart1" );
					}
					else
					{
						enough = P6COUNT1 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 53, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart1" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 54 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2] - P6COUNT2 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 54, 0, 0, 0, 0, "Puste", P6COUNT2 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2] -= P6COUNT2;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart2" );
					}
					else
					{
						enough = P6COUNT2 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 54, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart2" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 55 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3] - P6COUNT3 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 55, 0, 0, 0, 0, "Puste", P6COUNT3 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3] -= P6COUNT3;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart3" );
					}
					else
					{
						enough = P6COUNT3 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 55, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart3" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 56 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4] - P6COUNT4 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 56, 0, 0, 0, 0, "Puste", P6COUNT4 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4] -= P6COUNT4;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart4" );
					}
					else
					{
						enough = P6COUNT4 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 56, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart4" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 57 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5] - P6COUNT5 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 57, 0, 0, 0, 0, "Puste", P6COUNT5  );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5] -= P6COUNT5 ;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart5" );
					}
					else
					{
						enough = P6COUNT5 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 57, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart5" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 58 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6] - P6COUNT6 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 58, 0, 0, 0, 0, "Puste", P6COUNT6 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6] -= P6COUNT6;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart6" );
					}
					else
					{
						enough = P6COUNT6 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 58, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart6" );
						}
					}
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO1_TXT );
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO2_TXT );
					gPlayerData[playerid][pPartType] = WF_WEAPON;
					gPlayerData[playerid][pPartItem] = WF_AK47;
					gPlayerData[playerid][pMountsLeft] = 7;
					gPlayerData[playerid][pMountsPasses] = WF_HPT;
					SavePlayerData( playerid, "PartType" );
					SavePlayerData( playerid, "PartItem" );
					SavePlayerData( playerid, "MountsLeft" );
					SavePlayerData( playerid, "MountsPasses" );
					return 1;
				}
				else if(gListItem[playerid] == 8) // m4
				{
					if( PlayerFreeSlotCount( playerid ) < 7 )
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_3_NO_SPACE_TXT, "Wróæ", "" );
						return 1;
					}
					#define P7COUNT1 3
					#define P7COUNT2 2
					#define P7COUNT3 2
					#define P7COUNT4 1
					#define P7COUNT5 1
					#define P7COUNT6 1
					#define P7COUNT7 1
					if ( !( slot = PHaveItem( playerid, 1, 85 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryM4Part] - P7COUNT7 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 85, 0, 0, 0, 0, "Puste", P7COUNT7 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryM4Part] -= P7COUNT7;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryM4Part" );
					}
					else
					{
						enough = P7COUNT7 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryM4Part] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 85, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryM4Part] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryM4Part" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 53 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1] - P7COUNT1 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 53, 0, 0, 0, 0, "Puste", P7COUNT1 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1] -= P7COUNT1;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart1" );
					}
					else
					{
						enough = P7COUNT1 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 53, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart1" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 54 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2] - P7COUNT2 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 54, 0, 0, 0, 0, "Puste", P7COUNT2 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2] -= P7COUNT2;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart2" );
					}
					else
					{
						enough = P7COUNT2 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 54, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart2" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 55 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3] - P7COUNT3 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 55, 0, 0, 0, 0, "Puste", P7COUNT3 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3] -= P7COUNT3;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart3" );
					}
					else
					{
						enough = P7COUNT3 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 55, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart3" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 56 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4] - P7COUNT4 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 56, 0, 0, 0, 0, "Puste", P7COUNT4 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4] -= P7COUNT4;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart4" );
					}
					else
					{
						enough = P7COUNT4 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 56, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart4" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 57 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5] - P7COUNT5 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 57, 0, 0, 0, 0, "Puste", P7COUNT5 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5] -= P7COUNT5;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart5" );
					}
					else
					{
						enough = P7COUNT5 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 57, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart5" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 58 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6] - P7COUNT6 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 58, 0, 0, 0, 0, "Puste", P7COUNT6 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6] -= P7COUNT6;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart6" );
					}
					else
					{
						enough = P7COUNT6 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 58, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart6" );
						}
					}
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO1_TXT );
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO2_TXT );
					gPlayerData[playerid][pPartType] = WF_WEAPON;
					gPlayerData[playerid][pPartItem] = WF_M4;
					gPlayerData[playerid][pMountsLeft] = 7;
					gPlayerData[playerid][pMountsPasses] = WF_HPT;
					SavePlayerData( playerid, "PartType" );
					SavePlayerData( playerid, "PartItem" );
					SavePlayerData( playerid, "MountsLeft" );
					SavePlayerData( playerid, "MountsPasses" );
					return 1;
				}
				else if(gListItem[playerid] == 5) // tec9
				{
					if( PlayerFreeSlotCount( playerid ) < 7 )
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_3_NO_SPACE_TXT, "Wróæ", "" );
						return 1;
					}
					#define P8COUNT1 3
					#define P8COUNT2 2
					#define P8COUNT3 2
					#define P8COUNT4 1
					#define P8COUNT5 1
					#define P8COUNT6 1
					#define P8COUNT7 1
					if ( !( slot = PHaveItem( playerid, 1, 82 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryTec9Part] - P8COUNT7 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 82, 0, 0, 0, 0, "Puste", P8COUNT7 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryTec9Part] -= P8COUNT7;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryTec9Part" );
					}
					else
					{
						enough = P8COUNT7 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryTec9Part] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 82, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryTec9Part] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryTec9Part" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 48 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart1] - P8COUNT1 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 48, 0, 0, 0, 0, "Puste", P8COUNT1 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart1] -= P8COUNT1;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart1" );
					}
					else
					{
						enough = P8COUNT1 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart1] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 48, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart1] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart1" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 49 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart2] - P8COUNT2 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 49, 0, 0, 0, 0, "Puste", P8COUNT2 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart2] -= P8COUNT2;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart2" );
					}
					else
					{
						enough = P8COUNT2 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart2] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 49, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart2] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart2" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 50 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart3] - P8COUNT3 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 50, 0, 0, 0, 0, "Puste", P8COUNT3 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart3] -= P8COUNT3;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart3" );
					}
					else
					{
						enough = P8COUNT3 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart3] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 50, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart3] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart3" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 51 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart4] - P8COUNT4 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 51, 0, 0, 0, 0, "Puste", P8COUNT4 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart4] -= P8COUNT4;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart4" );
					}
					else
					{
						enough = P8COUNT4 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart4] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 51, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart4] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart4" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 52 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart5] - P8COUNT5 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 52, 0, 0, 0, 0, "Puste", P8COUNT5 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart5] -= P8COUNT5;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart5" );
					}
					else
					{
						enough = P8COUNT5 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart5] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 52, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart5] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart5" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 59 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart6] - P8COUNT6 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 59, 0, 0, 0, 0, "Puste", P8COUNT6 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart6] -= P8COUNT6;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart6" );
					}
					else
					{
						enough = P8COUNT6 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart6] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 59, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart6] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart6" );
						}
					}
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO1_TXT );
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO2_TXT );
					gPlayerData[playerid][pPartType] = WF_WEAPON;
					gPlayerData[playerid][pPartItem] = WF_TEC9;
					gPlayerData[playerid][pMountsLeft] = 7;
					gPlayerData[playerid][pMountsPasses] = WF_LPT;
					SavePlayerData( playerid, "PartType" );
					SavePlayerData( playerid, "PartItem" );
					SavePlayerData( playerid, "MountsLeft" );
					SavePlayerData( playerid, "MountsPasses" );
					return 1;
				}
				else if(gListItem[playerid] == 9) // country rifle (karabin)
				{
					if( PlayerFreeSlotCount( playerid ) < 7 )
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_3_NO_SPACE_TXT, "Wróæ", "" );
						return 1;
					}
					#define P9COUNT1 2
					#define P9COUNT2 1
					#define P9COUNT3 1
					#define P9COUNT4 1
					#define P9COUNT5 1
					#define P9COUNT6 1
					#define P9COUNT7 1
					if ( !( slot = PHaveItem( playerid, 1, 88 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart] - P9COUNT7 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 88, 0, 0, 0, 0, "Puste", P9COUNT7 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart] -= P9COUNT7;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart1" );
					}
					else
					{
						enough = P9COUNT7 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 88, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 53 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1] - P9COUNT1 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 53, 0, 0, 0, 0, "Puste", P9COUNT1 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1] -= P9COUNT1;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart1" );
					}
					else
					{
						enough = P9COUNT1 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 53, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart1" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 54 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2] - P9COUNT2 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 54, 0, 0, 0, 0, "Puste", P9COUNT2 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2] -= P9COUNT2;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart2" );
					}
					else
					{
						enough = P9COUNT2 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 54, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart2" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 55 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3] - P9COUNT3 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 55, 0, 0, 0, 0, "Puste", P9COUNT3 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3] -= P9COUNT3;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart3" );
					}
					else
					{
						enough = P9COUNT3 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 55, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart3" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 56 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4] - P9COUNT4 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 56, 0, 0, 0, 0, "Puste", P9COUNT4 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4] -= P9COUNT4;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart4" );
					}
					else
					{
						enough = P9COUNT4 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 56, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart4" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 57 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5] - P9COUNT5 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 57, 0, 0, 0, 0, "Puste", P9COUNT5 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5] -= P9COUNT5;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart5" );
					}
					else
					{
						enough = P9COUNT5 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 57, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart5" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 58 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6] - P9COUNT6 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 58, 0, 0, 0, 0, "Puste", P9COUNT6 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6] -= P9COUNT6;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart6" );
					}
					else
					{
						enough = P9COUNT6 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 58, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart6" );
						}
					}
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO1_TXT );
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO2_TXT );
					gPlayerData[playerid][pPartType] = WF_WEAPON;
					gPlayerData[playerid][pPartItem] = WF_RIFLE;
					gPlayerData[playerid][pMountsLeft] = 7;
					gPlayerData[playerid][pMountsPasses] = WF_HPT;
					SavePlayerData( playerid, "PartType" );
					SavePlayerData( playerid, "PartItem" );
					SavePlayerData( playerid, "MountsLeft" );
					SavePlayerData( playerid, "MountsPasses" );
					return 1;
				}
				else if(gListItem[playerid] == 10) // snajperka
				{
					if( PlayerFreeSlotCount( playerid ) < 8 )
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_3_NO_SPACE_TXT, "Wróæ", "" );
						return 1;
					}
					#define P10COUNT1 3
					#define P10COUNT2 3
					#define P10COUNT3 2
					#define P10COUNT4 2
					#define P10COUNT5 2
					#define P10COUNT6 2
					#define P10COUNT7 1
					#define P10COUNT8 1
					if ( !( slot = PHaveItem( playerid, 1, 89 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactorySniperPart] - P10COUNT8 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 89, 0, 0, 0, 0, "Puste", P10COUNT8 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactorySniperPart] -= P10COUNT8;
						SaveFData( gPlayerData[playerid][pFaction], "WFactorySniperPart" );
					}
					else
					{
						enough = P10COUNT8 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactorySniperPart] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 89, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactorySniperPart] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactorySniperPart" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 53 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1] - P10COUNT1 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 53, 0, 0, 0, 0, "Puste", P10COUNT1 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1] -= P10COUNT1;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart1" );
					}
					else
					{
						enough = P10COUNT1 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 53, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart1" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 54 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2] - P10COUNT2 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 54, 0, 0, 0, 0, "Puste", P10COUNT2 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2] -= P10COUNT2;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart2" );
					}
					else
					{
						enough = P10COUNT2 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 54, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart2" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 55 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3] - P10COUNT3 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 55, 0, 0, 0, 0, "Puste", P10COUNT3 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3] -= P10COUNT3;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart3" );
					}
					else
					{
						enough = P10COUNT3 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 55, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart3" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 56 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4] - P10COUNT4 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 56, 0, 0, 0, 0, "Puste", P10COUNT4 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4] -= P10COUNT4;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart4" );
					}
					else
					{
						enough = P10COUNT4 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 56, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart4" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 57 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5] - P10COUNT5 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 57, 0, 0, 0, 0, "Puste", P10COUNT5 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5] -= P10COUNT5;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart5" );
					}
					else
					{
						enough = P10COUNT5 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 57, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart5" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 58 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6] - P10COUNT6 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 58, 0, 0, 0, 0, "Puste", P10COUNT6 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6] -= P10COUNT6;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart6" );
					}
					else
					{
						enough = P10COUNT6 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 58, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart6" );
						}
					}
					if ( !( slot = PHaveItem( playerid, 1, 60 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart7] - P10COUNT7 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 60, 0, 0, 0, 0, "Puste", P10COUNT7 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart7] -= P10COUNT7;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart7" );
					}
					else
					{
						enough = P10COUNT7 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart7] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 60, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart7] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflelPart6" );
						}
					}
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO1_TXT );
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO2_TXT );
					gPlayerData[playerid][pPartType] = WF_WEAPON;
					gPlayerData[playerid][pPartItem] = WF_SRIFLE;
					gPlayerData[playerid][pMountsLeft] = 8;
					gPlayerData[playerid][pMountsPasses] = WF_HPT;
					SavePlayerData( playerid, "PartType" );
					SavePlayerData( playerid, "PartItem" );
					SavePlayerData( playerid, "MountsLeft" );
					SavePlayerData( playerid, "MountsPasses" );
					return 1;
				}
				nosparepart:
				#undef P1COUNT1
				#undef P1COUNT2
				#undef P1COUNT3
				#undef P1COUNT4
				#undef P1COUNT5
				#undef P1COUNT6
				#undef P2COUNT1
				#undef P2COUNT2
				#undef P2COUNT3
				#undef P2COUNT4
				#undef P2COUNT5
				#undef P2COUNT6
				#undef P3COUNT1
				#undef P3COUNT2
				#undef P3COUNT3
				#undef P3COUNT4
				#undef P3COUNT5
				#undef P3COUNT6
				#undef P3COUNT7
				#undef P4COUNT1
				#undef P4COUNT2
				#undef P4COUNT3
				#undef P4COUNT4
				#undef P4COUNT5
				#undef P5COUNT1
				#undef P5COUNT2
				#undef P5COUNT3
				#undef P5COUNT4
				#undef P5COUNT5
				#undef P5COUNT6
				#undef P5COUNT7
				#undef P6COUNT1
				#undef P6COUNT2
				#undef P6COUNT3
				#undef P6COUNT4
				#undef P6COUNT5
				#undef P6COUNT6
				#undef P6COUNT7
				#undef P7COUNT1
				#undef P7COUNT2
				#undef P7COUNT3
				#undef P7COUNT4
				#undef P7COUNT5
				#undef P7COUNT6
				#undef P7COUNT7
				#undef P8COUNT1
				#undef P8COUNT2
				#undef P8COUNT3
				#undef P8COUNT4
				#undef P8COUNT5
				#undef P8COUNT6
				#undef P9COUNT1
				#undef P9COUNT2
				#undef P9COUNT3
				#undef P9COUNT4
				#undef P9COUNT5
				#undef P9COUNT6
				#undef P9COUNT7
				#undef P10COUNT1
				#undef P10COUNT2
				#undef P10COUNT3
				#undef P10COUNT4
				#undef P10COUNT5
				#undef P10COUNT6
				#undef P10COUNT7
				#undef P10COUNT8
				ShowPlayerDialog( playerid, DIALOG_WMENU_NOSPAREPART, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOSPAREPART_TXT, "Wróæ", "" );
				return 1;
			}
			else
			{
				format( string, sizeof(string),
				DIALOG_WMENU_W_LIST_TXT,
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactory9MM],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactory9MMSil],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryDesEagle],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryMicroSMG],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryMP5],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryTec9],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryShotgun],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAK47],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryM4],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifle],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactorySRifle],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactorySCharge]);

				ShowPlayerDialog( playerid, DIALOG_WMENU_2_WEAPON, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, string, "Wybierz", "Wróæ" );

				return 1;
			}
		}
		case DIALOG_WMENU_2_AMMO:
		{
			if(response)
			{
				gListItem[playerid] = listitem;
				if (listitem == 0) // nabój 9mm
				{
					format( string2, sizeof(string2), DIALOG_WMENU_BUY_CHECKOUT2_TXT,
					ItemName( 1, 36 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactory9MMAmmo] );
					format( string, sizeof(string), "%sWymagane czêœci:\n- pocisk [%d/1]\n- ³uska [%d/1]\n- proch admidowy [%d/1]\n- sp³onka [%d/1]",
					string2,
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1a],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2a],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3a],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4a] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_3_AMMO_MAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );

					return 1;
				}
				if (listitem == 1) // nabój .50 AE
				{
					format( string2, sizeof(string2), DIALOG_WMENU_BUY_CHECKOUT2_TXT,
					ItemName( 1, 37 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactory50AEAmmo] );
					format( string, sizeof(string), "%sWymagane czêœci:\n- pocisk [%d/10]\n- ³uska [%d/5]\n- proch ignis volatilis [%d/2]\n- sp³onka [%d/2]",
					string2,
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1e],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2e],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3e],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4e] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_3_AMMO_MAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );

					return 1;
				}
				if (listitem == 2) // œrut
				{
					format( string2, sizeof(string2), DIALOG_WMENU_BUY_CHECKOUT2_TXT,
					ItemName( 1, 38 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryBuckshot] );
					format( string, sizeof(string), "%sWymagane czêœci:\n- o³ów [%d/6]\n- ³uska [%d/1]\n- proch œwiszcz¹cy [%d/2]\n- sp³onka [%d/2]",
					string2,
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1b],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2b],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3b],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4b] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_3_AMMO_MAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );

					return 1;
				}
				if (listitem == 3) // nabój 7.62
				{
					format( string2, sizeof(string2), DIALOG_WMENU_BUY_CHECKOUT2_TXT,
					ItemName( 1, 39 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactory762MMAmmo] );
					format( string, sizeof(string), "%sWymagane czêœci:\n- pocisk [%d/4]\n- ³uska [%d/2]\n- proch czarny [%d/2]\n- sp³onka [%d/2]",
					string2,
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1c],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2c],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3c],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4c] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_3_AMMO_MAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );

					return 1;
				}
				if (listitem == 4) // nabój 12.7mm
				{
					format( string2, sizeof(string2), DIALOG_WMENU_BUY_CHECKOUT2_TXT,
					ItemName( 1, 40 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactory127MMAmmo] );
					format( string, sizeof(string), "%sWymagane czêœci:\n- pocisk [%d/4]\n- ³uska [%d/2]\n- proch czarny [%d/2]\n- sp³onka [%d/2]",
					string2,
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1d],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2d],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3d],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4d] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_3_AMMO_MAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );

					return 1;
				}
			}
			else
			{
				ShowPlayerDialog( playerid, DIALOG_WMENU_1, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_MAIN_TXT, "Wybierz", "Anuluj" );
				return 1;
			}
		}
		case DIALOG_WMENU_3_AMMO_MAKE:
		{
			if(response)
			{
				if( gPlayerData[playerid][pMountsLeft] != 0 )
				{
					ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_3_WEAPON_INFO_TXT, "Wróæ", "" );
					return 1;
				}
				new slot, enough;
				if (gListItem[playerid] == 0) // nabój 9mm
				{
					if( PlayerFreeSlotCount( playerid ) < 4 )
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_3_NO_SPACE_TXT, "Wróæ", "" );
						return 1;
					}
					if ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1a] >= 1 &&
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2a] >= 1 &&
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3a] >= 1 &&
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4a] >= 1 )
					{
						if( !PHaveItem( playerid, 1, 43 ) )
						{
							InsertPlayerItemEx( playerid, 1, 43, 0, 0, 0, 0, "Puste", 1 );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1a] -= 1;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart1a" );
						}
						if( !PHaveItem( playerid, 1, 44 ) )
						{
							InsertPlayerItemEx( playerid, 1, 44, 0, 0, 0, 0, "Puste", 1 );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2a] -= 1;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart2a" );
						}
						if( !PHaveItem( playerid, 1, 45 ) )
						{
							InsertPlayerItemEx( playerid, 1, 45, 0, 0, 0, 0, "Puste", 1 );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3a] -= 1;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart3a" );
						}
						if( !PHaveItem( playerid, 1, 46 ) )
						{
							InsertPlayerItemEx( playerid, 1, 46, 0, 0, 0, 0, "Puste", 1 );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4a] -= 1;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart4a" );
						}
						SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO1_TXT );
						SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO2_TXT );
						gPlayerData[playerid][pPartType] = WF_AMMO;
						gPlayerData[playerid][pPartItem] = WF_9MMAMMO;
						gPlayerData[playerid][pMountsLeft] = 4;
						gPlayerData[playerid][pMountsPasses] = WF_AMMOT;
						SavePlayerData( playerid, "PartType" );
						SavePlayerData( playerid, "PartItem" );
						SavePlayerData( playerid, "MountsLeft" );
						SavePlayerData( playerid, "MountsPasses" );
						return 1;
					}
				}
				else if (gListItem[playerid] == 1) // nabój .50 AE
				{
					if( PlayerFreeSlotCount( playerid ) < 4 )
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_3_NO_SPACE_TXT, "Wróæ", "" );
						return 1;
					}
					#define P1COUNT1 10
					#define P1COUNT2 5
					#define P1COUNT3 2
					#define P1COUNT4 2
					if( !( slot = PHaveItem( playerid, 1, 101 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1e] - P1COUNT1 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 101, 0, 0, 0, 0, "Puste", P1COUNT1 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1e] -= P1COUNT1;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart1e" );
					}
					else
					{
						enough = P1COUNT1 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1e] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 101, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1e] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart1e" );
						}
					}
					if( !( slot = PHaveItem( playerid, 1, 102 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2e] - P1COUNT2 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 102, 0, 0, 0, 0, "Puste", P1COUNT2 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2e] -= P1COUNT2;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart2e" );
					}
					else
					{
						enough = P1COUNT2 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2e] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 102, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2e] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart2e" );
						}
					}
					if( !( slot = PHaveItem( playerid, 1, 103 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3e] - P1COUNT3 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 103, 0, 0, 0, 0, "Puste", P1COUNT3 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3e] -= P1COUNT3;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart3e" );
					}
					else
					{
						enough = P1COUNT3 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3e] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 103, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3e] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart3e" );
						}
					}
					if( !( slot = PHaveItem( playerid, 1, 104 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4e] - P1COUNT4 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 104, 0, 0, 0, 0, "Puste", P1COUNT4 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4e] -= P1COUNT4;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart4e" );
					}
					else
					{
						enough = P1COUNT4 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4e] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 104, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4e] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart4e" );
						}
					}
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO1_TXT );
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO2_TXT );
					gPlayerData[playerid][pPartType] = WF_AMMO;
					gPlayerData[playerid][pPartItem] = WF_50AEAMMO;
					gPlayerData[playerid][pMountsLeft] = 4;
					gPlayerData[playerid][pMountsPasses] = WF_AMMOT;
					SavePlayerData( playerid, "PartType" );
					SavePlayerData( playerid, "PartItem" );
					SavePlayerData( playerid, "MountsLeft" );
					SavePlayerData( playerid, "MountsPasses" );
					return 1;
				}
				else if (gListItem[playerid] == 2) // œrut
				{
					if( PlayerFreeSlotCount( playerid ) < 4 )
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_3_NO_SPACE_TXT, "Wróæ", "" );
						return 1;
					}
					#define P2COUNT1 6
					#define P2COUNT2 1
					#define P2COUNT3 2
					#define P2COUNT4 2
					if( !( slot = PHaveItem( playerid, 1, 47 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1b] - P2COUNT1 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 47, 0, 0, 0, 0, "Puste", P2COUNT1 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1b] -= P2COUNT1;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart1b" );
					}
					else
					{
						enough = P2COUNT1 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1b] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 47, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1b] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart1b" );
						}
					}
					if( !( slot = PHaveItem( playerid, 1, 90 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2b] - P2COUNT2 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 90, 0, 0, 0, 0, "Puste", P2COUNT2 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2b] -= P2COUNT2;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart2b" );
					}
					else
					{
						enough = P2COUNT2 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2b] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 90, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2b] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart2b" );
						}
					}
					if( !( slot = PHaveItem( playerid, 1, 91 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3b] - P2COUNT3 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 91, 0, 0, 0, 0, "Puste", P2COUNT3 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3b] -= P2COUNT3;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart3b" );
					}
					else
					{
						enough = P2COUNT3 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3b] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 91, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3b] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart3b" );
						}
					}
					if( !( slot = PHaveItem( playerid, 1, 92 ) ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4b] - P2COUNT4 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 92, 0, 0, 0, 0, "Puste", P2COUNT4 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4b] -= P2COUNT4;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart4b" );
					}
					else
					{
						enough = P2COUNT4 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4b] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 92, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4b] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart4b" );
						}
					}
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO1_TXT );
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO2_TXT );
					gPlayerData[playerid][pPartType] = WF_AMMO;
					gPlayerData[playerid][pPartItem] = WF_BUCKSHOT;
					gPlayerData[playerid][pMountsLeft] = 4;
					gPlayerData[playerid][pMountsPasses] = WF_AMMOT;
					SavePlayerData( playerid, "PartType" );
					SavePlayerData( playerid, "PartItem" );
					SavePlayerData( playerid, "MountsLeft" );
					SavePlayerData( playerid, "MountsPasses" );
					return 1;
				}
				else if (gListItem[playerid] == 3) // nabój 7.62
				{
					if( PlayerFreeSlotCount( playerid ) < 4 )
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_3_NO_SPACE_TXT, "Wróæ", "" );
						return 1;
					}
					#define P3COUNT1 4
					#define P3COUNT2 2
					#define P3COUNT3 2
					#define P3COUNT4 2
					if( !PHaveItem( playerid, 1, 93 ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1c] - P3COUNT1 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 93, 0, 0, 0, 0, "Puste", P3COUNT1 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1c] -= P3COUNT1;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart1c" );
					}
					else
					{
						enough = P3COUNT1 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1c] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 93, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1c] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart1c" );
						}
					}
					if( !PHaveItem( playerid, 1, 94 ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2c] - P3COUNT2 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 94, 0, 0, 0, 0, "Puste", P3COUNT2 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2c] -= P3COUNT2;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart2c" );
					}
					else
					{
						enough = P3COUNT2 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2c] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 94, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2c] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart2c" );
						}
					}
					if( !PHaveItem( playerid, 1, 95 ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3c] - P3COUNT3 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 95, 0, 0, 0, 0, "Puste", P3COUNT3 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3c] -= P3COUNT3;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart3c" );
					}
					else
					{
						enough = P3COUNT3 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3c] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 95, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3c] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart3c" );
						}
					}
					if( !PHaveItem( playerid, 1, 96 ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3c] - P3COUNT4 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 96, 0, 0, 0, 0, "Puste", P3COUNT4 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4c] -= P3COUNT4;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart4c" );
					}
					else
					{
						enough = P3COUNT4 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4c] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 96, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4c] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart4c" );
						}
					}
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO1_TXT );
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO2_TXT );
					gPlayerData[playerid][pPartType] = WF_AMMO;
					gPlayerData[playerid][pPartItem] = WF_762MMAMMO;
					gPlayerData[playerid][pMountsLeft] = 4;
					gPlayerData[playerid][pMountsPasses] = WF_AMMOT;
					SavePlayerData( playerid, "PartType" );
					SavePlayerData( playerid, "PartItem" );
					SavePlayerData( playerid, "MountsLeft" );
					SavePlayerData( playerid, "MountsPasses" );
					return 1;
				}
				else if (gListItem[playerid] == 4) // nabój 12.7
				{
					if( PlayerFreeSlotCount( playerid ) < 4 )
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_3_NO_SPACE_TXT, "Wróæ", "" );
						return 1;
					}
					#define P4COUNT1 4
					#define P4COUNT2 2
					#define P4COUNT3 2
					#define P4COUNT4 2
					if( !PHaveItem( playerid, 1, 97 ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1d] - P4COUNT1 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 97, 0, 0, 0, 0, "Puste", P4COUNT1 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1d] -= P4COUNT1;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart1d" );
					}
					else
					{
						enough = P4COUNT1 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1d] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 97, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1d] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart1d" );
						}
					}
					if( !PHaveItem( playerid, 1, 98 ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2d] - P4COUNT2 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 98, 0, 0, 0, 0, "Puste", P4COUNT2 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2d] -= P4COUNT2;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart2d" );
					}
					else
					{
						enough = P4COUNT2 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2d] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 98, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2d] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart2d" );
						}
					}
					if( !PHaveItem( playerid, 1, 99 ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3d] - P4COUNT3 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 99, 0, 0, 0, 0, "Puste", P4COUNT3 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3d] -= P4COUNT3;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart3d" );
					}
					else
					{
						enough = P4COUNT3 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3d] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 99, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3d] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart3d" );
						}
					}
					if( !PHaveItem( playerid, 1, 100 ) )
					{
						if( ( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4d] - P4COUNT4 ) < 0 )
							goto nosparepart;
						InsertPlayerItemEx( playerid, 1, 100, 0, 0, 0, 0, "Puste", P4COUNT4 );
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4d] -= P4COUNT4;
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart4d" );
					}
					else
					{
						enough = P4COUNT4 - SlotParam6(playerid, slot);
						if( enough > 0 && (DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4d] - enough) < 0 )
							goto nosparepart;
						if( enough > 0 )
						{
							InsertPlayerItemEx( playerid, 1, 99, 0, 0, 0, 0, "Puste", enough );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4d] -= enough;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart4d" );
						}
					}
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO1_TXT );
					SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO2_TXT );
					gPlayerData[playerid][pPartType] = WF_AMMO;
					gPlayerData[playerid][pPartItem] = WF_127MMAMMO;
					gPlayerData[playerid][pMountsLeft] = 4;
					gPlayerData[playerid][pMountsPasses] = WF_AMMOT;
					SavePlayerData( playerid, "PartType" );
					SavePlayerData( playerid, "PartItem" );
					SavePlayerData( playerid, "MountsLeft" );
					SavePlayerData( playerid, "MountsPasses" );
					return 1;
				}
				nosparepart:
				ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOSPAREPART_TXT, "Wróæ", "" );
				return 1;
			}
			else
			{
				format( string, sizeof(string),
				"1. Nabój 9mm [%d]\n2. Nabój .50 AE [%d]\n3. Œrut [%d]\n4. Nabój 7.62mm [%d]\n5. Nabój 12.7 [%d]",
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactory9MMAmmo],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactory50AEAmmo],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryBuckshot],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactory762MMAmmo],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactory127MMAmmo]);

				ShowPlayerDialog( playerid, DIALOG_WMENU_2_AMMO, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, string, "Wybierz", "Wróæ" );

				return 1;
			}
		}
		case DIALOG_WMENU_2_PARTS:
		{
			if(response)
			{
				if(listitem == 0)
				{
					format( string3, sizeof(string3),
					"34. Zestaw monta¿owy Tec9 [%d]\n35. Skrzynka monta¿owa MP5 [%d]\n36. Zestaw monta¿owy AK-47 [%d]\n37. Skrzynka montazowa M4 [%d]\n38. Rêkojeœæ prze³adowania [%d]\n39. Skrzynka monta¿owa karabinu [%d]\n40. Siatka maskuj¹ca [%d]\n41.Carbon [%d]",
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryTec9Part],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryMP5Part],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAK47Part],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryM4Part],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryShotPart],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactorySniperPart],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryDesEaglePart]);

					format( string2, sizeof(string2),
					"20. Proch œwiszcz¹cy [%d]\n21. Sp³onka do strzelby [%d]\n22. Pocisk 7.62mm [%d]\n23. £uska 7.62mm [%d]\n24. Proch czarny [%d]\n25. Sp³onka 7.62 [%d]\n26. Pocisk 12.7mm [%d]\n27. £uska 12.7mm [%d]\n28. Proch bobinit [%d]\n29. Sp³onka 12.7mm [%d]\n30. Pocisk .50AE [%d]\n31. £uska .50AE [%d]\n32. Proch ignis volatilis [%d]\n33. Sp³onka .50AE [%d]",
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart3b],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart4b],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart1c],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart2c],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart3c],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart4c],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart1d],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart2d],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart3d],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart4d],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart1e],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart2e],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart3e],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart4e] );

					format( string, sizeof(string),
					"1. Szkielet broni [%d]\n2. Zespó³ zamka [%d]\n3. Magazynek [%d]\n4. Sprê¿yna powrotna [%d]\n5. Komplet œrubek [%d]\n6. T³umik [%d]\n7. Szkielet broni karabinowej [%d]\n8. Zespó³ zamka karabinu [%d]\n9. Magazynek karabinu [%d]\n10. Sprê¿yna powrotna karabinu [%d]\n11. Kolba [%d]\n12. Komplet œrubek karabinu [%d]\n13. Luneta [%d]\n14. Pocisk 9mm [%d]\n15. £uska 9mm [%d]\n16. Proch admidowy [%d]\n17. Sp³onka 9mm [%d]\n18. O³ów [%d]\n19. £uska do strzelby [%d]\n%s\n%s",
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolPart1],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolPart2],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolPart3],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolPart4],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolPart5],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolPart6],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRiflePart1],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRiflePart2],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRiflePart3],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRiflePart4],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRiflePart5],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRiflePart6],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRiflePart7],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart1a],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart2a],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart3a],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart4a],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart1b],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart2b],
					string2,
					string3 );

					gListItem[playerid] = listitem;

					ShowPlayerDialog( playerid, DIALOG_WMENU_3_PARTS_MMAKE, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, string, "Wybierz", "Wróæ" );

					return 1;
				}
				else
				{
					format( string, sizeof(string),
					"1. Lufa [%d]\n2. Mechanizm spustowo-uderzeniowy [%d]\n3. Nak³adki z tworzywa sztucznego [%d]\n4. Mechanizm iglicy [%d]\n5. Bezpiecznik typu listkowego [%d]\n6. Przyrz¹dy celownicze [%d]\n7. Szkielet [%d]\n8. Stopka [%d]\n9. Wew. sprê¿yna [%d]\n10. Dosy³acz [%d]\n11. Lufa karabinu [%d]\n12. Mechanizm spustowo-uderzeniowy karabinu [%d]\n13. Mechanizm iglicy karabinu [%d]",
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS1Part1],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS1Part2],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS1Part3],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS2Part1],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS2Part2],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS2Part3],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS3Part1],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS3Part2],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS3Part3],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS3Part4],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS1Part1],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS1Part2],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS2Part1] );

					format( string2, sizeof(string2),
					"14. Bezpiecznik typu listkowego karabinu [%d]\n15. Przyrz¹dy celownicze karabinu [%d]\n16. Szkielet karabinu [%d]\n17. Stopka karabinu [%d]\n18. Wew. sprê¿yna karabinu [%d]\n19. Dosy³acz karabinu [%d]\n20. Szkielet lunety [%d]\n21. Soczewki [%d]",
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS2Part2],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS2Part3],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS3Part1],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS3Part2],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS3Part3],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS3Part4],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS6Part1],
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS6Part2] );

					format( string, sizeof(string), "%s\n%s", string, string2 );

					gListItem[playerid] = listitem;

					ShowPlayerDialog( playerid, DIALOG_WMENU_3_PARTS_SBUY, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, string, "Wybierz", "Wróæ" );

					return 1;
				}
			}
			else
			{
				ShowPlayerDialog( playerid, DIALOG_WMENU_1, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_MAIN_TXT, "Wybierz", "Anuluj" );
				return 1;
			}
		}
		case DIALOG_WMENU_3_PARTS_MMAKE:
		{
			if(response)
			{
				gListItem[playerid] = listitem;
				if (listitem == 0) // szkielet broni
				{
					format( string, sizeof(string), "Nazwa: %s\nDostêpna iloœæ w magazynie frakcji: %d\nWymagane czêœci:\n- lufa [%d/1]\n- mechanizm spustowo-uderzeniowy [%d/1]\n- nak³adki z tworzywa sztucznego [%d/1]",
					ItemName( 1, 48 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart1],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS1Part1],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS1Part2],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS1Part3] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );
					return 1;
				}
				else if (listitem == 1) // Zespó³ zamka
				{
					format( string, sizeof(string), "Nazwa: %s\nDostêpna iloœæ w magazynie frakcji: %d\nWymagane czêœci:\n- mechanizm iglicy [%d/1]\n- bezpiecznik typu listkowego [%d/1]\n- przyrz¹dy celownicze [%d/1]",
					ItemName( 1, 49 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart2],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS2Part1],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS2Part2],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS2Part3] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );
					return 1;
				}
				else if (listitem == 2) // Magazynek
				{
					format( string, sizeof(string), "Nazwa: %s\nDostêpna iloœæ w magazynie frakcji: %d\nWymagane czêœci:\n- szkielet [%d/1]\n- stopka [%d/1]\n- wew. sprê¿yna [%d/1]\n- dosy³acz [%d/1]",
					ItemName( 1, 50 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart3],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS3Part1],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS3Part2],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS3Part3],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS3Part4] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );
					return 1;
				}
				else if (listitem == 3) // sprê¿yna powrotna
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 51 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart4],
					ItemPrice( 1, 51 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 4) // komplet œrubek
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 52 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart5],
					ItemPrice( 1, 52 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 5) // t³umik
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 59 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart6],
					ItemPrice( 1, 59 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 6) // szkielet broni karabinowej
				{
					format( string, sizeof(string), "Nazwa: %s\nDostêpna iloœæ w magazynie frakcji: %d\nWymagane czêœci:\n- lufa karabinu [%d/1]\n- mechanizm spustowo-uderzeniowy karabinu [%d/1]\n- nak³adki z tworzywa sztucznego [%d/1]",
					ItemName( 1, 53 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS1Part1],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS1Part2],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS1Part3] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );
					return 1;
				}
				else if (listitem == 7) // zespó³ zamka karabinu
				{
					format( string, sizeof(string), "Nazwa: %s\nDostêpna iloœæ w magazynie frakcji: %d\nWymagane czêœci:\n- mechanizm iglicy karabinu [%d/1]\n- bezpiecznik typu listkowego karabinu [%d/1]\n- przyrz¹dy celownicze karabinu [%d/1]",
					ItemName( 1, 54 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS2Part1],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS2Part2],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS2Part3] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );
					return 1;
				}
				else if (listitem == 8) // magazynek karabinu
				{
					format( string, sizeof(string), "Nazwa: %s\nDostêpna iloœæ w magazynie frakcji: %d\nWymagane czêœci:\n- szkielet karabinu [%d/1]\n- stopka karabinu [%d/1]\n- wew. sprê¿yna karabinu [%d/1]\n- dosy³acz karabinu [%d/1]",
					ItemName( 1, 55 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS3Part1],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS3Part2],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS3Part3],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS3Part4] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );
					return 1;
				}
				else if (listitem == 9) // sprê¿yna powrotna karabinu
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 56 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4],
					ItemPrice( 1, 56 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 10) // kolba
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 57 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5],
					ItemPrice( 1, 57 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 11) // komplet œrubek karabinu
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 58 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6],
					ItemPrice( 1, 58 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 12) // luneta
				{
					format( string, sizeof(string), "Nazwa: %s\nDostêpna iloœæ w magazynie frakcji: %d\nWymagane czêœci:\n- szkielet lunety [%d/1]\n- soczewki [%d/1]",
					ItemName( 1, 60 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS6Part1],
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS6Part2] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );
					return 1;
				}
				else if (listitem == 13) // pocisk 9mm
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 43 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1a],
					ItemPrice( 1, 43 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 14) // ³uska 9mm
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 44 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2a],
					ItemPrice( 1, 44 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 15) // proch 1gr
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 45 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3a],
					ItemPrice( 1, 45 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 16) // sp³onka 9mm
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 46 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4a],
					ItemPrice( 1, 46 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 17) // o³ów
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 47 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1b],
					ItemPrice( 1, 47 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 18) // ³uska do strzelby
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 90 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2b],
					ItemPrice( 1, 90 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 19) // proch 5gr
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 91 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3b],
					ItemPrice( 1, 91 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 20) // sp³onka do strzelby
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 92 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4b],
					ItemPrice( 1, 92 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 21) // pocisk karabinu
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 93 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1c],
					ItemPrice( 1, 93 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 22) // ³uska karabinu
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 94 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2c],
					ItemPrice( 1, 94 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 23) // proch 3gr
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 95 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3c],
					ItemPrice( 1, 95 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 24) // sp³onka karabinu
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 96 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4c],
					ItemPrice( 1, 96 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 25) // pocisk snajp
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 97 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1d],
					ItemPrice( 1, 97 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 26) // ³uska snajp
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 98 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2d],
					ItemPrice( 1, 98 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 27) // proch 10gr
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 99 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3d],
					ItemPrice( 1, 99 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 28) // sp³onka snajp
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 100 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4d],
					ItemPrice( 1, 100 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 29) // pocisk des ea
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 101 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1e],
					ItemPrice( 1, 101 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 30) // ³uska des ea
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 102 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2e],
					ItemPrice( 1, 102 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 31) // proch 2gr
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 103 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3e],
					ItemPrice( 1, 103 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 32) // sp³onka des ea
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 104 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4e],
					ItemPrice( 1, 104 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 33) // zestaw montazowy tec9
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 82 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryTec9Part],
					ItemPrice( 1, 82 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 34) // zestaw montazowy MP5
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 83 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryMP5Part],
					ItemPrice( 1, 83 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 35) // zestaw montazowy AK47
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 84 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAK47Part],
					ItemPrice( 1, 84 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 36) // zestaw montazowy M4
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 85 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryM4Part],
					ItemPrice( 1, 85 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 37) // zestaw montazowy shot
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 86 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryShotPart],
					ItemPrice( 1, 86 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 38) // zestaw montazowy rifle
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 88 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart],
					ItemPrice( 1, 88 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 39) // zestaw montazowy sniper
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 89 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactorySniperPart],
					ItemPrice( 1, 89 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				else if (listitem == 40) // zestaw montazowy des eagl
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 87 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryDesEaglePart],
					ItemPrice( 1, 87 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
					return 1;
				}
				return 1;
			}
			else
			{
				format( string, sizeof(string),
				"1. Czêœci g³ówne\n2. Podczêœci");

				ShowPlayerDialog( playerid, DIALOG_WMENU_2_PARTS, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, string, "Wybierz", "Wróæ" );

				return 1;
			}
		}
		case DIALOG_WMENU_4_PARTS_MMAKE:
		{
			if(response)
			{
				if( gPlayerData[playerid][pMountsLeft] != 0 )
				{
					ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_3_WEAPON_INFO_TXT, "Wróæ", "" );
					return 1;
				}
				if (gListItem[playerid] == 0) // szkielet broni
				{
					if( PlayerFreeSlotCount( playerid ) < 3 )
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_3_NO_SPACE_TXT, "Wróæ", "" );
						return 1;
					}
					if( DynamicFactions[ gPlayerData[playerid][pFaction]] [WFactoryPistolS1Part1] >= 1 &&
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS1Part2] >= 1 &&
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS1Part3] >= 1 )
					{
						if( !PHaveItem( playerid, 1, 61 ) )
						{
							InsertPlayerItemEx( playerid, 1, 61, 0, 0, 0, 0, "Puste", 1);
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS1Part1]--;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolS1Part1" );
						}
						if( !PHaveItem( playerid, 1, 62 ) )
						{
							InsertPlayerItemEx( playerid, 1, 62, 0, 0, 0, 0, "Puste", 1);
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS1Part2]--;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolS1Part2" );
						}
						if( !PHaveItem( playerid, 1, 63 ) )
						{
							InsertPlayerItemEx( playerid, 1, 63, 0, 0, 0, 0, "Puste", 1);
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS1Part3]--;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolS1Part3" );
						}
						SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO1_TXT );
						SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO2_TXT );
						gPlayerData[playerid][pPartType] = WF_PART;
						gPlayerData[playerid][pPartItem] = WF_PISTOLPART1;
						gPlayerData[playerid][pMountsLeft] = 3;
						gPlayerData[playerid][pMountsPasses] = WF_LSPT;
						SavePlayerData( playerid, "PartType" );
						SavePlayerData( playerid, "PartItem" );
						SavePlayerData( playerid, "MountsLeft" );
						SavePlayerData( playerid, "MountsPasses" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 1) // Zespó³ zamka
				{
					if( PlayerFreeSlotCount( playerid ) < 3 )
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_3_NO_SPACE_TXT, "Wróæ", "" );
						return 1;
					}
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS2Part1] >= 1 &&
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS2Part2] >= 1 &&
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS2Part3] >= 1 )
					{
						if ( !PHaveItem( playerid, 1, 64 ) )
						{
							InsertPlayerItemEx( playerid, 1, 64, 0, 0, 0, 0, "Puste", 1 );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS2Part1]--;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolS2Part1" );
						}
						if ( !PHaveItem( playerid, 1, 65 ) )
						{
							InsertPlayerItemEx( playerid, 1, 65, 0, 0, 0, 0, "Puste", 1 );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS2Part2]--;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolS2Part2" );
						}
						if ( !PHaveItem( playerid, 1, 66 ) )
						{
							InsertPlayerItemEx( playerid, 1, 66, 0, 0, 0, 0, "Puste", 1 );
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS2Part3]--;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolS2Part3" );
						}
						SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO1_TXT );
						SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO2_TXT );
						gPlayerData[playerid][pPartType] = WF_PART;
						gPlayerData[playerid][pPartItem] = WF_PISTOLPART2;
						gPlayerData[playerid][pMountsLeft] = 3;
						gPlayerData[playerid][pMountsPasses] = WF_LSPT;
						SavePlayerData( playerid, "PartType" );
						SavePlayerData( playerid, "PartItem" );
						SavePlayerData( playerid, "MountsLeft" );
						SavePlayerData( playerid, "MountsPasses" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 2) // Magazynek
				{
					if( PlayerFreeSlotCount( playerid ) < 4 )
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_3_NO_SPACE_TXT, "Wróæ", "" );
						return 1;
					}
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS3Part1] >= 1 &&
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS3Part2] >= 1 &&
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS3Part3] >= 1 &&
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS3Part4] >= 1 )
					{
						if ( !PHaveItem( playerid, 1, 67 ) )
						{
							InsertPlayerItemEx( playerid, 1, 67, 0, 0, 0, 0, "Puste", 1);
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS3Part1]--;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolS3Part1" );
						}
						if ( !PHaveItem( playerid, 1, 68 ) )
						{
							InsertPlayerItemEx( playerid, 1, 68, 0, 0, 0, 0, "Puste", 1);
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS3Part2]--;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolS3Part2" );
						}
						if ( !PHaveItem( playerid, 1, 69 ) )
						{
							InsertPlayerItemEx( playerid, 1, 69, 0, 0, 0, 0, "Puste", 1);
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS3Part3]--;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolS3Part3" );
						}
						if ( !PHaveItem( playerid, 1, 70 ) )
						{
							InsertPlayerItemEx( playerid, 1, 70, 0, 0, 0, 0, "Puste", 1);
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS3Part4]--;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolS3Part4" );
						}
						SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO1_TXT );
						SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO2_TXT );
						gPlayerData[playerid][pPartType] = WF_PART;
						gPlayerData[playerid][pPartItem] = WF_PISTOLPART3;
						gPlayerData[playerid][pMountsLeft] = 4;
						gPlayerData[playerid][pMountsPasses] = WF_LSPT;
						SavePlayerData( playerid, "PartType" );
						SavePlayerData( playerid, "PartItem" );
						SavePlayerData( playerid, "MountsLeft" );
						SavePlayerData( playerid, "MountsPasses" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 3) // sprê¿yna powrotna
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 51 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart4]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 51 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart4" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 4) // komplet œrubek
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 52 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart5]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 52 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart5" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 5) // t³umik
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 59 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart6]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 59 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolPart6" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 6) // szkielet broni karabinowej
				{
					if( PlayerFreeSlotCount( playerid ) < 3 )
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_3_NO_SPACE_TXT, "Wróæ", "" );
						return 1;
					}
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS1Part1] >= 1 &&
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS1Part2] >= 1 &&
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS1Part3] >= 1 )
					{
						if ( !PHaveItem( playerid, 1, 71 ) )
						{
							InsertPlayerItemEx( playerid, 1, 71, 0, 0, 0, 0, "Puste", 1);
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS1Part1]--;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRifleS1Part1" );
						}
						if ( !PHaveItem( playerid, 1, 72 ) )
						{
							InsertPlayerItemEx( playerid, 1, 72, 0, 0, 0, 0, "Puste", 1);
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS1Part2]--;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRifleS1Part2" );
						}
						if ( !PHaveItem( playerid, 1, 63 ) )
						{
							InsertPlayerItemEx( playerid, 1, 63, 0, 0, 0, 0, "Puste", 1);
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS1Part3]--;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolS1Part3" );
						}
						SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO1_TXT );
						SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO2_TXT );
						gPlayerData[playerid][pPartType] = WF_PART;
						gPlayerData[playerid][pPartItem] = WF_RIFLEPART1;
						gPlayerData[playerid][pMountsLeft] = 3;
						gPlayerData[playerid][pMountsPasses] = WF_HSPT;
						SavePlayerData( playerid, "PartType" );
						SavePlayerData( playerid, "PartItem" );
						SavePlayerData( playerid, "MountsLeft" );
						SavePlayerData( playerid, "MountsPasses" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 7) // zespó³ zamka karabinu
				{
					if( PlayerFreeSlotCount( playerid ) < 3 )
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_3_NO_SPACE_TXT, "Wróæ", "" );
						return 1;
					}
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS2Part1] >= 1 &&
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS2Part2] >= 1 &&
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS2Part3] >= 1 )
					{
						if ( !PHaveItem( playerid, 1, 73 ) )
						{
							InsertPlayerItemEx( playerid, 1, 73, 0, 0, 0, 0, "Puste", 1);
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS2Part1]--;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRifleS2Part1" );
						}
						if ( !PHaveItem( playerid, 1, 74 ) )
						{
							InsertPlayerItemEx( playerid, 1, 74, 0, 0, 0, 0, "Puste", 1);
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS2Part2]--;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRifleS2Part2" );
						}
						if ( !PHaveItem( playerid, 1, 75 ) )
						{
							InsertPlayerItemEx( playerid, 1, 75, 0, 0, 0, 0, "Puste", 1);
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS2Part3]--;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRifleS2Part3" );
						}
						SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO1_TXT );
						SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO2_TXT );
						gPlayerData[playerid][pPartType] = WF_PART;
						gPlayerData[playerid][pPartItem] = WF_RIFLEPART2;
						gPlayerData[playerid][pMountsLeft] = 3;
						gPlayerData[playerid][pMountsPasses] = WF_HSPT;
						SavePlayerData( playerid, "PartType" );
						SavePlayerData( playerid, "PartItem" );
						SavePlayerData( playerid, "MountsLeft" );
						SavePlayerData( playerid, "MountsPasses" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 8) // magazynek karabinu
				{
					if( PlayerFreeSlotCount( playerid ) < 4 )
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_3_NO_SPACE_TXT, "Wróæ", "" );
						return 1;
					}
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS3Part1] >= 1 &&
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS3Part2] >= 1 &&
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS3Part3] >= 1 &&
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS3Part4] >= 1 )
					{
						if ( !PHaveItem( playerid, 1, 76 ) )
						{
							InsertPlayerItemEx( playerid, 1, 76, 0, 0, 0, 0, "Puste", 1);
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS3Part1]--;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRifleS3Part1" );
						}
						if ( !PHaveItem( playerid, 1, 77 ) )
						{
							InsertPlayerItemEx( playerid, 1, 77, 0, 0, 0, 0, "Puste", 1);
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS3Part2]--;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRifleS3Part2" );
						}
						if ( !PHaveItem( playerid, 1, 78 ) )
						{
							InsertPlayerItemEx( playerid, 1, 78, 0, 0, 0, 0, "Puste", 1);
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS3Part3]--;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRifleS3Part3" );
						}
						if ( !PHaveItem( playerid, 1, 79 ) )
						{
							InsertPlayerItemEx( playerid, 1, 79, 0, 0, 0, 0, "Puste", 1);
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS3Part4]--;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRifleS3Part4" );
						}
						SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO1_TXT );
						SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO2_TXT );
						gPlayerData[playerid][pPartType] = WF_PART;
						gPlayerData[playerid][pPartItem] = WF_RIFLEPART3;
						gPlayerData[playerid][pMountsLeft] = 3;
						gPlayerData[playerid][pMountsPasses] = WF_HSPT;
						SavePlayerData( playerid, "PartType" );
						SavePlayerData( playerid, "PartItem" );
						SavePlayerData( playerid, "MountsLeft" );
						SavePlayerData( playerid, "MountsPasses" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 9) // sprê¿yna powrotna karabinu
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 56 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 56 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart4" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 10) // kolba
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 57 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 57 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart5" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 11) // komplet œrubek karabinu
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 58 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 58 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart6" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 12) // luneta
				{
					if( PlayerFreeSlotCount( playerid ) < 2 )
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_3_INFO, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_3_NO_SPACE_TXT, "Wróæ", "" );
						return 1;
					}
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS6Part1] >= 1 &&
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS6Part2] >= 1 )
					{
						if( !PHaveItem( playerid, 1, 80 ) )
						{
							InsertPlayerItemEx( playerid, 1, 80, 0, 0, 0, 0, "Puste", 1);
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS6Part1]--;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolS6Part1" );
						}
						if( !PHaveItem( playerid, 1, 81 ) )
						{
							InsertPlayerItemEx( playerid, 1, 81, 0, 0, 0, 0, "Puste", 1);
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS6Part2]--;
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolS6Part2" );
						}
						SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO1_TXT );
						SendClientMessage( playerid, COLOR_LIGHTYELLOW2, DIALOG_WMENU_GOTO2_TXT );
						gPlayerData[playerid][pPartType] = WF_PART;
						gPlayerData[playerid][pPartItem] = WF_RIFLEPART7;
						gPlayerData[playerid][pMountsLeft] = 2;
						gPlayerData[playerid][pMountsPasses] = WF_HSPT;
						SavePlayerData( playerid, "PartType" );
						SavePlayerData( playerid, "PartItem" );
						SavePlayerData( playerid, "MountsLeft" );
						SavePlayerData( playerid, "MountsPasses" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 13) // pocisk 9mm
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 43 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1a]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 43 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart1a" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 14) // ³uska 9mm
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 44 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2a]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 44 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart2a" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 15) // proch 1gr
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 45 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3a]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 45 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart3a" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 16) // sp³onka 9mm
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 46 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4a]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 46 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart4a" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 17) // o³ów
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 47 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1b]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 47 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart1b" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 18) // ³uska do strzelby
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 90 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2b]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 90 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart2b" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 19) // proch 5gr
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 91 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3b]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 91 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart3b" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 20) // sp³onka do strzelby
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 92 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4b]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 92 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart4b" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 21) // pocisk karabinu
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 93 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1c]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 93 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart1c" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 22) // ³uska karabinu
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 94 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2c]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 94 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart2c" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 23) // proch 3gr
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 95 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3c]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 95 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart3c" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 24) // sp³onka karabinu
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 96 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4c]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 96 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart4c" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 25) // pocisk snajp
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 97 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1d]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 97 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart1d" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 26) // ³uska snajp
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 98 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2d]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 98 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart2d" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 27) // proch 10gr
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 99 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3d]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 99 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart3d" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 28) // sp³onka snajp
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 100 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4d]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 100 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart4d" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 29) // pocisk des ea
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 101 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1e]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 101 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart1e" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 30) // ³uska des ea
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 102 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2e]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 102 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart2e" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 31) // proch 2gr
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 103 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3e]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 103 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart3e" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 32) // sp³onka des ea
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 104 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4e]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 104 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAmmoPart4e" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 33) // zestaw montazowy tec9
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 82 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryTec9Part]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 82 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryTec9Part" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 34) // zestaw montazowy mp5
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 83 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryMP5Part]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 83 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryMP5Part" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 35) // zestaw montazowy ak-47
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 84 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAK47Part]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 84 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryAK47Part" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 36) // zestaw montazowy m4
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 85 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryM4Part]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 85 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryM4Part" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 37) // zestaw montazowy shot
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 86 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryShotPart]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 86 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryShotPart" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 38) // zestaw montazowy rifle
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 88 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 88 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryRiflePart" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 39) // zestaw montazowy sniper
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 89 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactorySniperPart]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 89 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactorySniperPart" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				else if(gListItem[playerid] == 40) // zestaw montazowy des eag
				{
					if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] >= ItemPrice( 1, 87 ) )
					{
						DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryDesEaglePart]++;
						DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 87 );
						SaveFData( gPlayerData[playerid][pFaction], "WFactoryDesEaglePart" );
						SaveFData( gPlayerData[playerid][pFaction], "Bank" );
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_BOUGHT_PART_TXT, "Wróæ", "" );
						return 1;
					}
					else
					{
						ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOCASH_TXT, "Wróæ", "" );
						return 1;
					}
				}
				ShowPlayerDialog( playerid, DIALOG_WMENU_5_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, DIALOG_WMENU_NOSPAREPART_TXT, "Wróæ", "" );
				return 1;
			}
			else
			{
				format( string3, sizeof(string3),
				"34. Zestaw monta¿owy Tec9 [%d]\n35. Skrzynka monta¿owa MP5 [%d]\n36. Zestaw monta¿owy AK-47 [%d]\n37. Skrzynka montazowa M4 [%d]\n38. Rêkojeœæ prze³adowania [%d]\n39. Skrzynka monta¿owa karabinu [%d]\n40. Siatka maskuj¹ca [%d]\n41.Carbon [%d]",
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryTec9Part],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryMP5Part],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAK47Part],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryM4Part],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryShotPart],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactorySniperPart],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryDesEaglePart]);

				format( string2, sizeof(string2),
				"20. Proch œwiszcz¹cy [%d]\n21. Sp³onka do strzelby [%d]\n22. Pocisk 7.62mm [%d]\n23. £uska 7.62mm [%d]\n24. Proch czarny [%d]\n25. Sp³onka 7.62 [%d]\n26. Pocisk 12.7mm [%d]\n27. £uska 12.7mm [%d]\n28. Proch bobinit [%d]\n29. Sp³onka 12.7mm [%d]\n30. Pocisk .50AE [%d]\n31. £uska .50AE [%d]\n32. Proch ignis volatilis [%d]\n33. Sp³onka .50AE [%d]",
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart3b],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart4b],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart1c],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart2c],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart3c],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart4c],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart1d],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart2d],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart3d],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart4d],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart1e],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart2e],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart3e],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart4e] );

				format( string, sizeof(string),
				"1. Szkielet broni [%d]\n2. Zespó³ zamka [%d]\n3. Magazynek [%d]\n4. Sprê¿yna powrotna [%d]\n5. Komplet œrubek [%d]\n6. T³umik [%d]\n7. Szkielet broni karabinowej [%d]\n8. Zespó³ zamka karabinu [%d]\n9. Magazynek karabinu [%d]\n10. Sprê¿yna powrotna karabinu [%d]\n11. Kolba [%d]\n12. Komplet œrubek karabinu [%d]\n13. Luneta [%d]\n14. Pocisk 9mm [%d]\n15. £uska 9mm [%d]\n16. Proch admidowy [%d]\n17. Sp³onka 9mm [%d]\n18. O³ów [%d]\n19. £uska do strzelby [%d]\n%s\n%s",
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolPart1],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolPart2],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolPart3],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolPart4],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolPart5],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolPart6],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRiflePart1],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRiflePart2],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRiflePart3],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRiflePart4],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRiflePart5],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRiflePart6],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRiflePart7],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart1a],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart2a],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart3a],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart4a],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart1b],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryAmmoPart2b],
				string2,
				string3 );

				gListItem[playerid] = listitem;

				ShowPlayerDialog( playerid, DIALOG_WMENU_3_PARTS_MMAKE, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, string, "Wybierz", "Wróæ" );

				return 1;
			}
		}
		case DIALOG_WMENU_5_PARTS_MMAKE:
		{
			listitem = gListItem[playerid];
			if (listitem == 0) // szkielet broni
			{
				format( string, sizeof(string), "Nazwa: %s\nDostêpna iloœæ w magazynie frakcji: %d\nWymagane czêœci:\n- lufa [%d/1]\n- mechanizm spustowo-uderzeniowy [%d/1]\n- nak³adki z tworzywa sztucznego [%d/1]",
				ItemName( 1, 48 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart1],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS1Part1],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS1Part2],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS1Part3] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );
				return 1;
			}
			else if (listitem == 1) // Zespó³ zamka
			{
				format( string, sizeof(string), "Nazwa: %s\nDostêpna iloœæ w magazynie frakcji: %d\nWymagane czêœci:\n- mechanizm iglicy [%d/1]\n- bezpiecznik typu listkowego [%d/1]\n- przyrz¹dy celownicze [%d/1]",
				ItemName( 1, 49 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart2],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS2Part1],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS2Part2],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS2Part3] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );
				return 1;
			}
			else if (listitem == 2) // Magazynek
			{
				format( string, sizeof(string), "Nazwa: %s\nDostêpna iloœæ w magazynie frakcji: %d\nWymagane czêœci:\n- szkielet [%d/1]\n- stopka [%d/1]\n- wew. sprê¿yna [%d/1]\n- dosy³acz [%d/1]",
				ItemName( 1, 50 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart3],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS3Part1],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS3Part2],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS3Part3],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS3Part4] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );
				return 1;
			}
			else if (listitem == 3) // sprê¿yna powrotna
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 51 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart4],
				ItemPrice( 1, 51 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 4) // komplet œrubek
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 52 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart5],
				ItemPrice( 1, 52 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 5) // t³umik
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 59 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolPart6],
				ItemPrice( 1, 59 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 6) // szkielet broni karabinowej
			{
				format( string, sizeof(string), "Nazwa: %s\nDostêpna iloœæ w magazynie frakcji: %d\nWymagane czêœci:\n- lufa karabinu [%d/1]\n- mechanizm spustowo-uderzeniowy karabinu [%d/1]\n- nak³adki z tworzywa sztucznego [%d/1]",
				ItemName( 1, 53 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart1],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS1Part1],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS1Part2],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS1Part3] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );
				return 1;
			}
			else if (listitem == 7) // zespó³ zamka karabinu
			{
				format( string, sizeof(string), "Nazwa: %s\nDostêpna iloœæ w magazynie frakcji: %d\nWymagane czêœci:\n- mechanizm iglicy karabinu [%d/1]\n- bezpiecznik typu listkowego karabinu [%d/1]\n- przyrz¹dy celownicze karabinu [%d/1]",
				ItemName( 1, 54 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart2],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS2Part1],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS2Part2],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS2Part3] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );
				return 1;
			}
			else if (listitem == 8) // magazynek karabinu
			{
				format( string, sizeof(string), "Nazwa: %s\nDostêpna iloœæ w magazynie frakcji: %d\nWymagane czêœci:\n- szkielet karabinu [%d/1]\n- stopka karabinu [%d/1]\n- wew. sprê¿yna karabinu [%d/1]\n- dosy³acz karabinu [%d/1]",
				ItemName( 1, 55 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart3],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS3Part1],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS3Part2],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS3Part3],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS3Part4] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );
				return 1;
			}
			else if (listitem == 9) // sprê¿yna powrotna karabinu
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 56 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart4],
				ItemPrice( 1, 56 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 10) // kolba
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 57 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart5],
				ItemPrice( 1, 57 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 11) // komplet œrubek karabinu
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 58 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6],
				ItemPrice( 1, 58 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 12) // luneta
			{
				format( string, sizeof(string), "Nazwa: %s\nDostêpna iloœæ w magazynie frakcji: %d\nWymagane czêœci:\n- szkielet lunety [%d/1]\n- soczewki [%d/1]",
				ItemName( 1, 58 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart6],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS6Part1],
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS6Part2] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Zmontuj", "Wróæ" );
				return 1;
			}
			else if (listitem == 13) // pocisk 9mm
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 43 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1a],
				ItemPrice( 1, 43 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 14) // ³uska 9mm
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 44 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2a],
				ItemPrice( 1, 44 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 15) // proch 1gr
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 45 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3a],
				ItemPrice( 1, 45 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 16) // sp³onka 9mm
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 46 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4a],
				ItemPrice( 1, 46 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 17) // o³ów
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 47 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1b],
				ItemPrice( 1, 47 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 18) // ³uska do strzelby
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 90 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2b],
				ItemPrice( 1, 90 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 19) // proch 5gr
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 91 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3b],
				ItemPrice( 1, 91 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 20) // sp³onka do strzelby
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 92 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4b],
				ItemPrice( 1, 92 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 21) // pocisk karabinu
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 93 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1c],
				ItemPrice( 1, 93 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 22) // ³uska karabinu
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 94 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2c],
				ItemPrice( 1, 94 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 23) // proch 3gr
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 95 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3c],
				ItemPrice( 1, 95 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 24) // sp³onka karabinu
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 96 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4c],
				ItemPrice( 1, 96 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 25) // pocisk snajp
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 97 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1d],
				ItemPrice( 1, 97 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 26) // ³uska snajp
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 98 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2d],
				ItemPrice( 1, 98 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 27) // proch 10gr
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 99 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3d],
				ItemPrice( 1, 99 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 28) // sp³onka snajp
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 100 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4d],
				ItemPrice( 1, 100 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 29) // pocisk des ea
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 101 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart1e],
				ItemPrice( 1, 101 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 30) // ³uska des ea
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 102 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart2e],
				ItemPrice( 1, 102 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 31) // proch 2gr
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 103 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart3e],
				ItemPrice( 1, 103 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 32) // sp³onka des ea
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 104 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAmmoPart4e],
				ItemPrice( 1, 104 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 33) // zestaw montazowy tec9
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 82 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryTec9Part],
				ItemPrice( 1, 82 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 34) // zestaw montazowy MP5
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 83 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryMP5Part],
				ItemPrice( 1, 83 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 35) // zestaw montazowy AK47
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 84 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryAK47Part],
				ItemPrice( 1, 84 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 36) // zestaw montazowy M4
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 85 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryM4Part],
				ItemPrice( 1, 85 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 37) // zestaw montazowy shot
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 86 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryShotPart],
				ItemPrice( 1, 86 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 38) // zestaw montazowy rifle
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 88 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRiflePart],
				ItemPrice( 1, 88 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 39) // zestaw montazowy sniper
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 89 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactorySniperPart],
				ItemPrice( 1, 89 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			else if (listitem == 40) // zestaw montazowy des eagl
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 87 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryDesEaglePart],
				ItemPrice( 1, 87 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_MMAKE, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				return 1;
			}
			return 1;
		}
		case DIALOG_WMENU_3_PARTS_SBUY:
		{
			if (response)
			{
				gListItem[playerid] = listitem;
				if (listitem == 0) // lufa
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 61 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS1Part1],
					ItemPrice( 1, 61 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				}
				else if (listitem == 1) // mechanizm spustowo-uderzeniowy
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 62 ),
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS1Part2],
					ItemPrice( 1, 62 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				}
				else if (listitem == 2) // nak³adki z tworzywa sztucznego
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 63 ),
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS1Part3],
					ItemPrice( 1, 63 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				}
				else if (listitem == 3) // mechanizm iglicy
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 64 ),
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS2Part1],
					ItemPrice( 1, 64 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				}
				else if (listitem == 4) // bezpiecznik typu listkowego
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 65 ),
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS2Part2],
					ItemPrice( 1, 65 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				}
				else if (listitem == 5) // przyrz¹dy celownicze
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 66 ),
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS2Part3],
					ItemPrice( 1, 66 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				}
				else if (listitem == 6) // szkielet
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 67 ),
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS3Part1],
					ItemPrice( 1, 67 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				}
				else if (listitem == 7) // stopka
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 68 ),
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS3Part2],
					ItemPrice( 1, 68 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				}
				else if (listitem == 8) // wew. sprê¿yna
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 69 ),
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS3Part3],
					ItemPrice( 1, 69 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				}
				else if (listitem == 9) // dosy³acz
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 70 ),
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS3Part4],
					ItemPrice( 1, 70 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				}
				else if (listitem == 10) // lufa karabinu
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 71 ),
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS1Part1],
					ItemPrice( 1, 71 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				}
				else if (listitem == 11) // mechanizm spustowo-uderzeniowy karabinu
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 72 ),
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS1Part2],
					ItemPrice( 1, 72 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				}
				else if (listitem == 12) // mechanizm iglicy karabinu
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 73 ),
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS2Part1],
					ItemPrice( 1, 73 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				}
				else if (listitem == 13) // bezpiecznik typu listkowego karabinu
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 74 ),
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS2Part2],
					ItemPrice( 1, 74 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				}
				else if (listitem == 14) // przyrz¹dy celownicze karabinu
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 75 ),
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS2Part3],
					ItemPrice( 1, 75 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				}
				else if (listitem == 15) // szkielet karabinu
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 76 ),
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS3Part1],
					ItemPrice( 1, 76 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				}
				else if (listitem == 16) // stopka
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 77 ),
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS3Part2],
					ItemPrice( 1, 77 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				}
				else if (listitem == 17) // wew. sprê¿yna karabinu
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 78 ),
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS3Part3],
					ItemPrice( 1, 78 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				}
				else if (listitem == 18) // dosy³acz
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 79 ),
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS3Part4],
					ItemPrice( 1, 79 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				}
				else if (listitem == 19) // szkielet
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 80 ),
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS6Part1],
					ItemPrice( 1, 80 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				}
				else if (listitem == 20) // soczewki
				{
					format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
					ItemName( 1, 81 ),
					DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS6Part2],
					ItemPrice( 1, 81 ),
					DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

					ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
				}
				return 1;
			}
			else
			{
				format( string, sizeof(string),
				"1. Czêœci g³ówne\n2. Podczêœci");

				ShowPlayerDialog( playerid, DIALOG_WMENU_2_PARTS, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, string, "Wybierz", "Wróæ" );

				return 1;
			}
		}
		case DIALOG_WMENU_4_PARTS_SBUY:
		{
			if (response)
			{
				new bought = 0;
				switch(gListItem[playerid])
				{
					case 0:
					{
						if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] > ItemPrice( 1, 61 ) )
						{
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS1Part1]++;
							DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 61 );
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolS1Part1" );
							SaveFData( gPlayerData[playerid][pFaction], "Bank" );
							bought = 1;
						}
					}
					case 1:
					{
						if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] > ItemPrice( 1, 62 ) )
						{
							DynamicFactions[ gPlayerData[playerid][pFaction]] [WFactoryPistolS1Part2]++;
							DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 62 );
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolS1Part2" );
							SaveFData( gPlayerData[playerid][pFaction], "Bank" );
							bought = 1;
						}
					}
					case 2:
					{
						if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] > ItemPrice( 1, 63 ) )
						{
							DynamicFactions[ gPlayerData[playerid][pFaction]] [WFactoryPistolS1Part3]++;
							DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 62 );
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolS1Part3" );
							SaveFData( gPlayerData[playerid][pFaction], "Bank" );
							bought = 1;
						}
					}
					case 3:
					{
						if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] > ItemPrice( 1, 64 ) )
						{
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS2Part1]++;
							DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 64 );
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolS2Part1" );
							SaveFData( gPlayerData[playerid][pFaction], "Bank" );
							bought = 1;
						}
					}
					case 4:
					{
						if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] > ItemPrice( 1, 65 ) )
						{
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS2Part2]++;
							DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 65 );
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolS2Part2" );
							SaveFData( gPlayerData[playerid][pFaction], "Bank" );
							bought = 1;
						}
					}
					case 5:
					{
						if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] > ItemPrice( 1, 66 ) )
						{
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS2Part3]++;
							DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 66 );
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolS2Part3" );
							SaveFData( gPlayerData[playerid][pFaction], "Bank" );
							bought = 1;
						}
					}
					case 6:
					{
						if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] > ItemPrice( 1, 67 ) )
						{
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS3Part1]++;
							DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 67 );
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolS3Part1" );
							SaveFData( gPlayerData[playerid][pFaction], "Bank" );
							bought = 1;
						}
					}
					case 7:
					{
						if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] > ItemPrice( 1, 68 ) )
						{
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS3Part2]++;
							DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 68 );
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolS3Part2" );
							SaveFData( gPlayerData[playerid][pFaction], "Bank" );
							bought = 1;
						}
					}
					case 8:
					{
						if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] > ItemPrice( 1, 69 ) )
						{
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS3Part3]++;
							DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 69 );
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolS3Part3" );
							SaveFData( gPlayerData[playerid][pFaction], "Bank" );
							bought = 1;
						}
					}
					case 9:
					{
						if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] > ItemPrice( 1, 70 ) )
						{
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryPistolS3Part4]++;
							DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 70 );
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryPistolS3Part4" );
							SaveFData( gPlayerData[playerid][pFaction], "Bank" );
							bought = 1;
						}
					}
					case 10:
					{
						if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] > ItemPrice( 1, 71 ) )
						{
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS1Part1]++;
							DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 71 );
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRifleS1Part1" );
							SaveFData( gPlayerData[playerid][pFaction], "Bank" );
							bought = 1;
						}
					}
					case 11:
					{
						if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] > ItemPrice( 1, 72 ) )
						{
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS1Part2]++;
							DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 72 );
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRifleS1Part2" );
							SaveFData( gPlayerData[playerid][pFaction], "Bank" );
							bought = 1;
						}
					}
					case 12:
					{
						if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] > ItemPrice( 1, 73 ) )
						{
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS2Part1]++;
							DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 73 );
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRifleS2Part1" );
							SaveFData( gPlayerData[playerid][pFaction], "Bank" );
							bought = 1;
						}
					}
					case 13:
					{
						if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] > ItemPrice( 1, 74 ) )
						{
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS2Part2]++;
							DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 74 );
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRifleS2Part2" );
							SaveFData( gPlayerData[playerid][pFaction], "Bank" );
							bought = 1;
						}
					}
					case 14:
					{
						if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] > ItemPrice( 1, 75 ) )
						{
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS2Part3]++;
							DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 75 );
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRifleS2Part3" );
							SaveFData( gPlayerData[playerid][pFaction], "Bank" );
							bought = 1;
						}
					}
					case 15:
					{
						if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] > ItemPrice( 1, 76 ) )
						{
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS3Part1]++;
							DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 76 );
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRifleS3Part1" );
							SaveFData( gPlayerData[playerid][pFaction], "Bank" );
							bought = 1;
						}
					}
					case 16:
					{
						if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] > ItemPrice( 1, 77 ) )
						{
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS3Part2]++;
							DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 77 );
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRifleS3Part2" );
							SaveFData( gPlayerData[playerid][pFaction], "Bank" );
							bought = 1;
						}
					}
					case 17:
					{
						if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] > ItemPrice( 1, 78 ) )
						{
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS3Part3]++;
							DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 78 );
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRifleS3Part3" );
							SaveFData( gPlayerData[playerid][pFaction], "Bank" );
							bought = 1;
						}
					}
					case 18:
					{
						if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] > ItemPrice( 1, 79 ) )
						{
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS3Part4]++;
							DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 79 );
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRifleS3Part4" );
							SaveFData( gPlayerData[playerid][pFaction], "Bank" );
							bought = 1;
						}
					}
					case 19:
					{
						if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] > ItemPrice( 1, 80 ) )
						{
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS6Part1]++;
							DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 80 );
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRifleS6Part1" );
							SaveFData( gPlayerData[playerid][pFaction], "Bank" );
							bought = 1;
						}
					}
					case 20:
					{
						if( DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] > ItemPrice( 1, 81 ) )
						{
							DynamicFactions[ gPlayerData[playerid][pFaction] ][WFactoryRifleS6Part2]++;
							DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] -= ItemPrice( 1, 81 );
							SaveFData( gPlayerData[playerid][pFaction], "WFactoryRifleS6Part2" );
							SaveFData( gPlayerData[playerid][pFaction], "Bank" );
							bought = 1;
						}
					}
				}
				if (bought == 1)
				{
					ShowPlayerDialog(playerid, DIALOG_WMENU_5_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, "Kupi³eœ czêœæ !", "Wróæ", "");
					return 1;
				}
				else
				{
					ShowPlayerDialog(playerid, DIALOG_WMENU_5_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, "Brakuje pieniêdzy w kasie frakcji !", "Wróæ", "");
					return 1;
				}
			}
			else
			{
				format( string, sizeof(string),
				"1. Lufa [%d]\n2. Mechanizm spustowo-uderzeniowy [%d]\n3. Nak³adki z tworzywa sztucznego [%d]\n4. Mechanizm iglicy [%d]\n5. Bezpiecznik typu listkowego [%d]\n6. Przyrz¹dy celownicze [%d]\n7. Szkielet [%d]\n8. Stopka [%d]\n9. Wew. sprê¿yna [%d]\n10. Dosy³acz [%d]\n11. Lufa karabinu [%d]\n12. Mechanizm spustowo-uderzeniowy karabinu [%d]\n13. Mechanizm iglicy karabinu [%d]",
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS1Part1],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS1Part2],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS1Part3],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS2Part1],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS2Part2],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS2Part3],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS3Part1],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS3Part2],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS3Part3],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS3Part4],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS1Part1],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS1Part2],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS2Part1] );

				format( string2, sizeof(string2),
				"14. Bezpiecznik typu listkowego karabinu [%d]\n15. Przyrz¹dy celownicze karabinu [%d]\n16. Szkielet karabinu [%d]\n17. Stopka karabinu [%d]\n18. Wew. sprê¿yna karabinu [%d]\n19. Dosy³acz karabinu [%d]\n20. Szkielet lunety [%d]\n21. Soczewki [%d]",
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS2Part2],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS2Part3],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS3Part1],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS3Part2],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS3Part3],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS3Part4],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS6Part1],
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS6Part2] );

				format( string, sizeof(string), "%s\n%s", string, string2 );

				gListItem[playerid] = listitem;

				ShowPlayerDialog( playerid, DIALOG_WMENU_3_PARTS_SBUY, DIALOG_STYLE_LIST, DIALOG_WMENU_TITLE_TXT, string, "Wybierz", "Wróæ" );

				return 1;
			}
		}
		case DIALOG_WMENU_5_PARTS_SBUY:
		{
			listitem = gListItem[playerid];
			if (listitem == 0)
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 61 ),
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS1Part1],
				ItemPrice( 1, 61 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
			}
			else if(listitem == 1)
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 62 ),
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS1Part2],
				ItemPrice( 1, 62 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
			}
			else if (listitem == 2)
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 63 ),
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS1Part3],
				ItemPrice( 1, 63 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
			}
			else if (listitem == 3)
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 64 ),
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS2Part1],
				ItemPrice( 1, 64 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
			}
			else if (listitem == 4)
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 65 ),
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS2Part2],
				ItemPrice( 1, 65 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
			}
			else if (listitem == 5)
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 66 ),
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS2Part3],
				ItemPrice( 1, 66 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
			}
			else if (listitem == 6)
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 67 ),
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS3Part1],
				ItemPrice( 1, 67 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
			}
			else if (listitem == 7)
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 68 ),
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS3Part2],
				ItemPrice( 1, 68 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
			}
			else if (listitem == 8)
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 69 ),
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS3Part3],
				ItemPrice( 1, 69 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
			}
			else if (listitem == 9)
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 70 ),
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryPistolS3Part4],
				ItemPrice( 1, 70 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
			}
			else if (listitem == 10)
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 71 ),
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS1Part1],
				ItemPrice( 1, 71 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
			}
			else if (listitem == 11)
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 72 ),
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS1Part2],
				ItemPrice( 1, 72 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
			}
			else if (listitem == 12)
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 73 ),
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS2Part1],
				ItemPrice( 1, 73 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
			}
			else if (listitem == 13)
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 74 ),
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS2Part2],
				ItemPrice( 1, 74 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
			}
			else if (listitem == 14)
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 75 ),
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS2Part3],
				ItemPrice( 1, 75 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
			}
			else if (listitem == 15)
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 76 ),
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS3Part1],
				ItemPrice( 1, 76 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
			}
			else if (listitem == 16)
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 77 ),
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS3Part2],
				ItemPrice( 1, 77 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
			}
			else if (listitem == 17)
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 78 ),
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS3Part3],
				ItemPrice( 1, 78 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
			}
			else if (listitem == 18)
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 79 ),
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS3Part4],
				ItemPrice( 1, 79 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
			}
			else if (listitem == 19)
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 80 ),
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS6Part1],
				ItemPrice( 1, 80 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
			}
			else if (listitem == 20)
			{
				format( string, sizeof(string), DIALOG_WMENU_BUY_CHECKOUT_TXT,
				ItemName( 1, 81 ),
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryRifleS6Part2],
				ItemPrice( 1, 81 ),
				DynamicFactions[ gPlayerData[playerid][pFaction] ][fBank] );

				ShowPlayerDialog( playerid, DIALOG_WMENU_4_PARTS_SBUY, DIALOG_STYLE_MSGBOX, DIALOG_WMENU_TITLE_TXT, string, "Kup", "Wróæ" );
			}
			return 1;
		}
		case DIALOG_BUYW_1:
		{
			if( response )
			{
				switch( listitem )
				{
					case 0: // broñ
					{
						format( string, sizeof( string ), DIALOG_BUYW_TXT,
						Businesses[ gBuyBusinessID[playerid] ][W9MM], ItemPrice( 1, 16 ),
						Businesses[ gBuyBusinessID[playerid] ][W9MMSil], ItemPrice( 1, 17 ),
						Businesses[ gBuyBusinessID[playerid] ][WDesEagle], ItemPrice( 1, 18 ),
						Businesses[ gBuyBusinessID[playerid] ][WMicroSMG], ItemPrice( 1, 22 ),
						Businesses[ gBuyBusinessID[playerid] ][WMP5], ItemPrice( 1, 23 ),
						Businesses[ gBuyBusinessID[playerid] ][WTec9], ItemPrice( 1, 26 ),
						Businesses[ gBuyBusinessID[playerid] ][WShotgun], ItemPrice( 1, 19 ),
						Businesses[ gBuyBusinessID[playerid] ][WAK47], ItemPrice( 1, 24 ),
						Businesses[ gBuyBusinessID[playerid] ][WM4], ItemPrice( 1, 25 ),
						Businesses[ gBuyBusinessID[playerid] ][WRifle], ItemPrice( 1, 27 ),
						Businesses[ gBuyBusinessID[playerid] ][WSRifle], ItemPrice( 1, 28 ) );
						ShowPlayerDialog( playerid, DIALOG_BUYW_2W, DIALOG_STYLE_LIST, "Sklep z broni¹", string, "Kup", "Wróæ" );
						return 1;
					}
					case 1: // ammo
					{
						format( string, sizeof( string ), DIALOG_BUYA_TXT,
						Businesses[ gBuyBusinessID[playerid] ][W9MMAmmo], ItemPrice( 1, 36 ),
						Businesses[ gBuyBusinessID[playerid] ][W50AEAmmo], ItemPrice( 1, 37 ),
						Businesses[ gBuyBusinessID[playerid] ][WBuckshot], ItemPrice( 1, 38 ),
						Businesses[ gBuyBusinessID[playerid] ][W762MMAmmo], ItemPrice( 1, 39 ),
						Businesses[ gBuyBusinessID[playerid] ][W127MMAmmo], ItemPrice( 1, 40 ) );
						ShowPlayerDialog( playerid, DIALOG_BUYW_2A, DIALOG_STYLE_LIST, "Sklep z broni¹", string, "Kup", "Wróæ" );
						return 1;
					}
				}
				return 1;
			}
		}
		case DIALOG_BUYW_2A:
		{
			if( response )
			{
				GOTO_BUYW_2A:
				gListItem[playerid] = listitem;
				if( gListOverItem[playerid] != -1 )
				{
					gListItem[playerid] = gListOverItem[playerid];
					gListOverItem[playerid] = -1;
				}
				switch( gListItem[playerid] )
				{
					case 0: // 9mm ammo
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_A_TXT,
						ItemName( 1, 36 ),
						Businesses[ gBuyBusinessID[playerid] ][W9MMAmmo],
						ItemPrice( 1, 36 ) );

						ShowPlayerDialog( playerid, DIALOG_BUYW_3A, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", string, "Kup", "Wróæ" );
					}
					case 1: // .50ae ammo
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_A_TXT,
						ItemName( 1, 37 ),
						Businesses[ gBuyBusinessID[playerid] ][W50AEAmmo],
						ItemPrice( 1, 37 ) );

						ShowPlayerDialog( playerid, DIALOG_BUYW_3A, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", string, "Kup", "Wróæ" );
					}
					case 2: // buckshot
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_A_TXT,
						ItemName( 1, 38 ),
						Businesses[ gBuyBusinessID[playerid] ][WBuckshot],
						ItemPrice( 1, 38 ) );

						ShowPlayerDialog( playerid, DIALOG_BUYW_3A, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", string, "Kup", "Wróæ" );
					}
					case 3: // 762mm ammo
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_A_TXT,
						ItemName( 1, 39 ),
						Businesses[ gBuyBusinessID[playerid] ][W762MMAmmo],
						ItemPrice( 1, 39 ) );

						ShowPlayerDialog( playerid, DIALOG_BUYW_3A, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", string, "Kup", "Wróæ" );
					}
					case 4: // 127mm ammo
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_A_TXT,
						ItemName( 1, 40 ),
						Businesses[ gBuyBusinessID[playerid] ][W127MMAmmo],
						ItemPrice( 1, 40 ) );

						ShowPlayerDialog( playerid, DIALOG_BUYW_3A, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", string, "Kup", "Wróæ" );
					}
				}
				return 1;
			}
			else
			{
				format( string, sizeof(string), "1.Broñ\n2.Amunicja" );
				ShowPlayerDialog( playerid, DIALOG_BUYW_1, DIALOG_STYLE_LIST, "Sklep z broni¹",
				string,
				"Wybierz","WyjdŸ");
				return 1;
			}
		}
		case DIALOG_BUYW_3A:
		{
			if( response )
			{
				gListOverItem[playerid] = gListItem[playerid];
				switch( gListItem[playerid] )
				{
					case 0: // 9mm ammo
					{
						if( Businesses[ gBuyBusinessID[playerid] ][W9MMAmmo] <= 0 )
						{
							ShowPlayerDialog( playerid, DIALOG_BUYW_4A, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Brak broni w sklepie !", "Wróæ", "" );
							return 1;
						}
						else
						{
							if( gPlayerData[playerid][pCash] < ItemPrice( 1, 36 ) )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Nie masz wystarczaj¹cej iloœci pieniêdzy !", "Wróæ", "" );
								return 1;
							}
							if( InsertPlayerItemEx( playerid, 1, 36, 0, 0, 0, 0, "Puste", 10, true ) == -1 )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Jesteœ przeci¹¿ony !", "Wróæ", "" );
								return 1;
							}
							Businesses[ gBuyBusinessID[playerid] ][W9MMAmmo] -= 10;
							SaveBizData( gBuyBusinessID[playerid], "W9MMAmmo" );
							GivePlayerCash( playerid, -ItemPrice( 1, 36 ) );
							Businesses[ gBuyBusinessID[playerid] ][Till] += ItemPrice( 1, 36 );
							SaveBizData( gBuyBusinessID[playerid], "Till" );
							
							Businesses[gBuyBusinessID[playerid]][mW9MMAmmoIncomeTotal] += ItemPrice(1,36);
							Businesses[gBuyBusinessID[playerid]][mW9MMAmmoIncomeToday] += ItemPrice(1,36);
							Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += ItemPrice(1,36);
							SaveBizData(gBuyBusinessID[playerid], "W9MMAmmoIncomeTotal");
							SaveBizData(gBuyBusinessID[playerid], "W9MMAmmoIncomeToday");
							SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
							
							goto GOTO_BUYW_2A;
						}
					}
					case 1: // .50 ae ammo
					{
						if( Businesses[ gBuyBusinessID[playerid] ][W50AEAmmo] <= 0 )
						{
							ShowPlayerDialog( playerid, DIALOG_BUYW_4A, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Brak broni w sklepie !", "Wróæ", "" );
							return 1;
						}
						else
						{
							if( gPlayerData[playerid][pCash] < ItemPrice( 1, 37 ) )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Nie masz wystarczaj¹cej iloœci pieniêdzy !", "Wróæ", "" );
								return 1;
							}
							if( InsertPlayerItemEx( playerid, 1, 37, 0, 0, 0, 0, "Puste", 5, true ) == -1 )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Jesteœ przeci¹¿ony !", "Wróæ", "" );
								return 1;
							}
							Businesses[ gBuyBusinessID[playerid] ][W50AEAmmo] -= 5;
							SaveBizData( gBuyBusinessID[playerid], "W50AEAmmo" );
							GivePlayerCash( playerid, -ItemPrice( 1, 37 ) );
							Businesses[ gBuyBusinessID[playerid] ][Till] += ItemPrice( 1, 37 );
							SaveBizData( gBuyBusinessID[playerid], "Till" );
							
							Businesses[gBuyBusinessID[playerid]][mW50AEAmmoIncomeTotal] += ItemPrice(1,37);
							Businesses[gBuyBusinessID[playerid]][mW50AEAmmoIncomeToday] += ItemPrice(1,37);
							Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += ItemPrice(1,37);
							SaveBizData(gBuyBusinessID[playerid], "W50AEAmmoIncomeTotal");
							SaveBizData(gBuyBusinessID[playerid], "W50AEAmmoIncomeToday");
							SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
							
							goto GOTO_BUYW_2A;
						}
					}
					case 2: // buckshot
					{
						if( Businesses[ gBuyBusinessID[playerid] ][WBuckshot] <= 0 )
						{
							ShowPlayerDialog( playerid, DIALOG_BUYW_4A, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Brak broni w sklepie !", "Wróæ", "" );
							return 1;
						}
						else
						{
							if( gPlayerData[playerid][pCash] < ItemPrice( 1, 38 ) )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Nie masz wystarczaj¹cej iloœci pieniêdzy !", "Wróæ", "" );
								return 1;
							}
							if( InsertPlayerItemEx( playerid, 1, 38, 0, 0, 0, 0, "Puste", 5, true ) == -1 )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Jesteœ przeci¹¿ony !", "Wróæ", "" );
								return 1;
							}
							Businesses[ gBuyBusinessID[playerid] ][WBuckshot] -= 5;
							SaveBizData( gBuyBusinessID[playerid], "WBuckshot" );
							GivePlayerCash( playerid, -ItemPrice( 1, 38 ) );
							Businesses[ gBuyBusinessID[playerid] ][Till] += ItemPrice( 1, 38 );
							SaveBizData( gBuyBusinessID[playerid], "Till" );
							
							Businesses[gBuyBusinessID[playerid]][mW50AEAmmoIncomeTotal] += ItemPrice(1,38);
							Businesses[gBuyBusinessID[playerid]][mW50AEAmmoIncomeToday] += ItemPrice(1,38);
							Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += ItemPrice(1,38);
							SaveBizData(gBuyBusinessID[playerid], "W50AEAmmoIncomeTotal");
							SaveBizData(gBuyBusinessID[playerid], "W50AEAmmoIncomeToday");
							SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
							
							goto GOTO_BUYW_2A;
						}
					}
					case 3: // 762mm ammo
					{
						if( Businesses[ gBuyBusinessID[playerid] ][W762MMAmmo] <= 0 )
						{
							ShowPlayerDialog( playerid, DIALOG_BUYW_4A, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Brak broni w sklepie !", "Wróæ", "" );
							return 1;
						}
						else
						{
							if( gPlayerData[playerid][pCash] < ItemPrice( 1, 39 ) )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Nie masz wystarczaj¹cej iloœci pieniêdzy !", "Wróæ", "" );
								return 1;
							}
							if( InsertPlayerItemEx( playerid, 1, 39, 0, 0, 0, 0, "Puste", 5, true ) == -1 )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Jesteœ przeci¹¿ony !", "Wróæ", "" );
								return 1;
							}
							Businesses[ gBuyBusinessID[playerid] ][W762MMAmmo] -= 5;
							SaveBizData( gBuyBusinessID[playerid], "W762MMAmmo" );
							GivePlayerCash( playerid, -ItemPrice( 1, 39 ) );
							Businesses[ gBuyBusinessID[playerid] ][Till] += ItemPrice( 1, 39 );
							SaveBizData( gBuyBusinessID[playerid], "Till" );
							
							Businesses[gBuyBusinessID[playerid]][mW762MMAmmoIncomeTotal] += ItemPrice(1,39);
							Businesses[gBuyBusinessID[playerid]][mW762MMAmmoIncomeToday] += ItemPrice(1,39);
							Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += ItemPrice(1,39);
							SaveBizData(gBuyBusinessID[playerid], "W762MMAmmoIncomeTotal");
							SaveBizData(gBuyBusinessID[playerid], "W762MMAmmoIncomeToday");
							SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
							
							goto GOTO_BUYW_2A;
						}
					}
					case 4: // 127mm ammo
					{
						if( Businesses[ gBuyBusinessID[playerid] ][W127MMAmmo] <= 0 )
						{
							ShowPlayerDialog( playerid, DIALOG_BUYW_4A, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Brak broni w sklepie !", "Wróæ", "" );
							return 1;
						}
						else
						{
							if( gPlayerData[playerid][pCash] < ItemPrice( 1, 40 ) )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Nie masz wystarczaj¹cej iloœci pieniêdzy !", "Wróæ", "" );
								return 1;
							}
							if( InsertPlayerItemEx( playerid, 1, 40, 0, 0, 0, 0, "Puste", 5, true ) == -1 )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Jesteœ przeci¹¿ony !", "Wróæ", "" );
								return 1;
							}
							Businesses[ gBuyBusinessID[playerid] ][W127MMAmmo] -= 5;
							SaveBizData( gBuyBusinessID[playerid], "W127MMAmmo" );
							GivePlayerCash( playerid, -ItemPrice( 1, 40 ) );
							Businesses[ gBuyBusinessID[playerid] ][Till] += ItemPrice( 1, 40 );
							SaveBizData( gBuyBusinessID[playerid], "Till" );
							
							Businesses[gBuyBusinessID[playerid]][mW127MMAmmoIncomeTotal] += ItemPrice(1,40);
							Businesses[gBuyBusinessID[playerid]][mW127MMAmmoIncomeToday] += ItemPrice(1,40);
							Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += ItemPrice(1,40);
							SaveBizData(gBuyBusinessID[playerid], "W127MMAmmoIncomeTotal");
							SaveBizData(gBuyBusinessID[playerid], "W127MMAmmoIncomeToday");
							SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
							
							goto GOTO_BUYW_2A;
						}
					}
				}
				return 1;
			}
			else
			{
				format( string, sizeof( string ), DIALOG_BUYA_TXT,
				Businesses[ gBuyBusinessID[playerid] ][W9MMAmmo], ItemPrice( 1, 36 ),
				Businesses[ gBuyBusinessID[playerid] ][W50AEAmmo], ItemPrice( 1, 37 ),
				Businesses[ gBuyBusinessID[playerid] ][WBuckshot], ItemPrice( 1, 38 ),
				Businesses[ gBuyBusinessID[playerid] ][W762MMAmmo], ItemPrice( 1, 39 ),
				Businesses[ gBuyBusinessID[playerid] ][W127MMAmmo], ItemPrice( 1, 40 ) );
				ShowPlayerDialog( playerid, DIALOG_BUYW_2A, DIALOG_STYLE_LIST, "Sklep z broni¹", string, "Kup", "Wróæ" );
				return 1;
			}
		}
		case DIALOG_BUYW_4A:
		{
			format( string, sizeof( string ), DIALOG_BUYA_TXT,
			Businesses[ gBuyBusinessID[playerid] ][W9MMAmmo], ItemPrice( 1, 36 ),
			Businesses[ gBuyBusinessID[playerid] ][W50AEAmmo], ItemPrice( 1, 37 ),
			Businesses[ gBuyBusinessID[playerid] ][WBuckshot], ItemPrice( 1, 38 ),
			Businesses[ gBuyBusinessID[playerid] ][W762MMAmmo], ItemPrice( 1, 39 ),
			Businesses[ gBuyBusinessID[playerid] ][W127MMAmmo], ItemPrice( 1, 40 ) );
			ShowPlayerDialog( playerid, DIALOG_BUYW_2A, DIALOG_STYLE_LIST, "Sklep z broni¹", string, "Kup", "Wróæ" );
			return 1;
		}
		case DIALOG_BUYW_2W:
		{
			if( response )
			{
				GOTO_BUYW_2W:
				gListItem[playerid] = listitem;
				if( gListOverItem[playerid] != -1 )
				{
					gListItem[playerid] = gListOverItem[playerid];
					gListOverItem[playerid] = -1;
				}
				switch( gListItem[playerid] )
				{
					case 0: // 9MM
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_W_TXT,
						ItemName( 1, 16 ),
						Businesses[ gBuyBusinessID[playerid] ][W9MM],
						ItemPrice( 1, 16 ) );

						ShowPlayerDialog( playerid, DIALOG_BUYW_3W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", string, "Kup", "Wróæ" );
					}
					case 1: // 9mm sil
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_W_TXT,
						ItemName( 1, 17 ),
						Businesses[ gBuyBusinessID[playerid] ][W9MMSil],
						ItemPrice( 1, 17 ) );

						ShowPlayerDialog( playerid, DIALOG_BUYW_3W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", string, "Kup", "Wróæ" );
					}
					case 2: // deag
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_W_TXT,
						ItemName( 1, 18 ),
						Businesses[ gBuyBusinessID[playerid] ][WDesEagle],
						ItemPrice( 1, 18 ) );

						ShowPlayerDialog( playerid, DIALOG_BUYW_3W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", string, "Kup", "Wróæ" );
					}
					case 3: // msmg
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_W_TXT,
						ItemName( 1, 22 ),
						Businesses[ gBuyBusinessID[playerid] ][WMicroSMG],
						ItemPrice( 1, 22 ) );

						ShowPlayerDialog( playerid, DIALOG_BUYW_3W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", string, "Kup", "Wróæ" );
					}
					case 4: // mp5
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_W_TXT,
						ItemName( 1, 23 ),
						Businesses[ gBuyBusinessID[playerid] ][WMP5],
						ItemPrice( 1, 23 ) );

						ShowPlayerDialog( playerid, DIALOG_BUYW_3W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", string, "Kup", "Wróæ" );
					}
					case 5: // tec9
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_W_TXT,
						ItemName( 1, 26 ),
						Businesses[ gBuyBusinessID[playerid] ][WTec9],
						ItemPrice( 1, 26 ) );

						ShowPlayerDialog( playerid, DIALOG_BUYW_3W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", string, "Kup", "Wróæ" );
					}
					case 6: // shot
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_W_TXT,
						ItemName( 1, 19 ),
						Businesses[ gBuyBusinessID[playerid] ][WShotgun],
						ItemPrice( 1, 19 ) );

						ShowPlayerDialog( playerid, DIALOG_BUYW_3W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", string, "Kup", "Wróæ" );
					}
					case 7: // ak47
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_W_TXT,
						ItemName( 1, 24 ),
						Businesses[ gBuyBusinessID[playerid] ][WAK47],
						ItemPrice( 1, 24 ) );

						ShowPlayerDialog( playerid, DIALOG_BUYW_3W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", string, "Kup", "Wróæ" );
					}
					case 8: // m4
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_W_TXT,
						ItemName( 1, 25 ),
						Businesses[ gBuyBusinessID[playerid] ][WM4],
						ItemPrice( 1, 25 ) );

						ShowPlayerDialog( playerid, DIALOG_BUYW_3W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", string, "Kup", "Wróæ" );
					}
					case 9: // rifle
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_W_TXT,
						ItemName( 1, 27 ),
						Businesses[ gBuyBusinessID[playerid] ][WRifle],
						ItemPrice( 1, 27 ) );

						ShowPlayerDialog( playerid, DIALOG_BUYW_3W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", string, "Kup", "Wróæ" );
					}
					case 10: // srifle
					{
						format( string, sizeof(string), DIALOG_WMENU_BUY_W_TXT,
						ItemName( 1, 28 ),
						Businesses[ gBuyBusinessID[playerid] ][WSRifle],
						ItemPrice( 1, 28 ) );

						ShowPlayerDialog( playerid, DIALOG_BUYW_3W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", string, "Kup", "Wróæ" );
					}
				}
				return 1;
			}
			else
			{
				format( string, sizeof(string), "1.Broñ\n2.Amunicja" );
				ShowPlayerDialog( playerid, DIALOG_BUYW_1, DIALOG_STYLE_LIST, "Sklep z broni¹",
				string,
				"Wybierz","WyjdŸ");
				return 1;
			}
		}
		case DIALOG_BUYW_3W:
		{
			if( response )
			{
				gListOverItem[playerid] = gListItem[playerid];
				switch( gListItem[playerid] )
				{
					case 0: // 9mm
					{
						if( Businesses[ gBuyBusinessID[playerid] ][W9MM] <= 0 )
						{
							ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Brak broni w sklepie !", "Wróæ", "" );
							return 1;
						}
						else
						{
							if( gPlayerData[playerid][pCash] < ItemPrice( 1, 16 ) )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Nie masz wystarczaj¹cej iloœci pieniêdzy !", "Wróæ", "" );
								return 1;
							}
							if( InsertPlayerItemEx( playerid, 1, 16, 0, 0, 0, 0, "Puste", 1, true ) == -1 )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Jesteœ przeci¹¿ony !", "Wróæ", "" );
								return 1;
							}
							Businesses[ gBuyBusinessID[playerid] ][W9MM]--;
							SaveBizData( gBuyBusinessID[playerid], "W9MM" );
							GivePlayerCash( playerid, -ItemPrice( 1, 16 ) );							
							Businesses[ gBuyBusinessID[playerid] ][Till] += ItemPrice( 1, 16 );
							SaveBizData( gBuyBusinessID[playerid], "Till" );
							
							Businesses[gBuyBusinessID[playerid]][mW9MMIncomeTotal] += ItemPrice(1,16);
							Businesses[gBuyBusinessID[playerid]][mW9MMIncomeToday] += ItemPrice(1,16);
							Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += ItemPrice(1,16);
							SaveBizData(gBuyBusinessID[playerid], "W9MMIncomeTotal");
							SaveBizData(gBuyBusinessID[playerid], "W9MMIncomeToday");
							SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
							
							goto GOTO_BUYW_2W;
						}
					}
					case 1: // 9mm sil
					{
						if( Businesses[ gBuyBusinessID[playerid] ][W9MMSil] <= 0 )
						{
							ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Brak broni w sklepie !", "Wróæ", "" );
							return 1;
						}
						else
						{
							if( gPlayerData[playerid][pCash] < ItemPrice( 1, 17 ) )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Nie masz wystarczaj¹cej iloœci pieniêdzy !", "Wróæ", "" );
								return 1;
							}
							if( InsertPlayerItemEx( playerid, 1, 17, 0, 0, 0, 0, "Puste", 1, true ) == -1 )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Jesteœ przeci¹¿ony !", "Wróæ", "" );
								return 1;
							}
							Businesses[ gBuyBusinessID[playerid] ][W9MMSil]--;
							SaveBizData( gBuyBusinessID[playerid], "W9MMSil" );
							GivePlayerCash( playerid, -ItemPrice( 1, 17 ) );
							Businesses[ gBuyBusinessID[playerid] ][Till] += ItemPrice( 1, 17 );
							SaveBizData( gBuyBusinessID[playerid], "Till" );
							
							Businesses[gBuyBusinessID[playerid]][mW9MMSilIncomeTotal] += ItemPrice(1,17);
							Businesses[gBuyBusinessID[playerid]][mW9MMSilIncomeToday] += ItemPrice(1,17);
							Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += ItemPrice(1,16);
							SaveBizData(gBuyBusinessID[playerid], "W9MMSilIncomeTotal");
							SaveBizData(gBuyBusinessID[playerid], "W9MMSilIncomeToday");
							SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
							
							goto GOTO_BUYW_2W;
						}
					}
					case 2: // des eagle
					{
						if( Businesses[ gBuyBusinessID[playerid] ][WDesEagle] <= 0 )
						{
							ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Brak broni w sklepie !", "Wróæ", "" );
							return 1;
						}
						else
						{
							if( gPlayerData[playerid][pCash] < ItemPrice( 1, 18 ) )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Nie masz wystarczaj¹cej iloœci pieniêdzy !", "Wróæ", "" );
								return 1;
							}
							if( InsertPlayerItemEx( playerid, 1, 18, 0, 0, 0, 0, "Puste", 1, true ) == -1 )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Jesteœ przeci¹¿ony !", "Wróæ", "" );
								return 1;
							}
							Businesses[ gBuyBusinessID[playerid] ][WDesEagle]--;
							SaveBizData( gBuyBusinessID[playerid], "WDesEagle" );
							GivePlayerCash( playerid, -ItemPrice( 1, 18 ) );
							Businesses[ gBuyBusinessID[playerid] ][Till] += ItemPrice( 1, 18 );
							SaveBizData( gBuyBusinessID[playerid], "Till" );
							
							Businesses[gBuyBusinessID[playerid]][mWDesEagleIncomeTotal] += ItemPrice(1,18);
							Businesses[gBuyBusinessID[playerid]][mWDesEagleIncomeToday] += ItemPrice(1,18);
							Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += ItemPrice(1,18);
							SaveBizData(gBuyBusinessID[playerid], "WDesEagleIncomeTotal");
							SaveBizData(gBuyBusinessID[playerid], "WDesEagleIncomeToday");
							SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
							
							goto GOTO_BUYW_2W;
						}
					}
					case 3: // msmg
					{
						if( Businesses[ gBuyBusinessID[playerid] ][WMicroSMG] <= 0 )
						{
							ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Brak broni w sklepie !", "Wróæ", "" );
							return 1;
						}
						else
						{
							if( gPlayerData[playerid][pCash] < ItemPrice( 1, 22 ) )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Nie masz wystarczaj¹cej iloœci pieniêdzy !", "Wróæ", "" );
								return 1;
							}
							if( InsertPlayerItemEx( playerid, 1, 22, 0, 0, 0, 0, "Puste", 1, true ) == -1 )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Jesteœ przeci¹¿ony !", "Wróæ", "" );
								return 1;
							}
							Businesses[ gBuyBusinessID[playerid] ][WMicroSMG]--;
							SaveBizData( gBuyBusinessID[playerid], "WMicroSMG" );
							GivePlayerCash( playerid, -ItemPrice( 1, 22 ) );
							Businesses[ gBuyBusinessID[playerid] ][Till] += ItemPrice( 1, 22 );
							SaveBizData( gBuyBusinessID[playerid], "Till" );
							
							Businesses[gBuyBusinessID[playerid]][mWMicroSMGIncomeTotal] += ItemPrice(1,22);
							Businesses[gBuyBusinessID[playerid]][mWMicroSMGIncomeToday] += ItemPrice(1,22);
							Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += ItemPrice(1,22);
							SaveBizData(gBuyBusinessID[playerid], "WMicroSMGIncomeTotal");
							SaveBizData(gBuyBusinessID[playerid], "WMicroSMGIncomeToday");
							SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
							
							goto GOTO_BUYW_2W;
						}
					}
					case 4: // mp5
					{
						if( Businesses[ gBuyBusinessID[playerid] ][WMP5] <= 0 )
						{
							ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Brak broni w sklepie !", "Wróæ", "" );
							return 1;
						}
						else
						{
							if( gPlayerData[playerid][pCash] < ItemPrice( 1, 23 ) )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Nie masz wystarczaj¹cej iloœci pieniêdzy !", "Wróæ", "" );
								return 1;
							}
							if( InsertPlayerItemEx( playerid, 1, 23, 0, 0, 0, 0, "Puste", 1, true ) == -1 )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Jesteœ przeci¹¿ony !", "Wróæ", "" );
								return 1;
							}
							Businesses[ gBuyBusinessID[playerid] ][WMP5]--;
							SaveBizData( gBuyBusinessID[playerid], "WMP5" );
							GivePlayerCash( playerid, -ItemPrice( 1, 23 ) );
							Businesses[ gBuyBusinessID[playerid] ][Till] += ItemPrice( 1, 23 );
							SaveBizData( gBuyBusinessID[playerid], "Till" );
							
							Businesses[gBuyBusinessID[playerid]][mWMP5IncomeTotal] += ItemPrice(1,23);
							Businesses[gBuyBusinessID[playerid]][mWMP5IncomeToday] += ItemPrice(1,23);
							Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += ItemPrice(1,23);
							SaveBizData(gBuyBusinessID[playerid], "WMP5IncomeTotal");
							SaveBizData(gBuyBusinessID[playerid], "WMP5IncomeToday");
							SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
							
							goto GOTO_BUYW_2W;
						}
					}
					case 5: // tec9
					{
						if( Businesses[ gBuyBusinessID[playerid] ][WTec9] <= 0 )
						{
							ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Brak broni w sklepie !", "Wróæ", "" );
							return 1;
						}
						else
						{
							if( gPlayerData[playerid][pCash] < ItemPrice( 1, 26 ) )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Nie masz wystarczaj¹cej iloœci pieniêdzy !", "Wróæ", "" );
								return 1;
							}
							if( InsertPlayerItemEx( playerid, 1, 26, 0, 0, 0, 0, "Puste", 1, true ) == -1 )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Jesteœ przeci¹¿ony !", "Wróæ", "" );
								return 1;
							}
							Businesses[ gBuyBusinessID[playerid] ][WTec9]--;
							SaveBizData( gBuyBusinessID[playerid], "WTec9" );
							GivePlayerCash( playerid, -ItemPrice( 1, 26 ) );
							Businesses[ gBuyBusinessID[playerid] ][Till] += ItemPrice( 1, 26 );
							SaveBizData( gBuyBusinessID[playerid], "Till" );
							
							Businesses[gBuyBusinessID[playerid]][mWTec9IncomeTotal] += ItemPrice(1,26);
							Businesses[gBuyBusinessID[playerid]][mWTec9IncomeToday] += ItemPrice(1,26);
							Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += ItemPrice(1,26);
							SaveBizData(gBuyBusinessID[playerid], "WTec9IncomeTotal");
							SaveBizData(gBuyBusinessID[playerid], "WTec9IncomeToday");
							SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
							
							goto GOTO_BUYW_2W;
						}
					}
					case 6: // shotgun
					{
						if( Businesses[ gBuyBusinessID[playerid] ][WShotgun] <= 0 )
						{
							ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Brak broni w sklepie !", "Wróæ", "" );
							return 1;
						}
						else
						{
							if( gPlayerData[playerid][pCash] < ItemPrice( 1, 19 ) )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Nie masz wystarczaj¹cej iloœci pieniêdzy !", "Wróæ", "" );
								return 1;
							}
							if( InsertPlayerItemEx( playerid, 1, 19, 0, 0, 0, 0, "Puste", 1, true ) == -1 )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Jesteœ przeci¹¿ony !", "Wróæ", "" );
								return 1;
							}
							Businesses[ gBuyBusinessID[playerid] ][WShotgun]--;
							SaveBizData( gBuyBusinessID[playerid], "WShotgun" );
							GivePlayerCash( playerid, -ItemPrice( 1, 19 ) );
							Businesses[ gBuyBusinessID[playerid] ][Till] += ItemPrice( 1, 19 );
							SaveBizData( gBuyBusinessID[playerid], "Till" );
							
							Businesses[gBuyBusinessID[playerid]][mWShotgunIncomeTotal] += ItemPrice(1,19);
							Businesses[gBuyBusinessID[playerid]][mWShotgunIncomeToday] += ItemPrice(1,19);
							Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += ItemPrice(1,19);
							SaveBizData(gBuyBusinessID[playerid], "WShotgunIncomeTotal");
							SaveBizData(gBuyBusinessID[playerid], "WShotgunIncomeToday");
							SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
							
							goto GOTO_BUYW_2W;
						}
					}
					case 7: // ak47
					{
						if( Businesses[ gBuyBusinessID[playerid] ][WAK47] <= 0 )
						{
							ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Brak broni w sklepie !", "Wróæ", "" );
							return 1;
						}
						else
						{
							if( gPlayerData[playerid][pCash] < ItemPrice( 1, 24 ) )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Nie masz wystarczaj¹cej iloœci pieniêdzy !", "Wróæ", "" );
								return 1;
							}
							if( InsertPlayerItemEx( playerid, 1, 24, 0, 0, 0, 0, "Puste", 1, true ) == -1 )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Jesteœ przeci¹¿ony !", "Wróæ", "" );
								return 1;
							}
							Businesses[ gBuyBusinessID[playerid] ][WAK47]--;
							SaveBizData( gBuyBusinessID[playerid], "WAK47" );
							GivePlayerCash( playerid, -ItemPrice( 1, 24 ) );
							Businesses[ gBuyBusinessID[playerid] ][Till] += ItemPrice( 1, 24 );
							SaveBizData( gBuyBusinessID[playerid], "Till" );
							
							Businesses[gBuyBusinessID[playerid]][mWAK47IncomeTotal] += ItemPrice(1,24);
							Businesses[gBuyBusinessID[playerid]][mWAK47IncomeToday] += ItemPrice(1,24);
							Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += ItemPrice(1,24);
							SaveBizData(gBuyBusinessID[playerid], "WAK47IncomeTotal");
							SaveBizData(gBuyBusinessID[playerid], "WAK47IncomeToday");
							SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
							
							goto GOTO_BUYW_2W;
						}
					}
					case 8: // m4
					{
						if( Businesses[ gBuyBusinessID[playerid] ][WM4] <= 0 )
						{
							ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Brak broni w sklepie !", "Wróæ", "" );
							return 1;
						}
						else
						{
							if( gPlayerData[playerid][pCash] < ItemPrice( 1, 25 ) )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Nie masz wystarczaj¹cej iloœci pieniêdzy !", "Wróæ", "" );
								return 1;
							}
							if( InsertPlayerItemEx( playerid, 1, 25, 0, 0, 0, 0, "Puste", 1, true ) == -1 )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Jesteœ przeci¹¿ony !", "Wróæ", "" );
								return 1;
							}
							Businesses[ gBuyBusinessID[playerid] ][WM4]--;
							SaveBizData( gBuyBusinessID[playerid], "WM4" );
							GivePlayerCash( playerid, -ItemPrice( 1, 25 ) );
							Businesses[ gBuyBusinessID[playerid] ][Till] += ItemPrice( 1, 25 );
							SaveBizData( gBuyBusinessID[playerid], "Till" );
							
							Businesses[gBuyBusinessID[playerid]][mWM4IncomeTotal] += ItemPrice(1,25);
							Businesses[gBuyBusinessID[playerid]][mWM4IncomeToday] += ItemPrice(1,25);
							Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += ItemPrice(1,25);
							SaveBizData(gBuyBusinessID[playerid], "WM4IncomeTotal");
							SaveBizData(gBuyBusinessID[playerid], "WM4IncomeToday");
							SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
							
							goto GOTO_BUYW_2W;
						}
					}
					case 9: // rifle
					{
						if( Businesses[ gBuyBusinessID[playerid] ][WRifle] <= 0 )
						{
							ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Brak broni w sklepie !", "Wróæ", "" );
							return 1;
						}
						else
						{
							if( gPlayerData[playerid][pCash] < ItemPrice( 1, 27 ) )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Nie masz wystarczaj¹cej iloœci pieniêdzy !", "Wróæ", "" );
								return 1;
							}
							if( InsertPlayerItemEx( playerid, 1, 27, 0, 0, 0, 0, "Puste", 1, true ) == -1 )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Jesteœ przeci¹¿ony !", "Wróæ", "" );
								return 1;
							}
							Businesses[ gBuyBusinessID[playerid] ][WRifle]--;
							SaveBizData( gBuyBusinessID[playerid], "WRifle" );
							GivePlayerCash( playerid, -ItemPrice( 1, 27 ) );
							Businesses[ gBuyBusinessID[playerid] ][Till] += ItemPrice( 1, 27 );
							SaveBizData( gBuyBusinessID[playerid], "Till" );
							
							Businesses[gBuyBusinessID[playerid]][mWRifleIncomeTotal] += ItemPrice(1,27);
							Businesses[gBuyBusinessID[playerid]][mWRifleIncomeToday] += ItemPrice(1,27);
							Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += ItemPrice(1,27);
							SaveBizData(gBuyBusinessID[playerid], "WRifleIncomeTotal");
							SaveBizData(gBuyBusinessID[playerid], "WRifleIncomeToday");
							SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
							
							goto GOTO_BUYW_2W;
						}
					}
					case 10: // rifle
					{
						if( Businesses[ gBuyBusinessID[playerid] ][WSRifle] <= 0 )
						{
							ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Brak broni w sklepie !", "Wróæ", "" );
							return 1;
						}
						else
						{
							if( gPlayerData[playerid][pCash] < ItemPrice( 1, 28 ) )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Nie masz wystarczaj¹cej iloœci pieniêdzy !", "Wróæ", "" );
								return 1;
							}
							if( InsertPlayerItemEx( playerid, 1, 28, 0, 0, 0, 0, "Puste", 1, true ) == -1 )
							{
								ShowPlayerDialog( playerid, DIALOG_BUYW_4W, DIALOG_STYLE_MSGBOX, "Sklep z broni¹", "Jesteœ przeci¹¿ony !", "Wróæ", "" );
								return 1;
							}
							Businesses[ gBuyBusinessID[playerid] ][WSRifle]--;
							SaveBizData( gBuyBusinessID[playerid], "WSRifle" );
							GivePlayerCash( playerid, -ItemPrice( 1, 28 ) );
							Businesses[ gBuyBusinessID[playerid] ][Till] += ItemPrice( 1, 28 );
							SaveBizData( gBuyBusinessID[playerid], "Till" );
							
							Businesses[gBuyBusinessID[playerid]][mWSRifleIncomeTotal] += ItemPrice(1,28);
							Businesses[gBuyBusinessID[playerid]][mWSRifleIncomeToday] += ItemPrice(1,28);
							Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += ItemPrice(1,28);
							SaveBizData(gBuyBusinessID[playerid], "WSRifleIncomeTotal");
							SaveBizData(gBuyBusinessID[playerid], "WSRifleIncomeToday");
							SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
							
							goto GOTO_BUYW_2W;
						}
					}
				}
				return 1;
			}
			else
			{
				format( string, sizeof( string ), DIALOG_BUYW_TXT,
				Businesses[ gBuyBusinessID[playerid] ][W9MM], ItemPrice( 1, 16 ),
				Businesses[ gBuyBusinessID[playerid] ][W9MMSil], ItemPrice( 1, 17 ),
				Businesses[ gBuyBusinessID[playerid] ][WDesEagle], ItemPrice( 1, 18 ),
				Businesses[ gBuyBusinessID[playerid] ][WMicroSMG], ItemPrice( 1, 22 ),
				Businesses[ gBuyBusinessID[playerid] ][WMP5], ItemPrice( 1, 23 ),
				Businesses[ gBuyBusinessID[playerid] ][WTec9], ItemPrice( 1, 26 ),
				Businesses[ gBuyBusinessID[playerid] ][WShotgun], ItemPrice( 1, 19 ),
				Businesses[ gBuyBusinessID[playerid] ][WAK47], ItemPrice( 1, 24 ),
				Businesses[ gBuyBusinessID[playerid] ][WM4], ItemPrice( 1, 25 ),
				Businesses[ gBuyBusinessID[playerid] ][WRifle], ItemPrice( 1, 27 ),
				Businesses[ gBuyBusinessID[playerid] ][WSRifle], ItemPrice( 1, 28 ) );
				ShowPlayerDialog( playerid, DIALOG_BUYW_2W, DIALOG_STYLE_LIST, "Sklep z broni¹", string, "Kup", "Wróæ" );
				return 1;
			}
		}
		case DIALOG_BUYW_4W:
		{
			format( string, sizeof( string ), DIALOG_BUYW_TXT,
			Businesses[ gBuyBusinessID[playerid] ][W9MM], ItemPrice( 1, 16 ),
			Businesses[ gBuyBusinessID[playerid] ][W9MMSil], ItemPrice( 1, 17 ),
			Businesses[ gBuyBusinessID[playerid] ][WDesEagle], ItemPrice( 1, 18 ),
			Businesses[ gBuyBusinessID[playerid] ][WMicroSMG], ItemPrice( 1, 22 ),
			Businesses[ gBuyBusinessID[playerid] ][WMP5], ItemPrice( 1, 23 ),
			Businesses[ gBuyBusinessID[playerid] ][WTec9], ItemPrice( 1, 26 ),
			Businesses[ gBuyBusinessID[playerid] ][WShotgun], ItemPrice( 1, 19 ),
			Businesses[ gBuyBusinessID[playerid] ][WAK47], ItemPrice( 1, 24 ),
			Businesses[ gBuyBusinessID[playerid] ][WM4], ItemPrice( 1, 25 ),
			Businesses[ gBuyBusinessID[playerid] ][WRifle], ItemPrice( 1, 27 ),
			Businesses[ gBuyBusinessID[playerid] ][WSRifle], ItemPrice( 1, 28 ) );
			ShowPlayerDialog( playerid, DIALOG_BUYW_2W, DIALOG_STYLE_LIST, "Sklep z brioni¹", string, "Kup", "Wróæ" );
			return 1;
		}
		case DIALOG_CBUY_1:
		{
			if( response )
			{
				switch( listitem )
				{
					case 0:
					{
						gListItem[playerid] = 0;
						ShowPlayerDialog(playerid, DIALOG_CBUY_2, DIALOG_STYLE_INPUT, "Sklep z ubraniami", "Wpisz ID skina (1-299)", "Wybierz", "Wróæ" );
						return 1;
					}
					case 1:
					{
						gListItem[playerid] = 1;
						ShowPlayerDialog(playerid, DIALOG_CBUY_2, DIALOG_STYLE_INPUT, "Sklep z ubraniami", "Wpisz ID okularów (1-30)", "Wybierz", "Wróæ" );
						return 1;
					}
					case 2:
					{
						gListItem[playerid] = 2;
						ShowPlayerDialog(playerid, DIALOG_CBUY_2, DIALOG_STYLE_INPUT, "Sklep z ubraniami", "Wpisz ID czapki (1-16)", "Wybierz", "Wróc" );
						return 1;
					}
				}
				return 1;
			}
		}
		case DIALOG_CBUY_2:
		{
			if( response )
			{
				switch( gListItem[playerid])
				{
					case 0:
					{
						if(Businesses[gBuyBusinessID[playerid]][Products] == 0)
						{
							SendClientMessage( playerid, COLOR_ORANGE, "[INFO:] Brak produktów !");
							return 1;
						}
						if( GetPlayerCash(playerid) < 80 )
						{
							SendClientMessage( playerid, COLOR_ORANGE, "[INFO:] Nie masz wystarczaj¹co du¿o pieniêdzy na ubranie" );
							return 1;
						}
						if( IsACopSkin(strval(inputtext) ) )
						{
							SendClientMessage( playerid, COLOR_ORANGE, "[INFO:] Nie mo¿esz zakupiæ stroju mundurowego");
							return 1;
						}
						if( strval(inputtext) > 0 && strval(inputtext) < 300 )
						{
							SetPlayerSkinEx(playerid,strval(inputtext));
							GivePlayerCash(playerid, -80);
							gPlayerData[playerid][pSkin] = strval(inputtext);
							Businesses[gBuyBusinessID[playerid]][Products]--;
							Businesses[gBuyBusinessID[playerid]][Till]+=80;
							
							Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += 80;
							SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
							
							SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Ubranie kupione, $-80.");
							SaveBizData(gBuyBusinessID[playerid], "Products");
							SaveBizData(gBuyBusinessID[playerid], "Till");
							SavePlayerData(playerid, "Skin");
							SaveStatsData("ubranie", gPlayerData[playerid][pName], 80, gBuyBusinessID[playerid], Businesses[gBuyBusinessID[playerid]][BizType]);
						}
					}
					case 1:
					{
						if(Businesses[gBuyBusinessID[playerid]][Products] == 0)
						{
							SendClientMessage( playerid, COLOR_ORANGE, "[INFO:] Brak produktów !");
							return 1;
						}
						if( GetPlayerCash(playerid) < 25 )
						{
							SendClientMessage( playerid, COLOR_ORANGE, "[INFO:] Nie masz wystarczaj¹co du¿o pieniêdzy na okulary" );
							return 1;
						}
						if( strval(inputtext) > 0 && strval(inputtext) <= 30 )
						{
							if((strval(inputtext) != 1 && strval(inputtext) != 2 && strval(inputtext) != 6 && strval(inputtext) != 8 && strval(inputtext) != 12 && strval(inputtext) != 15 && strval(inputtext) != 19 && strval(inputtext) != 22 && strval(inputtext) != 25 && strval(inputtext) != 27 && strval(inputtext) != 30) && gPlayerData[playerid][pVipAFKT] == 0 && gPlayerData[playerid][pVipExpT] == 0)
							{
								SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Aby kupiæ t¹ pare okularów musisz posiadaæ wykupiony pakiet VIP");
								return 1;
							}
							new slot = InsertPlayerItem(playerid, 3, 7, strval(inputtext)-1, 0);
							if(slot == 0)
							{
								SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Nie masz miejsca na okulary !");
								return 1;
							}
							SendClientMessage(playerid, COLOR_GREEN, "[INFO:] Kupi³eœ okulary !");
							GivePlayerCash(playerid,-30);
							Businesses[gBuyBusinessID[playerid]][Products]--;
							Businesses[gBuyBusinessID[playerid]][Till]+=30;
							
							Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += 30;
							SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
							
							SaveBizData(gBuyBusinessID[playerid], "Products");
							SaveBizData(gBuyBusinessID[playerid], "Till");
							SaveStatsData("czapka", gPlayerData[playerid][pName], 30, gBuyBusinessID[playerid], Businesses[gBuyBusinessID[playerid]][BizType]);
							return 1;
						}
					}
					case 2:
					{
						if(Businesses[gBuyBusinessID[playerid]][Products] == 0)
						{
							SendClientMessage( playerid, COLOR_ORANGE, "[INFO:] Brak produktów !");
							return 1;
						}
						if( GetPlayerCash(playerid) < 25 )
						{
							SendClientMessage( playerid, COLOR_ORANGE, "[INFO:] Nie masz wystarczaj¹co du¿o pieniêdzy na czapke" );
							return 1;
						}
						if( strval(inputtext) > 0 && strval(inputtext) <= 16 )
						{
							if((strval(inputtext) != 1 && strval(inputtext) != 4) && gPlayerData[playerid][pVipAFKT] == 0 && gPlayerData[playerid][pVipExpT] == 0)
							{
								SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Aby kupiæ t¹ czapke musisz posiadaæ wykupiony pakiet VIP");
								return 1;
							}
							new slot;
							if(strval(inputtext) > 6)
								slot = InsertPlayerItem(playerid, 3, 9, strval(inputtext)-1, 1); // we got -1 to get id 0 (offset) for real hat id
							else
								slot = InsertPlayerItem(playerid, 3, 9, strval(inputtext)-7, 0); // -7 is because id of other hats is completly different
							if(slot == 0)
							{
								SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Nie masz miejsca na czapke !");
								return 1;
							}
							SendClientMessage(playerid, COLOR_GREEN, "[INFO:] Kupi³eœ czapke !");
							GivePlayerCash(playerid,-30);
							Businesses[gBuyBusinessID[playerid]][Products]--;
							Businesses[gBuyBusinessID[playerid]][Till]+=30;
							
							Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += 30;
							SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
							
							SaveBizData(gBuyBusinessID[playerid], "Products");
							SaveBizData(gBuyBusinessID[playerid], "Till");
							SaveStatsData("czapka", gPlayerData[playerid][pName], 30, gBuyBusinessID[playerid], Businesses[gBuyBusinessID[playerid]][BizType]);
							return 1;
						}
					}
				}
			}
		}
		case DIALOG_FBUY_1:
		{
			new i = gBuyBusinessID[playerid];
			if(response)
			{
				if(PHaveItemParam1Ex(playerid, 10, -1, Businesses[i][BUID]) || PHaveItemParam1Ex(playerid, 11, -1, Businesses[i][BUID]) || (Businesses[i][BGov] && gPlayerData[playerid][pFaction] == FACTIONID_GOVERNMENT))
				{
					FBuyMenu:
					if(gListOverItem[playerid] == 1)
					{
						gListOverItem[playerid] = -1;
						listitem = gListItem[playerid];
					}
					gListItem[playerid] = listitem;
					ShowPlayerDialog(playerid, DIALOG_FBUY_2, DIALOG_STYLE_LIST, "Restauracja", "1. Zmieñ cene\n2. Zmieñ produkt\n3. Cena kupna\n4. Jedz", "Wybierz", "Wróæ");
				}
				else
				{
					FBuyItem:
					if(gListOverItem[playerid] == 1)
					{
						gListOverItem[playerid] = -1;
						listitem = gListItem[playerid];
					}
					gListItem[playerid] = listitem;
					if(!BizItemSlotStatus(i, listitem+1))
					{
						ShowPlayerDialog(playerid, DIALOG_FBUY_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_7_TXT, "Wróæ", "");
						return 1;
					}
					else if(!BizItemSlotCount(i, listitem+1))
					{
						ShowPlayerDialog(playerid, DIALOG_FBUY_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_8_TXT, "Wróæ", "");
						return 1;
					}
					else if(BizItemSlotCount(i, listitem+1) <= 0)
					{
						ShowPlayerDialog(playerid, DIALOG_FBUY_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_8_TXT, "Wróæ", "");
						return 1;
					}
					else if(BizItemSlotPrice(i, listitem+1) <= 0)
					{
						ShowPlayerDialog(playerid, DIALOG_FBUY_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_6_TXT, "Wróæ", "");
						return 1;
					}
					if(GetPlayerCash(playerid) >= BizItemSlotPrice(i, listitem+1))
					{
						EatItem(playerid, BizSlotType(i, listitem+1), BizSlotItem(i, listitem+1));
						BizRemoveItemFromSlot(i, listitem+1);
						GivePlayerCash(playerid, -BizItemSlotPrice(i, listitem+1));
						Businesses[i][Till] += BizItemSlotPrice(i, listitem+1);
						SaveBizData(i, "Till");
						
						switch(listitem)
						{
							case 0:
							{
								Businesses[i][Product1incomeTotal] += BizItemSlotPrice(i, listitem+1);
								Businesses[i][Product1incomeToday] += BizItemSlotPrice(i, listitem+1);
								SaveBizData(i, "Product1incomeTotal");
								SaveBizData(i, "Product1incomeToday");
							}
							case 1:
							{
								Businesses[i][Product2incomeTotal] += BizItemSlotPrice(i, listitem+1);
								Businesses[i][Product2incomeToday] += BizItemSlotPrice(i, listitem+1);
								SaveBizData(i, "Product2incomeTotal");
								SaveBizData(i, "Product2incomeToday");
							}
							case 2:
							{
								Businesses[i][Product3incomeTotal] += BizItemSlotPrice(i, listitem+1);
								Businesses[i][Product3incomeToday] += BizItemSlotPrice(i, listitem+1);
								SaveBizData(i, "Product3incomeTotal");
								SaveBizData(i, "Product3incomeToday");
							}
							case 3:
							{
								Businesses[i][Product4incomeTotal] += BizItemSlotPrice(i, listitem+1);
								Businesses[i][Product4incomeToday] += BizItemSlotPrice(i, listitem+1);
								SaveBizData(i, "Product4incomeTotal");
								SaveBizData(i, "Product4incomeToday");
							}
							case 4:
							{
								Businesses[i][Product5incomeTotal] += BizItemSlotPrice(i, listitem+1);
								Businesses[i][Product5incomeToday] += BizItemSlotPrice(i, listitem+1);
								SaveBizData(i, "Product5incomeTotal");
								SaveBizData(i, "Product5incomeToday");
							}
							case 5:
							{
								Businesses[i][Product6incomeTotal] += BizItemSlotPrice(i, listitem+1);
								Businesses[i][Product6incomeToday] += BizItemSlotPrice(i, listitem+1);
								SaveBizData(i, "Product6incomeTotal");
								SaveBizData(i, "Product6incomeToday");
							}
							case 6:
							{
								Businesses[i][Product7incomeTotal] += BizItemSlotPrice(i, listitem+1);
								Businesses[i][Product7incomeToday] += BizItemSlotPrice(i, listitem+1);
								SaveBizData(i, "Product7incomeTotal");
								SaveBizData(i, "Product7incomeToday");
							}
							case 7:
							{
								Businesses[i][Product8incomeTotal] += BizItemSlotPrice(i, listitem+1);
								Businesses[i][Product8incomeToday] += BizItemSlotPrice(i, listitem+1);
								SaveBizData(i, "Product8incomeTotal");
								SaveBizData(i, "Product8incomeToday");
							}
							case 8:
							{
								Businesses[i][Product9incomeTotal] += BizItemSlotPrice(i, listitem+1);
								Businesses[i][Product9incomeToday] += BizItemSlotPrice(i, listitem+1);
								SaveBizData(i, "Product9incomeTotal");
								SaveBizData(i, "Product9incomeToday");
							}
							case 9:
							{
								Businesses[i][Product10incomeTotal] += BizItemSlotPrice(i, listitem+1);
								Businesses[i][Product10incomeToday] += BizItemSlotPrice(i, listitem+1);
								SaveBizData(i, "Product10incomeTotal");
								SaveBizData(i, "Product10incomeToday");
							}
						}
						Businesses[i][mIncomeTotal] += BizItemSlotPrice(i, listitem+1);
						SaveBizData(i, "IncomeTotal");
						
						format(string, sizeof(string), "zjada %s", ItemName(BizSlotType(i, listitem+1), BizSlotItem(i, listitem+1)));
						ApplyAnimation(playerid,"FOOD","EAT_Burger",2.0,0,1,1,0,0);
						PlayerActionMessage(playerid, 15, string);
						format(string, sizeof(string), "%s", ItemName(BizSlotType(i, listitem+1), BizSlotItem(i, listitem+1)));
						SaveStatsData(string, gPlayerData[playerid][pName], BizItemSlotPrice(i, listitem+1), i, Businesses[i][BizType]);

						ShowBizFProductList(playerid, i);
					}
				}
			}
		}
		case DIALOG_FBUY_2:
		{
			new i = gBuyBusinessID[playerid];
			if(response)
			{
				if(listitem == 0)
				{
					format(string, sizeof(string), "Stara cena: $%d\n\nWpisz now¹ cene produktu:", BizItemSlotPrice(i, gListItem[playerid]+1));
					ShowPlayerDialog(playerid, DIALOG_FBUY_3, DIALOG_STYLE_INPUT, "Restauracja", string, "Zmieñ", "Wróæ");
					return 1;
				}
				else if(listitem == 1)
				{
					ShowPlayerDialog(playerid, DIALOG_FBUY_5, DIALOG_STYLE_LIST, "Restauracja", "Lista nr 1\nLista nr 2", "Wybierz", "Wróæ");
					return 1;
				}
				else if(listitem == 2)
				{
					format(string, sizeof(string), "Stara cena: $%d\n\nPodaj now¹ cene skuput itema", BizItemSlotBuy(i, gListItem[playerid]+1));
					ShowPlayerDialog(playerid, DIALOG_FBUY_4, DIALOG_STYLE_INPUT, "Restauracja", string, "Zmieñ", "Wróæ");
					return 1;
				}
				else if(listitem == 3)
				{
					gListOverItem[playerid] = 1;
					goto FBuyItem;
				}
			}
			else
			{
				ShowBizFProductList(playerid, i);
				return 1;
			}
		}
		case DIALOG_FBUY_3:									// Change product sell price
		{
			if(response)
			{
				new i = gBuyBusinessID[playerid];
				BizItemSlotSetPrice(i, gListItem[playerid]+1, strval(inputtext));
				ShowPlayerDialog(playerid, DIALOG_FBUY_MSG, DIALOG_STYLE_MSGBOX, "Restauracja", "Zmieni³eœ cene produktu !", "Wróæ", "" );
				return 1;
			}
			else
			{
				gListOverItem[playerid] = 1;
				goto FBuyMenu;
				return 1;
			}
		}
		case DIALOG_FBUY_4:									// Change product buy price
		{
			if(response)
			{
				if(strval(inputtext) < 0)
				{
					ShowPlayerDialog(playerid, DIALOG_FBUY_4, DIALOG_STYLE_INPUT, "Restauracja", "Poda³eœ niepoprawn¹ cene skupu !\nSpróbuj jeszcze raz", "Dalej", "Wróæ");
					return 1;
				}
				new i = gBuyBusinessID[playerid];
				BizItemSlotSetBuy(i, gListItem[playerid]+1, strval(inputtext));
				ShowPlayerDialog(playerid, DIALOG_FBUY_MSG, DIALOG_STYLE_MSGBOX, "Restauracja", "Cena skupu itemu zosta³a zmieniona !", "Wróæ", "");
				return 1;
			}
			else
			{
				gListOverItem[playerid] = 1;
				goto FBuyMenu;
				return 1;
			}
		}
		case DIALOG_FBUY_5:									// Change product
		{
			if(response)
			{
				gBuyBusinessItemListID[playerid] = listitem;
				if(listitem == 0)
				{
					strdel(string, 0, sizeof(string));
					for(new i = 1; i <= ItemCountOfType(5); i++)
					{
						format(string2, sizeof(string2), "%d. %s\n", i, ItemName(5, i));
						strcat(string, string2);
					}
				}
				else if(listitem == 1)
				{
					format(string, sizeof(string), "1. %s\n2. %s\n3. %s\n4. %s\n5. %s\n6. %s\n7. %s\n8. %s\n9. %s\n10. %s\n11. %s",
						ItemName(1, 9), ItemName(1, 125), ItemName(1, 126), ItemName(1, 127), ItemName(1, 128),
						ItemName(1, 129), ItemName(1, 130), ItemName(1, 131), ItemName(1, 132)
					);
				}
				ShowPlayerDialog(playerid, DIALOG_FBUY_6, DIALOG_STYLE_LIST, "Restauracja", string, "Wybierz", "Wróæ");
				return 1;
			}
			else
			{
				gListOverItem[playerid] = 1;
				goto FBuyMenu;
				return 1;
			}
		}
		case DIALOG_FBUY_6:									// Change product
		{
			if(response)
			{
				new i = gBuyBusinessID[playerid];
				if(gBuyBusinessItemListID[playerid] == 0)
				{
					BizSlotSetItem(i, gListItem[playerid]+1, 5, listitem+1);
				}
				else if(gBuyBusinessItemListID[playerid] == 1)
				{
					switch(listitem)
					{
						case 0: BizSlotSetItem(i, gListItem[playerid]+1, 1, 9);
						case 1: BizSlotSetItem(i, gListItem[playerid]+1, 1, 124);
						case 2: BizSlotSetItem(i, gListItem[playerid]+1, 1, 125);
						case 3: BizSlotSetItem(i, gListItem[playerid]+1, 1, 126);
						case 4: BizSlotSetItem(i, gListItem[playerid]+1, 1, 127);
						case 5: BizSlotSetItem(i, gListItem[playerid]+1, 1, 128);
						case 6: BizSlotSetItem(i, gListItem[playerid]+1, 1, 129);
						case 7: BizSlotSetItem(i, gListItem[playerid]+1, 1, 130);
						case 8: BizSlotSetItem(i, gListItem[playerid]+1, 1, 131);
					}
				}
				ShowPlayerDialog(playerid, DIALOG_FBUY_MSG, DIALOG_STYLE_MSGBOX, "Restauracja", "Zmieni³eœ produkt !", "Wróæ", "");
				return 1;
			}
			else
			{
				gListOverItem[playerid] = 1;
				goto FBuyMenu;
				return 1;
			}
		}
		case DIALOG_FBUY_MSG:								// Message with return
		{
			gListOverItem[playerid] = 1;
			goto FBuyMenu;
			return 1;
		}
		case DIALOG_FBUY_MSG2:								// Message with return
		{
			ShowBizFProductList(playerid, gBuyBusinessItemListID[playerid]);
			return 1;
		}
		case DIALOG_BUY_1:
		{
			if(response)
			{
				switch( listitem )
				{
					case 0:
					{
						ProdList:
						new i = gBuyBusinessID[playerid];
						format(string, sizeof(string), SHOP_PRODUCT_LIST,
							ItemName(Businesses[i][Product1type], Businesses[i][Product1]),
							Businesses[i][Product1price],
							Businesses[i][Product1count],
							ItemName(Businesses[i][Product2type], Businesses[i][Product2]),
							Businesses[i][Product2price],
							Businesses[i][Product2count],
							ItemName(Businesses[i][Product3type], Businesses[i][Product3]),
							Businesses[i][Product3price],
							Businesses[i][Product3count],
							ItemName(Businesses[i][Product4type], Businesses[i][Product4]),
							Businesses[i][Product4price],
							Businesses[i][Product4count],
							ItemName(Businesses[i][Product5type], Businesses[i][Product5]),
							Businesses[i][Product5price],
							Businesses[i][Product5count],
							ItemName(Businesses[i][Product6type], Businesses[i][Product6]),
							Businesses[i][Product6price],
							Businesses[i][Product6count],
							ItemName(Businesses[i][Product7type], Businesses[i][Product7]),
							Businesses[i][Product7price],
							Businesses[i][Product7count],
							ItemName(Businesses[i][Product8type], Businesses[i][Product8]),
							Businesses[i][Product8price],
							Businesses[i][Product8count],
							ItemName(Businesses[i][Product9type], Businesses[i][Product9]),
							Businesses[i][Product9price],
							Businesses[i][Product9count],
							ItemName(Businesses[i][Product10type], Businesses[i][Product10]),
							Businesses[i][Product10price],
							Businesses[i][Product10count]
						);
						if(strcmp(gPlayerData[playerid][pName], Businesses[i][Owner], false) == 0 || (Businesses[i][BGov] && gPlayerData[playerid][pFaction] == FACTIONID_GOVERNMENT))
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P, DIALOG_STYLE_LIST, "Sklep", string, "Wybierz", "WyjdŸ");
						}
						else
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P, DIALOG_STYLE_LIST, "Sklep", string, "Kup", "WyjdŸ");
						}
						return 1;
					}
					case 1:
					{
						if(Businesses[gBuyBusinessID[playerid]][BizType] == BIZT_GAS)
						{
							new GSID, refillprice;
							for( new i = 0; i < sizeof(GasStations); i++ )
							{
								if( GasStations[i][BusinessID] == gBuyBusinessID[playerid] )
								{
									GSID = i;
									break;
								}
							}
							refillprice += floatround(gPlayerData[playerid][pGasStationRefPetrol][gBuyBusinessID[playerid]], floatround_round) * GasStations[GSID][PetrolPrice];
							refillprice += floatround(gPlayerData[playerid][pGasStationRefOil][gBuyBusinessID[playerid]], floatround_round) * GasStations[GSID][OilPrice];
							refillprice += floatround(gPlayerData[playerid][pGasStationRefGas][gBuyBusinessID[playerid]], floatround_round) * GasStations[GSID][GasPrice];
							format(string, sizeof( string ), "Zatankowano:\n- %dltr benzyny za $%d\n- %dltr ropy za $%d\n- %dltr gazu za $%d\n\n£¹czna kwota do zap³aty: $%d",
							floatround(gPlayerData[playerid][pGasStationRefPetrol][gBuyBusinessID[playerid]]),
							floatround(gPlayerData[playerid][pGasStationRefPetrol][gBuyBusinessID[playerid]], floatround_round) * GasStations[GSID][PetrolPrice],
							floatround(gPlayerData[playerid][pGasStationRefOil][gBuyBusinessID[playerid]]),
							floatround(gPlayerData[playerid][pGasStationRefOil][gBuyBusinessID[playerid]], floatround_round) * GasStations[GSID][OilPrice],
							floatround(gPlayerData[playerid][pGasStationRefGas][gBuyBusinessID[playerid]]),
							floatround(gPlayerData[playerid][pGasStationRefGas][gBuyBusinessID[playerid]], floatround_round) * GasStations[GSID][GasPrice],
							refillprice);
							ShowPlayerDialog( playerid, DIALOG_BUY_2F, DIALOG_STYLE_MSGBOX, "Stacja paliw", string, "Zap³aæ", "Wróæ" );
						}
						else
						{
							ShowBizInfo(playerid);
						}
					}
					case 2:
					{
						ShowBizInfo(playerid);
					}
				}
				return 1;
			}
		}
		case DIALOG_BUY_2F:
		{
			if(response)
			{
				new GSID, refillpricep, refillpriceo, refillpriceg, refillprice;
				for(new i = 0; i < sizeof(GasStations); i++)
				{
					if(GasStations[i][BusinessID] == gBuyBusinessID[playerid])
					{
						GSID = i;
						break;
					}
				}
				refillpricep = refillprice += floatround(gPlayerData[playerid][pGasStationRefPetrol][gBuyBusinessID[playerid]] * GasStations[GSID][PetrolPrice], floatround_round);
				refillpriceo = refillprice += floatround(gPlayerData[playerid][pGasStationRefOil][gBuyBusinessID[playerid]] * GasStations[GSID][OilPrice], floatround_round);
				refillpriceg = refillprice += floatround(gPlayerData[playerid][pGasStationRefGas][gBuyBusinessID[playerid]] * GasStations[GSID][GasPrice], floatround_round);
				
				ApplyAnimation(playerid, "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0);
				
				if(refillprice > gPlayerData[playerid][pCash])
				{
					new lefttp = refillprice - gPlayerData[playerid][pCash];
					
					format(string, sizeof(string), "Zap³acono: $%d\nPozosta³o do zap³aty: $%d\n\nMusisz jak najszybciej op³aciæ zaleg³¹ kwote !\nW przeciwnym wypadku zacznie siê Tob¹ interesowaæ policja !", gPlayerData[playerid][pCash], lefttp);
					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Stacja paliw", string, "Zamknij", "");
					
					if(refillpricep > gPlayerData[playerid][pCash])
					{
						gPlayerData[playerid][pGasStationRefPetrol][gBuyBusinessID[playerid]] = floatround(gPlayerData[playerid][pCash]/GasStations[GSID][PetrolPrice], floatround_round);
						SavePlayerData(playerid, "GasStationRefPetrol", gBuyBusinessID[playerid]);
						
						Businesses[gBuyBusinessID[playerid]][Till] += gPlayerData[playerid][pCash];
						
						Businesses[gBuyBusinessID[playerid]][mIncomeFuelPetrolToday] += gPlayerData[playerid][pCash];
						Businesses[gBuyBusinessID[playerid]][mIncomeFuelPetrolTotal] += gPlayerData[playerid][pCash];
						Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += gPlayerData[playerid][pCash];
						SaveBizData(gBuyBusinessID[playerid], "IncomeFuelPetrolToday");
						SaveBizData(gBuyBusinessID[playerid], "IncomeFuelPetrolTotal");
						SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
						
						GivePlayerCash(playerid, -gPlayerData[playerid][pCash]);
						return 1;
					}
					else
					{
						gPlayerData[playerid][pGasStationRefPetrol][gBuyBusinessID[playerid]] = 0;
						
						Businesses[gBuyBusinessID[playerid]][Till] += refillpricep;
						
						Businesses[gBuyBusinessID[playerid]][mIncomeFuelPetrolToday] += refillpricep;
						Businesses[gBuyBusinessID[playerid]][mIncomeFuelPetrolTotal] += refillpricep;
						Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += refillpricep;
						SaveBizData(gBuyBusinessID[playerid], "IncomeFuelPetrolToday");
						SaveBizData(gBuyBusinessID[playerid], "IncomeFuelPetrolTotal");
						SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
						
						GivePlayerCash(playerid, -refillpricep);
					}
					if(refillpriceo > gPlayerData[playerid][pCash])
					{
						gPlayerData[playerid][pGasStationRefOil][gBuyBusinessID[playerid]] = floatround(gPlayerData[playerid][pCash]/GasStations[GSID][OilPrice], floatround_round);
						SavePlayerData(playerid, "GasStationRefOil", gBuyBusinessID[playerid]);
						
						Businesses[gBuyBusinessID[playerid]][Till] += gPlayerData[playerid][pCash];
						
						Businesses[gBuyBusinessID[playerid]][mIncomeFuelOilToday] += gPlayerData[playerid][pCash];
						Businesses[gBuyBusinessID[playerid]][mIncomeFuelOilTotal] += gPlayerData[playerid][pCash];
						Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += gPlayerData[playerid][pCash];
						SaveBizData(gBuyBusinessID[playerid], "IncomeFuelOilToday");
						SaveBizData(gBuyBusinessID[playerid], "IncomeFuelOilTotal");
						SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
						
						GivePlayerCash(playerid, -gPlayerData[playerid][pCash]);
						return 1;
					}
					else
					{
						gPlayerData[playerid][pGasStationRefPetrol][gBuyBusinessID[playerid]] = 0;
						
						Businesses[gBuyBusinessID[playerid]][Till] += refillpriceo;
						
						Businesses[gBuyBusinessID[playerid]][mIncomeFuelOilToday] += refillpriceo;
						Businesses[gBuyBusinessID[playerid]][mIncomeFuelOilTotal] += refillpriceo;
						Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += refillpriceo;
						SaveBizData(gBuyBusinessID[playerid], "IncomeFuelOilToday");
						SaveBizData(gBuyBusinessID[playerid], "IncomeFuelOilTotal");
						SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
						
						GivePlayerCash(playerid, -refillpriceo);
					}
					if(refillpriceg > gPlayerData[playerid][pCash])
					{
						gPlayerData[playerid][pGasStationRefGas][gBuyBusinessID[playerid]] = floatround(gPlayerData[playerid][pCash]/GasStations[GSID][GasPrice], floatround_round);
						SavePlayerData(playerid, "GasStationRefGas", gBuyBusinessID[playerid]);
						
						Businesses[gBuyBusinessID[playerid]][Till] += gPlayerData[playerid][pCash];
						
						Businesses[gBuyBusinessID[playerid]][mIncomeFuelGasToday] += gPlayerData[playerid][pCash];
						Businesses[gBuyBusinessID[playerid]][mIncomeFuelGasTotal] += gPlayerData[playerid][pCash];
						Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += gPlayerData[playerid][pCash];
						SaveBizData(gBuyBusinessID[playerid], "IncomeFuelGasToday");
						SaveBizData(gBuyBusinessID[playerid], "IncomeFuelGasTotal");
						SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
						
						GivePlayerCash(playerid, -gPlayerData[playerid][pCash]);
						return 1;
					}
					else
					{
						gPlayerData[playerid][pGasStationRefPetrol][gBuyBusinessID[playerid]] = 0;
						
						Businesses[gBuyBusinessID[playerid]][Till] += refillpriceg;
						
						Businesses[gBuyBusinessID[playerid]][mIncomeFuelGasToday] += refillpriceg;
						Businesses[gBuyBusinessID[playerid]][mIncomeFuelGasTotal] += refillpriceg;
						Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += refillpriceg;
						SaveBizData(gBuyBusinessID[playerid], "IncomeFuelGasToday");
						SaveBizData(gBuyBusinessID[playerid], "IncomeFuelGasTotal");
						SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
						
						GivePlayerCash(playerid, -refillpriceg);
					}
					SaveBizData(gBuyBusinessID[playerid], "Till");
				}
				else
				{
					format(string, sizeof(string), "Zap³acono: $%d\nPozosta³o do zap³aty: $%d\n\nZatankowane paliwo zosta³o op³acone !", refillprice, 0);
					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Stacja paliw", string, "Zamknij", "");
					
					Businesses[gBuyBusinessID[playerid]][Till] += refillprice;
					SaveBizData(gBuyBusinessID[playerid], "Till");
					
					GivePlayerCash(playerid, -refillprice);
					
					Businesses[gBuyBusinessID[playerid]][mIncomeFuelPetrolToday] += refillpricep;
					Businesses[gBuyBusinessID[playerid]][mIncomeFuelPetrolTotal] += refillpricep;
					Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += refillpricep;
					SaveBizData(gBuyBusinessID[playerid], "IncomeFuelPetrolToday");
					SaveBizData(gBuyBusinessID[playerid], "IncomeFuelPetrolTotal");
					SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
					
					Businesses[gBuyBusinessID[playerid]][mIncomeFuelOilToday] += refillpriceo;
					Businesses[gBuyBusinessID[playerid]][mIncomeFuelOilTotal] += refillpriceo;
					Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += refillpriceo;
					SaveBizData(gBuyBusinessID[playerid], "IncomeFuelOilToday");
					SaveBizData(gBuyBusinessID[playerid], "IncomeFuelOilTotal");
					SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
					
					Businesses[gBuyBusinessID[playerid]][mIncomeFuelGasToday] += refillpriceg;
					Businesses[gBuyBusinessID[playerid]][mIncomeFuelGasTotal] += refillpriceg;
					Businesses[gBuyBusinessID[playerid]][mIncomeTotal] += refillpriceg;
					SaveBizData(gBuyBusinessID[playerid], "IncomeFuelGasToday");
					SaveBizData(gBuyBusinessID[playerid], "IncomeFuelGasTotal");
					SaveBizData(gBuyBusinessID[playerid], "IncomeTotal");
					
					gPlayerData[playerid][pGasStationRefPetrol][gBuyBusinessID[playerid]] = 0;
					gPlayerData[playerid][pGasStationRefOil][gBuyBusinessID[playerid]] = 0;
					gPlayerData[playerid][pGasStationRefGas][gBuyBusinessID[playerid]] = 0;
					SavePlayerData(playerid, "GasStationRefPetrol", gBuyBusinessID[playerid]);
					SavePlayerData(playerid, "GasStationRefOil", gBuyBusinessID[playerid]);
					SavePlayerData(playerid, "GasStationRefGas", gBuyBusinessID[playerid]);
				}
				return 1;
			}
		}
		case DIALOG_BUY_2P:
		{
			if(response)
			{
				new i = gBuyBusinessID[playerid];
				if(strcmp(gPlayerData[playerid][pName], Businesses[i][Owner], false) == 0 || (Businesses[i][BGov] && gPlayerData[playerid][pFaction] == FACTIONID_GOVERNMENT))
				{
					BuyMenu:
					if( gListOverItem[playerid] == 1 )
					{
						gListOverItem[playerid] = -1;
						listitem = gListItem[playerid];
					}
					gListItem[playerid] = listitem;
					ShowPlayerDialog(playerid, DIALOG_BUY_3P, DIALOG_STYLE_LIST, "Sklep", "1. Zmieñ cene\n2. Zmieñ produkt\n3. Cena kupna\n4. Kup", "Wybierz", "Wróæ");
					return 1;
				}
				else
				{
					BuyItem:
					if(gListOverItem[playerid] == 1)
					{
						gListOverItem[playerid] = -1;
						listitem = gListItem[playerid];
					}
					if(listitem == 0)
					{
						if(Businesses[i][Product1type] == 0)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_7_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product1count] <= 0)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_8_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product1price] <= 0)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_6_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product1type] == 3 && Businesses[i][Product1] == 24)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_9_TXT, "Wróæ", "");
							return 1;
						}
						if(GetPlayerCash(playerid) >= Businesses[i][Product1price])
						{
							if(ItemWeight(Businesses[i][Product1type], Businesses[i][Product1]) + PItemWeight(playerid) > gPlayerData[playerid][pMaxWeight])
							{
								ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_3_TXT, "Wróæ", "");
								return 1;
							}
							if(!BuyDialogItem(playerid, Businesses[i][Product1type], Businesses[i][Product1]))
								return 1;
							Businesses[i][Product1count]--;
							SaveBizData(i, "Product1count");
							
							Businesses[i][Product1incomeTotal] += Businesses[i][Product1price];
							Businesses[i][Product1incomeToday] += Businesses[i][Product1price];
							Businesses[i][mIncomeTotal] += Businesses[i][Product1price];
							SaveBizData(i, "Product1incomeTotal");
							SaveBizData(i, "Product1incomeToday");
							SaveBizData(i, "IncomeTotal");
							
							GivePlayerCash(playerid,-Businesses[i][Product1price]);
							Businesses[i][Till] += Businesses[i][Product1price];
							SaveBizData(i, "Till");

							// Check if it is players first buy
							FirstBuy(playerid);

							format(string, sizeof(string), "%s", ItemName(Businesses[i][Product1type], Businesses[i][Product1]));
							SaveStatsData(string, gPlayerData[playerid][pName], Businesses[i][Product1price], i, Businesses[i][BizType]);

							ShowPlayerDialog(playerid,DIALOG_BUY_2P_MSG,DIALOG_STYLE_MSGBOX,"Sukces",DIALOG_BUY_1_TXT,"Wróæ","");
							Audio_Play(playerid, AUDIO_BUY1, false, false, false);
							ApplyAnimation(playerid, "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0);

							return 1;
						}
					}
					if(listitem == 1)
					{
						if(Businesses[i][Product2type] == 0)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_7_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product2count] <= 0)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_8_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product2price] <= 0 )
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_6_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product2type] == 3 && Businesses[i][Product2] == 24)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_9_TXT, "Wróæ", "");
							return 1;
						}
						if( GetPlayerCash(playerid) >= Businesses[i][Product2price] )
						{
							if(ItemWeight(Businesses[i][Product2type], Businesses[i][Product2]) + PItemWeight(playerid) > gPlayerData[playerid][pMaxWeight])
							{
								ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_3_TXT, "Wróæ", "");
								return 1;
							}
							if(!BuyDialogItem(playerid, Businesses[i][Product2type], Businesses[i][Product2]))
								return 1;
							Businesses[i][Product2count]--;
							SaveBizData(i, "Product2count");
							
							Businesses[i][Product2incomeTotal] += Businesses[i][Product2price];
							Businesses[i][Product2incomeToday] += Businesses[i][Product2price];
							Businesses[i][mIncomeTotal] += Businesses[i][Product2price];
							SaveBizData(i, "Product2incomeTotal");
							SaveBizData(i, "Product2incomeToday");
							SaveBizData(i, "IncomeTotal");
							
							GivePlayerCash(playerid,-Businesses[i][Product2price]);
							Businesses[i][Till] += Businesses[i][Product2price];
							SaveBizData(i, "Till");

							// Check if it is players first buy
							FirstBuy(playerid);

							format(string, sizeof(string), "%s", ItemName(Businesses[i][Product2type], Businesses[i][Product2]));
							SaveStatsData(string, gPlayerData[playerid][pName], Businesses[i][Product2price], i, Businesses[i][BizType]);

							ShowPlayerDialog(playerid,DIALOG_BUY_2P_MSG,DIALOG_STYLE_MSGBOX,"Sukces",DIALOG_BUY_1_TXT,"Wróæ","");
							Audio_Play(playerid, AUDIO_BUY1, false, false, false);
							ApplyAnimation(playerid, "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0);

							return 1;
						}
					}
					if(listitem == 2)
					{
						if(Businesses[i][Product3type] == 0)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_7_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product3count] <= 0)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_8_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product3price] <= 0 )
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_6_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product3type] == 3 && Businesses[i][Product3] == 24)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_9_TXT, "Wróæ", "");
							return 1;
						}
						if( GetPlayerCash(playerid) >= Businesses[i][Product3price] )
						{
							if(ItemWeight(Businesses[i][Product3type], Businesses[i][Product3]) + PItemWeight(playerid) > gPlayerData[playerid][pMaxWeight])
							{
								ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_3_TXT, "Wróæ", "");
								return 1;
							}
							if(!BuyDialogItem(playerid, Businesses[i][Product3type], Businesses[i][Product3]))
								return 1;
							Businesses[i][Product3count]--;
							SaveBizData(i, "Product3count");
							
							Businesses[i][Product3incomeTotal] += Businesses[i][Product3price];
							Businesses[i][Product3incomeToday] += Businesses[i][Product3price];
							Businesses[i][mIncomeTotal] += Businesses[i][Product3price];
							SaveBizData(i, "Product3incomeTotal");
							SaveBizData(i, "Product3incomeToday");
							SaveBizData(i, "IncomeTotal");
							
							GivePlayerCash(playerid,-Businesses[i][Product3price]);
							Businesses[i][Till] += Businesses[i][Product3price];
							SaveBizData(i, "Till");

							// Check if it is players first buy
							FirstBuy(playerid);

							format(string, sizeof(string), "%s", ItemName(Businesses[i][Product3type], Businesses[i][Product3]));
							SaveStatsData(string, gPlayerData[playerid][pName], Businesses[i][Product3price], i, Businesses[i][BizType]);

							ShowPlayerDialog(playerid,DIALOG_BUY_2P_MSG,DIALOG_STYLE_MSGBOX,"Sukces",DIALOG_BUY_1_TXT,"Wróæ","");
							Audio_Play(playerid, AUDIO_BUY1, false, false, false);
							ApplyAnimation(playerid, "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0);

							return 1;
						}
					}
					if(listitem == 3)
					{
						if(Businesses[i][Product4type] == 0)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_7_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product4count] <= 0)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_8_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product4price] <= 0 )
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_6_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product4type] == 3 && Businesses[i][Product4] == 24)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_9_TXT, "Wróæ", "");
							return 1;
						}
						if( GetPlayerCash(playerid) >= Businesses[i][Product4price] )
						{
							if(ItemWeight(Businesses[i][Product4type], Businesses[i][Product4]) + PItemWeight(playerid) > gPlayerData[playerid][pMaxWeight])
							{
								ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_3_TXT, "Wróæ", "");
								return 1;
							}
							if(!BuyDialogItem(playerid, Businesses[i][Product4type], Businesses[i][Product4]))
								return 1;
							Businesses[i][Product4count]--;
							SaveBizData(i, "Product4count");
							
							Businesses[i][Product4incomeTotal] += Businesses[i][Product4price];
							Businesses[i][Product4incomeToday] += Businesses[i][Product4price];
							Businesses[i][mIncomeTotal] += Businesses[i][Product4price];
							SaveBizData(i, "Product4incomeTotal");
							SaveBizData(i, "Product4incomeToday");
							SaveBizData(i, "IncomeTotal");
							
							GivePlayerCash(playerid,-Businesses[i][Product4price]);
							Businesses[i][Till] += Businesses[i][Product4price];
							SaveBizData(i, "Till");

							// Check if it is players first buy
							FirstBuy(playerid);

							format(string, sizeof(string), "%s", ItemName(Businesses[i][Product4type], Businesses[i][Product4]));
							SaveStatsData(string, gPlayerData[playerid][pName], Businesses[i][Product4price], i, Businesses[i][BizType]);

							ShowPlayerDialog(playerid,DIALOG_BUY_2P_MSG,DIALOG_STYLE_MSGBOX,"Sukces",DIALOG_BUY_1_TXT,"Wróæ","");
							Audio_Play(playerid, AUDIO_BUY1, false, false, false);
							ApplyAnimation(playerid, "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0);

							return 1;
						}
					}
					if(listitem == 4)
					{
						if(Businesses[i][Product5type] == 0)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_7_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product5count] <= 0)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_8_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product5price] <= 0 )
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_6_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product5type] == 3 && Businesses[i][Product5] == 24)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_9_TXT, "Wróæ", "");
							return 1;
						}
						if( GetPlayerCash(playerid) >= Businesses[i][Product5price] )
						{
							if(ItemWeight(Businesses[i][Product5type], Businesses[i][Product5]) + PItemWeight(playerid) > gPlayerData[playerid][pMaxWeight])
							{
								ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_3_TXT, "Wróæ", "");
								return 1;
							}
							if(!BuyDialogItem(playerid, Businesses[i][Product5type], Businesses[i][Product5]))
								return 1;
							Businesses[i][Product5count]--;
							SaveBizData(i, "Product5count");
							
							Businesses[i][Product5incomeTotal] += Businesses[i][Product5price];
							Businesses[i][Product5incomeToday] += Businesses[i][Product5price];
							Businesses[i][mIncomeTotal] += Businesses[i][Product5price];
							SaveBizData(i, "Product5incomeTotal");
							SaveBizData(i, "Product5incomeToday");
							SaveBizData(i, "IncomeTotal");
							
							GivePlayerCash(playerid,-Businesses[i][Product5price]);
							Businesses[i][Till] += Businesses[i][Product5price];
							SaveBizData(i, "Till");

							// Check if it is players first buy
							FirstBuy(playerid);

							format(string, sizeof(string), "%s", ItemName(Businesses[i][Product5type], Businesses[i][Product5]));
							SaveStatsData(string, gPlayerData[playerid][pName], Businesses[i][Product5price], i, Businesses[i][BizType]);

							ShowPlayerDialog(playerid,DIALOG_BUY_2P_MSG,DIALOG_STYLE_MSGBOX,"Sukces",DIALOG_BUY_1_TXT,"Wróæ","");
							Audio_Play(playerid, AUDIO_BUY1, false, false, false);
							ApplyAnimation(playerid, "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0);

							return 1;
						}
					}
					if(listitem == 5)
					{
						if(Businesses[i][Product6type] == 0)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_7_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product6count] <= 0)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_8_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product6price] <= 0 )
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_6_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product6type] == 3 && Businesses[i][Product6] == 24)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_9_TXT, "Wróæ", "");
							return 1;
						}
						if( GetPlayerCash(playerid) >= Businesses[i][Product6price] )
						{
							if(ItemWeight(Businesses[i][Product6type], Businesses[i][Product6]) + PItemWeight(playerid) > gPlayerData[playerid][pMaxWeight])
							{
								ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_3_TXT, "Wróæ", "");
								return 1;
							}
							if(!BuyDialogItem(playerid, Businesses[i][Product6type], Businesses[i][Product6]))
								return 1;
							Businesses[i][Product6count]--;
							SaveBizData(i, "Product6count");
							
							Businesses[i][Product6incomeTotal] += Businesses[i][Product6price];
							Businesses[i][Product6incomeToday] += Businesses[i][Product6price];
							Businesses[i][mIncomeTotal] += Businesses[i][Product6price];
							SaveBizData(i, "Product6incomeTotal");
							SaveBizData(i, "Product6incomeToday");
							SaveBizData(i, "IncomeTotal");
							
							GivePlayerCash(playerid,-Businesses[i][Product6price]);
							Businesses[i][Till] += Businesses[i][Product6price];
							SaveBizData(i, "Till");

							// Check if it is players first buy
							FirstBuy(playerid);

							format(string, sizeof(string), "%s", ItemName(Businesses[i][Product6type], Businesses[i][Product6]));
							SaveStatsData(string, gPlayerData[playerid][pName], Businesses[i][Product6price], i, Businesses[i][BizType]);

							ShowPlayerDialog(playerid,DIALOG_BUY_2P_MSG,DIALOG_STYLE_MSGBOX,"Sukces",DIALOG_BUY_1_TXT,"Wróæ","");
							Audio_Play(playerid, AUDIO_BUY1, false, false, false);
							ApplyAnimation(playerid, "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0);

							return 1;
						}
					}
					if(listitem == 6)
					{
						if(Businesses[i][Product7type] == 0)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_7_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product7count] <= 0)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_8_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product7price] <= 0 )
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_6_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product7type] == 3 && Businesses[i][Product7] == 24)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_9_TXT, "Wróæ", "");
							return 1;
						}
						if( GetPlayerCash(playerid) >= Businesses[i][Product7price] )
						{
							if(ItemWeight(Businesses[i][Product7type], Businesses[i][Product7]) + PItemWeight(playerid) > gPlayerData[playerid][pMaxWeight])
							{
								ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_3_TXT, "Wróæ", "");
								return 1;
							}
							if(!BuyDialogItem(playerid, Businesses[i][Product7type], Businesses[i][Product7]))
								return 1;
							Businesses[i][Product7count]--;
							SaveBizData(i, "Product7count");
							
							Businesses[i][Product7incomeTotal] += Businesses[i][Product7price];
							Businesses[i][Product7incomeToday] += Businesses[i][Product7price];
							Businesses[i][mIncomeTotal] += Businesses[i][Product7price];
							SaveBizData(i, "Product7incomeTotal");
							SaveBizData(i, "Product7incomeToday");
							SaveBizData(i, "IncomeTotal");
							
							GivePlayerCash(playerid,-Businesses[i][Product7price]);
							Businesses[i][Till] += Businesses[i][Product7price];
							SaveBizData(i, "Till");

							// Check if it is players first buy
							FirstBuy(playerid);

							format(string, sizeof(string), "%s", ItemName(Businesses[i][Product7type], Businesses[i][Product7]));
							SaveStatsData(string, gPlayerData[playerid][pName], Businesses[i][Product7price], i, Businesses[i][BizType]);

							ShowPlayerDialog(playerid,DIALOG_BUY_2P_MSG,DIALOG_STYLE_MSGBOX,"Sukces",DIALOG_BUY_1_TXT,"Wróæ","");
							Audio_Play(playerid, AUDIO_BUY1, false, false, false);
							ApplyAnimation(playerid, "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0);

							return 1;
						}
					}
					if(listitem == 7)
					{
						if(Businesses[i][Product8type] == 0)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_7_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product8count] <= 0)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_8_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product8price] <= 0 )
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_6_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product8type] == 3 && Businesses[i][Product8] == 24)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_9_TXT, "Wróæ", "");
							return 1;
						}
						if( GetPlayerCash(playerid) >= Businesses[i][Product8price] )
						{
							if(ItemWeight(Businesses[i][Product8type], Businesses[i][Product8]) + PItemWeight(playerid) > gPlayerData[playerid][pMaxWeight])
							{
								ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_3_TXT, "Wróæ", "");
								return 1;
							}
							if(!BuyDialogItem(playerid, Businesses[i][Product8type], Businesses[i][Product8]))
								return 1;
							Businesses[i][Product8count]--;
							SaveBizData(i, "Product8count");
							
							Businesses[i][Product8incomeTotal] += Businesses[i][Product8price];
							Businesses[i][Product8incomeToday] += Businesses[i][Product8price];
							Businesses[i][mIncomeTotal] += Businesses[i][Product8price];
							SaveBizData(i, "Product8incomeTotal");
							SaveBizData(i, "Product8incomeToday");
							SaveBizData(i, "IncomeTotal");
							
							GivePlayerCash(playerid,-Businesses[i][Product8price]);
							Businesses[i][Till] += Businesses[i][Product8price];
							SaveBizData(i, "Till");

							// Check if it is players first buy
							FirstBuy(playerid);

							format(string, sizeof(string), "%s", ItemName(Businesses[i][Product8type], Businesses[i][Product8]));
							SaveStatsData(string, gPlayerData[playerid][pName], Businesses[i][Product8price], i, Businesses[i][BizType]);

							ShowPlayerDialog(playerid,DIALOG_BUY_2P_MSG,DIALOG_STYLE_MSGBOX,"Sukces",DIALOG_BUY_1_TXT,"Wróæ","");
							Audio_Play(playerid, AUDIO_BUY1, false, false, false);
							ApplyAnimation(playerid, "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0);

							return 1;
						}
					}
					if(listitem == 8)
					{
						if(Businesses[i][Product9type] == 0)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_7_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product9count] <= 0)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_8_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product9price] <= 0 )
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_6_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product9type] == 3 && Businesses[i][Product9] == 24)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_9_TXT, "Wróæ", "");
							return 1;
						}
						if( GetPlayerCash(playerid) >= Businesses[i][Product9price] )
						{
							if(ItemWeight(Businesses[i][Product9type], Businesses[i][Product9]) + PItemWeight(playerid) > gPlayerData[playerid][pMaxWeight])
							{
								ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_3_TXT, "Wróæ", "");
								return 1;
							}
							if(!BuyDialogItem(playerid, Businesses[i][Product9type], Businesses[i][Product9]))
								return 1;
							Businesses[i][Product9count]--;
							SaveBizData(i, "Product9count");
							
							Businesses[i][Product9incomeTotal] += Businesses[i][Product9price];
							Businesses[i][Product9incomeToday] += Businesses[i][Product9price];
							Businesses[i][mIncomeTotal] += Businesses[i][Product9price];
							SaveBizData(i, "Product9incomeTotal");
							SaveBizData(i, "Product9incomeToday");
							SaveBizData(i, "IncomeTotal");
							
							GivePlayerCash(playerid,-Businesses[i][Product9price]);
							Businesses[i][Till] += Businesses[i][Product9price];
							SaveBizData(i, "Till");

							// Check if it is players first buy
							FirstBuy(playerid);

							format(string, sizeof(string), "%s", ItemName(Businesses[i][Product9type], Businesses[i][Product9]));
							SaveStatsData(string, gPlayerData[playerid][pName], Businesses[i][Product9price], i, Businesses[i][BizType]);

							ShowPlayerDialog(playerid,DIALOG_BUY_2P_MSG,DIALOG_STYLE_MSGBOX,"Sukces",DIALOG_BUY_1_TXT,"Wróæ","");
							Audio_Play(playerid, AUDIO_BUY1, false, false, false);
							ApplyAnimation(playerid, "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0);

							return 1;
						}
					}
					if(listitem == 9)
					{
						if(Businesses[i][Product10type] == 0)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_7_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product10count] <= 0)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_8_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product10price] <= 0 )
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_6_TXT, "Wróæ", "");
							return 1;
						}
						if(Businesses[i][Product10type] == 3 && Businesses[i][Product10] == 24)
						{
							ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_9_TXT, "Wróæ", "");
							return 1;
						}
						if( GetPlayerCash(playerid) >= Businesses[i][Product10price] )
						{
							if(ItemWeight(Businesses[i][Product10type], Businesses[i][Product10]) + PItemWeight(playerid) > gPlayerData[playerid][pMaxWeight])
							{
								ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_3_TXT, "Wróæ", "");
								return 1;
							}
							if(!BuyDialogItem(playerid, Businesses[i][Product10type], Businesses[i][Product10]))
								return 1;
							Businesses[i][Product10count]--;
							SaveBizData(i, "Product10count");
							
							Businesses[i][Product10incomeTotal] += Businesses[i][Product10price];
							Businesses[i][Product10incomeToday] += Businesses[i][Product10price];
							Businesses[i][mIncomeTotal] += Businesses[i][Product10price];
							SaveBizData(i, "Product10incomeTotal");
							SaveBizData(i, "Product10incomeToday");
							SaveBizData(i, "IncomeTotal");
							
							GivePlayerCash(playerid,-Businesses[i][Product10price]);
							Businesses[i][Till] += Businesses[i][Product10price];
							SaveBizData(i, "Till");

							// Check if it is players first buy
							FirstBuy(playerid);

							format(string, sizeof(string), "%s", ItemName(Businesses[i][Product10type], Businesses[i][Product10]));
							SaveStatsData(string, gPlayerData[playerid][pName], Businesses[i][Product10price], i, Businesses[i][BizType]);

							ShowPlayerDialog(playerid,DIALOG_BUY_2P_MSG,DIALOG_STYLE_MSGBOX,"Sukces",DIALOG_BUY_1_TXT,"Wróæ","");
							Audio_Play(playerid, AUDIO_BUY1, false, false, false);
							ApplyAnimation(playerid, "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0);

							return 1;
						}
					}
					ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Niepowodzenie", DIALOG_BUY_2_TXT, "Wróæ", "");
				}
				return 1;
			}
		}
		case DIALOG_BUY_2P_MSG:
		{
			if(response)
			{
				goto ProdList;
			}
			return 1;
		}
		case DIALOG_BUY_3P:
		{
			if( response )
			{
				new i = gBuyBusinessID[playerid];
				if(listitem == 0)
				{
					new price;
					switch( gListItem[playerid] )
					{
						case 0: { price = Businesses[i][Product1price]; }
						case 1: { price = Businesses[i][Product2price]; }
						case 2: { price = Businesses[i][Product3price]; }
						case 3: { price = Businesses[i][Product4price]; }
						case 4: { price = Businesses[i][Product5price]; }
						case 5: { price = Businesses[i][Product6price]; }
						case 6: { price = Businesses[i][Product7price]; }
						case 7: { price = Businesses[i][Product8price]; }
						case 8: { price = Businesses[i][Product9price]; }
						case 9: { price = Businesses[i][Product10price]; }
						case 10: { price = Businesses[i][Product11Price]; }
						case 11: { price = Businesses[i][Product12Price]; }
						case 12: { price = Businesses[i][Product13Price]; }
						case 13: { price = Businesses[i][Product14Price]; }
						case 14: { price = Businesses[i][Product15Price]; }
						case 15: { price = Businesses[i][Product16Price]; }
						case 16: { price = Businesses[i][Product17Price]; }
						case 17: { price = Businesses[i][Product18Price]; }
						case 18: { price = Businesses[i][Product19Price]; }
						case 19: { price = Businesses[i][Product20Price]; }
						case 20: { price = Businesses[i][Product21Price]; }
					}
					format( string, sizeof(string), "Stara cena: $%d\n\nWpisz now¹ cene produktu:", price );
					ShowPlayerDialog( playerid, DIALOG_BUY_4P, DIALOG_STYLE_INPUT, "Sklep 24/7", string, "Zmieñ", "Wróæ" );
					return 1;
				}
				else if(listitem == 1)
				{
					if(Businesses[gPlayerVars[playerid][mAtBizID]][BizType] == BIZT_BAR)
					{
						format(string, sizeof(string), "Lista nr 1");
						ShowPlayerDialog(playerid, DIALOG_BUY_5P_BAR, DIALOG_STYLE_LIST, "Sklep 24/7", string, "Wybierz", "Wróæ");
					}
					else
					{
						format(string, sizeof(string), "Lista nr 1\nLista nr 2\nLista nr 3\nLista nr 4\nLista nr 5");
						ShowPlayerDialog(playerid, DIALOG_BUY_5P, DIALOG_STYLE_LIST, "Sklep 24/7 - przedmioty", string, "Wybierz", "Wróæ");
					}
					return 1;
				}
				else if(listitem == 2)
				{
					productBuyPrice:
					format(string, sizeof(string), "Stara cena: $%d\n\nPodaj now¹ cene skuput itema", BizItemSlotBuy(i, gListItem[playerid]+1));
					ShowPlayerDialog(playerid, DIALOG_BUY_7P, DIALOG_STYLE_INPUT, "Sklep 24/7", string, "Wróæ", "");
					return 1;
				}
				else if(listitem == 3)
				{
					gListOverItem[playerid] = 1;
					goto BuyItem;
				}
			}
			else
			{
				goto ProdList;
				return 1;
			}
		}
		case DIALOG_BUY_4P:									// Change product sell price
		{
			if(response)
			{
				new i = gBuyBusinessID[playerid];
				switch( gListItem[playerid] )
				{
					case 0:
					{
						Businesses[i][Product1price] = strval(inputtext);
						SaveBizData( i, "Product1price" );
					}
					case 1:
					{
						Businesses[i][Product2price] = strval(inputtext);
						SaveBizData( i, "Product2price" );
					}
					case 2:
					{
						Businesses[i][Product3price] = strval(inputtext);
						SaveBizData( i, "Product3price" );
					}
					case 3:
					{
						Businesses[i][Product4price] = strval(inputtext);
						SaveBizData( i, "Product4price" );
					}
					case 4:
					{
						Businesses[i][Product5price] = strval(inputtext);
						SaveBizData( i, "Product5price" );
					}
					case 5:
					{
						Businesses[i][Product6price] = strval(inputtext);
						SaveBizData( i, "Product6price" );
					}
					case 6:
					{
						Businesses[i][Product7price] = strval(inputtext);
						SaveBizData( i, "Product7price" );
					}
					case 7:
					{
						Businesses[i][Product8price] = strval(inputtext);
						SaveBizData( i, "Product8price" );
					}
					case 8:
					{
						Businesses[i][Product9price] = strval(inputtext);
						SaveBizData( i, "Product9price" );
					}
					case 9:
					{
						Businesses[i][Product10price] = strval(inputtext);
						SaveBizData( i, "Product10price" );
					}
					case 10:
					{
						Businesses[i][Product11Price] = strval(inputtext);
						SaveBizData( i, "Product11Price" );
					}
					case 11:
					{
						Businesses[i][Product12Price] = strval(inputtext);
						SaveBizData( i, "Product12Price" );
					}
					case 12:
					{
						Businesses[i][Product13Price] = strval(inputtext);
						SaveBizData( i, "Product13Price" );
					}
					case 13:
					{
						Businesses[i][Product14Price] = strval(inputtext);
						SaveBizData( i, "Product14Price" );
					}
					case 14:
					{
						Businesses[i][Product15Price] = strval(inputtext);
						SaveBizData( i, "Product15Price" );
					}
					case 15:
					{
						Businesses[i][Product16Price] = strval(inputtext);
						SaveBizData( i, "Product16Price" );
					}
					case 16:
					{
						Businesses[i][Product17Price] = strval(inputtext);
						SaveBizData( i, "Product17Price" );
					}
					case 17:
					{
						Businesses[i][Product18Price] = strval(inputtext);
						SaveBizData( i, "Product18Price" );
					}
					case 18:
					{
						Businesses[i][Product19Price] = strval(inputtext);
						SaveBizData( i, "Product19Price" );
					}
					case 19:
					{
						Businesses[i][Product20Price] = strval(inputtext);
						SaveBizData( i, "Product20Price" );
					}
					case 20:
					{
						Businesses[i][Product21Price] = strval(inputtext);
						SaveBizData( i, "Product21Price" );
					}
					case 21:
					{
						Businesses[i][Product22Price] = strval(inputtext);
						SaveBizData( i, "Product22Price" );
					}
					case 22:
					{
						Businesses[i][Product23Price] = strval(inputtext);
						SaveBizData( i, "Product23Price" );
					}
					case 23:
					{
						Businesses[i][Product24Price] = strval(inputtext);
						SaveBizData( i, "Product24Price" );
					}
					case 24:
					{
						Businesses[i][Product25Price] = strval(inputtext);
						SaveBizData( i, "Product25Price" );
					}
					case 25:
					{
						Businesses[i][Product26Price] = strval(inputtext);
						SaveBizData( i, "Product26Price" );
					}
					case 26:
					{
						Businesses[i][Product27Price] = strval(inputtext);
						SaveBizData( i, "Product27Price" );
					}
					case 27:
					{
						Businesses[i][Product28Price] = strval(inputtext);
						SaveBizData( i, "Product28Price" );
					}
					case 28:
					{
						Businesses[i][Product29Price] = strval(inputtext);
						SaveBizData( i, "Product29Price" );
					}
					case 29:
					{
						Businesses[i][Product30Price] = strval(inputtext);
						SaveBizData( i, "Product30Price" );
					}
				}
				ShowPlayerDialog(playerid,DIALOG_BUY_2P_MSG,DIALOG_STYLE_MSGBOX,"Sklep 24/7", "Zmieni³eœ cene produktu !", "Wróæ", "" );
				return 1;
			}
			else
			{
				gListOverItem[playerid] = 1;
				goto BuyMenu;
			}
		}
		case DIALOG_BUY_5P:									// Change product
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						gBuyBusinessItemListID[playerid] = 0;
						format(string, sizeof(string), "1. %s\n2. %s\n3. %s\n4. %s\n5. %s\n6. %s\n7. %s\n8. %s\n9. %s\n10. %s\n11. %s\n12. %s\n13. %s\n14. %s\n",
							ItemName(1, 174), ItemName(1, 2), ItemName(1, 4), ItemName(1, 5), ItemName(1, 6), ItemName(1, 7), ItemName(1, 8),
							ItemName(1, 9), ItemName(1, 10), ItemName(1, 11), ItemName(1, 12), ItemName(1, 105), ItemName(1, 106), ItemName(1, 107)
						);
						format(string, sizeof(string), "%s15. %s\n16. %s\n17. %s\n18. %s\n19. %s\n20. %s\n21. %s\n22. %s\n23. %s\n24. %s\n25. %s\n26. %s\n27. %s\n28. %s\n", string,
							ItemName(1, 108), ItemName(1, 109), ItemName(1, 110), ItemName(1, 111), ItemName(1, 112), ItemName(1, 113), ItemName(1, 114),
							ItemName(1, 115), ItemName(1, 116), ItemName(1, 117), ItemName(1, 118), ItemName(1, 119), ItemName(1, 120), ItemName(1, 121)
						);
						format(string, sizeof(string), "%s29. %s\n30. %s\n31. %s\n32. %s\n33. %s\n34. %s\n35. %s\n36. %s\n37. %s\n38. %s\n39. %s\n40. %s\n41. %s\n42. %s\n", string,
							ItemName(1, 122), ItemName(1, 123), ItemName(1, 124), ItemName(1, 125), ItemName(1, 126), ItemName(1, 127), ItemName(1, 128),
							ItemName(1, 129), ItemName(1, 130), ItemName(1, 131), ItemName(1, 132), ItemName(1, 133), ItemName(1, 134), ItemName(1, 135)
						);
						format(string, sizeof(string), "%s43. %s\n44. %s\n45. %s\n46. %s\n47. %s\n48. %s\n49. %s\n50. %s\n51. %s\n52. %s\n53. %s\n54. %s\n55. %s\n56. %s\n", string,
							ItemName(1, 136), ItemName(1, 137), ItemName(1, 138), ItemName(1, 139), ItemName(1, 140), ItemName(1, 141), ItemName(1, 142),
							ItemName(1, 143), ItemName(1, 145), ItemName(1, 146), ItemName(1,  148), ItemName(1, 149), ItemName(1, 150), ItemName(1, 151)
						);
						format(string, sizeof(string), "%s57. %s\n58. %s\n59. %s\n60. %s\n61. %s\n62. %s\n63. %s\n64. %s\n65. %s\n66. %s\n67. %s\n68. %s\n69. %s\n70. %s\n", string,
							ItemName(1, 152), ItemName(1, 153), ItemName(1, 154), ItemName(1, 155), ItemName(1, 156), ItemName(1, 157), ItemName(1, 158),
							ItemName(1, 159), ItemName(1, 160), ItemName(1, 161), ItemName(1, 162), ItemName(1, 165)
						);
						format(string, sizeof(string), "%s71. %s\n72. %s\n73. %s\n74. %s\n75. %s\n76. %s\n77. %s\n78. %s\n79. %s\n80. %s\n81. %s\n82. %s\n83. %s\n84. %s\n", string,
							ItemName(1, 166), ItemName(1, 173), ItemName(1, 175), ItemName(1, 176), ItemName(0, 0), ItemName(0, 0), ItemName(0, 0),
							ItemName(0, 0), ItemName(0, 0), ItemName(0, 0), ItemName(0, 0), ItemName(0, 0)
						);
						ShowPlayerDialog(playerid, DIALOG_BUY_6P, DIALOG_STYLE_LIST, "Sklep", string, "Wybierz", "Wróæ");
						return 1;
					}
					case 1:
					{
						gBuyBusinessItemListID[playerid] = 1;
						format(string, sizeof(string), "1. %s\n2. %s\n3. %s\n4. %s\n5. %s\n6. %s\n7. %s\n8. %s\n9. %s\n10. %s",
							ItemName(3, 1), ItemName(3, 2), ItemName(3, 8), ItemName(3, 12), ItemName(3,13), ItemName(3, 14), ItemName(3, 15), ItemName(3, 3),
							ItemName(3, 22), ItemName(3, 24)
						);
						ShowPlayerDialog(playerid, DIALOG_BUY_6P, DIALOG_STYLE_LIST, "Sklep 24/7", string, "Wybierz", "Wróæ");
						return 1;
					}
					case 2:
					{
						gBuyBusinessItemListID[playerid] = 2;
						format(string, sizeof(string), "1. %s\n2. %s\n3. %s\n4. %s\n5. %s\n6. %s\n7. %s\n8. %s",
							ItemName(6, 1), ItemName(6, 2), ItemName(6, 3), ItemName(6, 4), ItemName(6, 5), ItemName(6, 6), ItemName(6, 7), ItemName(6, 8)
						);
						ShowPlayerDialog(playerid, DIALOG_BUY_6P, DIALOG_STYLE_LIST, "Sklep 24/7", string, "Wybierz", "Wróæ");
						return 1;
					}
					case 3:
					{
						gBuyBusinessItemListID[playerid] = 3;
						strdel(string, 0, sizeof(string));
						for(new i = 1; i <= ItemCountOfType(9); i++)
						{
							format(string2, sizeof(string2), "%d. %s\n", i, ItemName(9, i));
							strcat(string, string2);
						}
						ShowPlayerDialog(playerid, DIALOG_BUY_6P, DIALOG_STYLE_LIST, "Sklep 24/7", string, "Wybierz", "Wróæ");
					}
					case 4:
					{
						gBuyBusinessItemListID[playerid] = 4;
						strdel(string, 0, sizeof(string));
						for(new i = 1; i <= ItemCountOfType(8); i++)
						{
							format(string2, sizeof(string2), "%d. %s\n", i, ItemName(8, i));
							strcat(string, string2);
						}
						ShowPlayerDialog(playerid, DIALOG_BUY_6P, DIALOG_STYLE_LIST, "Sklep 24/7", string, "Wybierz", "Wróæ");
					}
					case 5:
					{
						gBuyBusinessItemListID[playerid] = 5;
						strdel(string, 0, sizeof(string));
						for(new i = 1; i <= ItemCountOfType(7); i++)
						{
							format(string2, sizeof(string2), "%d. %s\n", i, ItemName(7, i));
							strcat(string, string2);
						}
						ShowPlayerDialog(playerid, DIALOG_BUY_6P, DIALOG_STYLE_LIST, "Sklep 24/7", string, "Wybierz", "Wróæ");
					}
				}
			}
			else
			{
				gListOverItem[playerid] = 1;
				goto BuyMenu;
			}
		}
		case DIALOG_BUY_5P_BAR:								// Change product
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						gBuyBusinessItemListID[playerid] = 0;
						format(string, sizeof(string), "1. %s\n2. %s\n3. %s\n4. %s\n5. %s\n6. %s\n7. %s\n8. %s\n9. %s\n10. %s\n11. %s",
							ItemName(1, 12), ItemName(1, 125), ItemName(1, 126), ItemName(1, 127), ItemName(6, 1), ItemName(6, 2),
							ItemName(6, 3), ItemName(6, 4), ItemName(6, 5), ItemName(6, 6), ItemName(6, 7)
						);
						ShowPlayerDialog(playerid, DIALOG_BUY_6P_BAR, DIALOG_STYLE_LIST, "Sklep 24/7", string, "Wybierz", "Wróæ");
						return 1;
					}
				}
			}
			else
			{
				gListOverItem[playerid] = 1;
				goto BuyMenu;
			}
		}
		case DIALOG_BUY_6P_BAR:								// Change product
		{
			if(response)
			{
				new i = gBuyBusinessID[playerid];
				new prodID, prodType;
				if(gBuyBusinessItemListID[playerid] == 0)
				{
					switch(listitem)
					{
						case 0:
						{
							prodID = 12;
							prodType = 1;
						}
						case 1:
						{
							prodID = 125;
							prodType = 1;
						}
						case 2:
						{
							prodID = 126;
							prodType = 1;
						}
						case 3:
						{
							prodID = 127;
							prodType = 1;
						}
						case 4:
						{
							prodID = 1;
							prodType = 6;
						}
						case 5:
						{
							prodID = 2;
							prodType = 6;
						}
						case 6:
						{
							prodID = 3;
							prodType = 6;
						}
						case 7:
						{
							prodID = 4;
							prodType = 6;
						}
						case 8:
						{
							prodID = 5;
							prodType = 6;
						}
						case 9:
						{
							prodID = 6;
							prodType = 6;
						}
						case 10:
						{
							prodID = 7;
							prodType = 6;
						}
					}
				}
				switch(gListItem[playerid])
				{
					case 0:
					{
						if(Businesses[i][Product1] != prodID || Businesses[i][Product1type] != prodType)
						{
							Businesses[i][Product1] = prodID;
							Businesses[i][Product1type] = prodType;
							Businesses[i][Product1count] = 0;
							SaveBizData(i, "Product1");
							SaveBizData(i, "Product1type");
							SaveBizData(i, "Product1count");
						}
					}
					case 1:
					{
						if(Businesses[i][Product2] != prodID || Businesses[i][Product2type] != prodType)
						{
							Businesses[i][Product2] = prodID;
							Businesses[i][Product2type] = prodType;
							Businesses[i][Product2count] = 0;
							SaveBizData(i, "Product2");
							SaveBizData(i, "Product2type");
							SaveBizData(i, "Product2count");
						}
					}
					case 2:
					{
						if(Businesses[i][Product3] != prodID || Businesses[i][Product3type] != prodType)
						{
							Businesses[i][Product3] = prodID;
							Businesses[i][Product3type] = prodType;
							Businesses[i][Product3count] = 0;
							SaveBizData(i, "Product3");
							SaveBizData(i, "Product3type");
							SaveBizData(i, "Product3count");
						}
					}
					case 3:
					{
						if(Businesses[i][Product4] != prodID || Businesses[i][Product4type] != prodType)
						{
							Businesses[i][Product4] = prodID;
							Businesses[i][Product4type] = prodType;
							Businesses[i][Product4count] = 0;
							SaveBizData(i, "Product4");
							SaveBizData(i, "Product4type");
							SaveBizData(i, "Product4count");
						}
					}
					case 4:
					{
						if(Businesses[i][Product5] != prodID || Businesses[i][Product5type] != prodType)
						{
							Businesses[i][Product5] = prodID;
							Businesses[i][Product5type] = prodType;
							Businesses[i][Product5count] = 0;
							SaveBizData(i, "Product5");
							SaveBizData(i, "Product5type");
							SaveBizData(i, "Product5count");
						}
					}
					case 5:
					{
						if(Businesses[i][Product6] != prodID || Businesses[i][Product6type] != prodType)
						{
							Businesses[i][Product6] = prodID;
							Businesses[i][Product6type] = prodType;
							Businesses[i][Product6count] = 0;
							SaveBizData(i, "Product6");
							SaveBizData(i, "Product6type");
							SaveBizData(i, "Product6count");
						}
					}
					case 6:
					{
						if(Businesses[i][Product7] != prodID || Businesses[i][Product7type] != prodType)
						{
							Businesses[i][Product7] = prodID;
							Businesses[i][Product7type] = prodType;
							Businesses[i][Product7count] = 0;
							SaveBizData(i, "Product7");
							SaveBizData(i, "Product7type");
							SaveBizData(i, "Product7count");
						}
					}
					case 7:
					{
						if(Businesses[i][Product8] != prodID || Businesses[i][Product8type] != prodType)
						{
							Businesses[i][Product8] = prodID;
							Businesses[i][Product8type] = prodType;
							Businesses[i][Product8count] = 0;
							SaveBizData(i, "Product8");
							SaveBizData(i, "Product8type");
							SaveBizData(i, "Product8count");
						}
					}
					case 8:
					{
						if(Businesses[i][Product9] != prodID || Businesses[i][Product9type] != prodType)
						{
							Businesses[i][Product9] = prodID;
							Businesses[i][Product9type] = prodType;
							Businesses[i][Product9count] = 0;
							SaveBizData(i, "Product9");
							SaveBizData(i, "Product9type");
							SaveBizData(i, "Product9count");
						}
					}
					case 9:
					{
						if(Businesses[i][Product10] != prodID || Businesses[i][Product10type] != prodType)
						{
							Businesses[i][Product10] = prodID;
							Businesses[i][Product10type] = prodType;
							Businesses[i][Product10count] = 0;
							SaveBizData(i, "Product10");
							SaveBizData(i, "Product10type");
							SaveBizData(i, "Product10count");
						}
					}
				}
				changed:
				ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Sklep 24/7", "Zmieni³eœ produkt !", "Wróæ", "");
				return 1;
			}
			else
			{
				gListOverItem[playerid] = 1;
				goto BuyMenu;
			}
		}
		case DIALOG_BUY_6P:									// Change product
		{
			if(response)
			{
				new i = gBuyBusinessID[playerid];
				new prodID, prodType;
				if(gBuyBusinessItemListID[playerid] == 0)
				{
					switch(listitem)
					{
						case 0:
						{
							prodID = 1;
							prodType = 1;
						}
						case 1:
						{
							prodID = 2;
							prodType = 1;
						}
						case 2:
						{
							prodID = 4;
							prodType = 1;
						}
						case 3:
						{
							prodID = 5;
							prodType = 1;
						}
						case 4:
						{
							prodID = 6;
							prodType = 1;
						}
						case 5:
						{
							prodID = 7;
							prodType = 1;
						}
						case 6:
						{
							prodID = 8;
							prodType = 1;
						}
						case 7:
						{
							prodID = 9;
							prodType = 1;
						}
						case 8:
						{
							prodID = 10;
							prodType = 1;
						}
						case 9:
						{
							prodID = 11;
							prodType = 1;
						}
						case 10:
						{
							prodID = 12;
							prodType = 1;
						}
						case 11:
						{
							prodID = 105;
							prodType = 1;
						}
						case 12:
						{
							prodID = 106;
							prodType = 1;
						}
						case 13:
						{
							prodID = 107;
							prodType = 1;
						}
						case 14:
						{
							prodID = 108;
							prodType = 1;
						}
						case 15:
						{
							prodID = 109;
							prodType = 1;
						}
						case 16:
						{
							prodID = 110;
							prodType = 1;
						}
						case 17:
						{
							prodID = 111;
							prodType = 1;
						}
						case 18:
						{
							prodID = 112;
							prodType = 1;
						}
						case 19:
						{
							prodID = 113;
							prodType = 1;
						}
						case 20:
						{
							prodID = 114;
							prodType = 1;
						}
						case 21:
						{
							prodID = 115;
							prodType = 1;
						}
						case 22:
						{
							prodID = 116;
							prodType = 1;
						}
						case 23:
						{
							prodID = 117;
							prodType = 1;
						}
						case 24:
						{
							prodID = 118;
							prodType = 1;
						}
						case 25:
						{
							prodID = 119;
							prodType = 1;
						}
						case 26:
						{
							prodID = 120;
							prodType = 1;
						}
						case 27:
						{
							prodID = 121;
							prodType = 1;
						}
						case 28:
						{
							prodID = 122;
							prodType = 1;
						}
						case 29:
						{
							prodID = 123;
							prodType = 1;
						}
						case 30:
						{
							prodID = 124;
							prodType = 1;
						}
						case 31:
						{
							prodID = 125;
							prodType = 1;
						}
						case 32:
						{
							prodID = 126;
							prodType = 1;
						}
						case 33:
						{
							prodID = 127;
							prodType = 1;
						}
						case 34:
						{
							prodID = 128;
							prodType = 1;
						}
						case 35:
						{
							prodID = 129;
							prodType = 1;
						}
						case 36:
						{
							prodID = 130;
							prodType = 1;
						}
						case 37:
						{
							prodID = 131;
							prodType = 1;
						}
						case 38:
						{
							prodID = 132;
							prodType = 1;
						}
						case 39:
						{
							prodID = 133;
							prodType = 1;
						}
						case 40:
						{
							prodID = 134;
							prodType = 1;
						}
						case 41:
						{
							prodID = 135;
							prodType = 1;
						}
						case 42:
						{
							prodID = 136;
							prodType = 1;
						}
						case 43:
						{
							prodID = 137;
							prodType = 1;
						}
						case 44:
						{
							prodID = 138;
							prodType = 1;
						}
						case 45:
						{
							prodID = 139;
							prodType = 1;
						}
						case 46:
						{
							prodID = 140;
							prodType = 1;
						}
						case 47:
						{
							prodID = 141;
							prodType = 1;
						}
						case 48:
						{
							prodID = 142;
							prodType = 1;
						}
						case 49:
						{
							prodID = 143;
							prodType = 1;
						}
						case 50:
						{
							prodID = 145;
							prodType = 1;
						}
						case 51:
						{
							prodID = 146;
							prodType = 1;
						}
						case 52:
						{
							prodID = 148;
							prodType = 1;
						}
						case 53:
						{
							prodID = 149;
							prodType = 1;
						}
						case 54:
						{
							prodID = 150;
							prodType = 1;
						}
						case 55:
						{
							prodID = 151;
							prodType = 1;
						}
						case 56:
						{
							prodID = 152;
							prodType = 1;
						}
						case 57:
						{
							prodID = 153;
							prodType = 1;
						}
						case 58:
						{
							prodID = 154;
							prodType = 1;
						}
						case 59:
						{
							prodID = 155;
							prodType = 1;
						}
						case 60:
						{
							prodID = 156;
							prodType = 1;
						}
						case 61:
						{
							prodID = 157;
							prodType = 1;
						}
						case 62:
						{
							prodID = 158;
							prodType = 1;
						}
						case 63:
						{
							prodID = 159;
							prodType = 1;
						}
						case 64:
						{
							prodID = 160;
							prodType = 1;
						}
						case 65:
						{
							prodID = 161;
							prodType = 1;
						}
						case 66:
						{
							prodID = 162;
							prodType = 1;
						}
						case 67:
						{
							prodID = 166;
							prodType = 1;
						}
					}
				}
				else if(gBuyBusinessItemListID[playerid] == 1)
				{
					switch(listitem)
					{
						case 0:
						{
							prodID = 1;
							prodType = 3;
						}
						case 1:
						{
							prodID = 2;
							prodType = 3;
						}
						case 2:
						{
							prodID = 8;
							prodType = 3;
						}
						case 3:
						{
							prodID = 12;
							prodType = 3;
						}
						case 4:
						{
							prodID = 13;
							prodType = 3;
						}
						case 5:
						{
							prodID = 14;
							prodType = 3;
						}
						case 6:
						{
							prodID = 15;
							prodType = 3;
						}
						case 7:
						{
							prodID = 3;
							prodType = 3;
						}
						case 8:
						{
							prodID = 22;
							prodType = 3;
						}
						case 9:
						{
							prodID = 24;
							prodType = 3;
						}
					}
				}
				else if(gBuyBusinessItemListID[playerid] == 2)
				{
					switch(listitem)
					{
						case 0:
						{
							prodID = 1;
							prodType = 6;
						}
						case 1:
						{
							prodID = 2;
							prodType = 6;
						}
						case 2:
						{
							prodID = 3;
							prodType = 6;
						}
						case 3:
						{
							prodID = 4;
							prodType = 6;
						}
						case 4:
						{
							prodID = 5;
							prodType = 6;
						}
						case 5:
						{
							prodID = 6;
							prodType = 6;
						}
						case 6:
						{
							prodID = 7;
							prodType = 6;
						}
						case 7:
						{
							prodID = 8;
							prodType = 6;
						}
					}
				}
				else if(gBuyBusinessItemListID[playerid] == 3)
				{
					BizSlotSetItem(i, gListItem[playerid]+1, 9, listitem+1);
					goto changed;
				}
				else if(gBuyBusinessItemListID[playerid] == 4)
				{
					BizSlotSetItem(i, gListItem[playerid]+1, 8, listitem+1);
					goto changed;
				}
				else if(gBuyBusinessItemListID[playerid] == 5)
				{
					BizSlotSetItem(i, gListItem[playerid]+1, 7, listitem+1);
					goto changed;
				}
				switch(gListItem[playerid])
				{
					case 0:
					{
						if(Businesses[i][Product1] != prodID || Businesses[i][Product1type] != prodType)
						{
							Businesses[i][Product1] = prodID;
							Businesses[i][Product1type] = prodType;
							Businesses[i][Product1count] = 0;
							SaveBizData(i, "Product1");
							SaveBizData(i, "Product1type");
							SaveBizData(i, "Product1count");
						}
					}
					case 1:
					{
						if(Businesses[i][Product2] != prodID || Businesses[i][Product2type] != prodType)
						{
							Businesses[i][Product2] = prodID;
							Businesses[i][Product2type] = prodType;
							Businesses[i][Product2count] = 0;
							SaveBizData(i, "Product2");
							SaveBizData(i, "Product2type");
							SaveBizData(i, "Product2count");
						}
					}
					case 2:
					{
						if(Businesses[i][Product3] != prodID || Businesses[i][Product3type] != prodType)
						{
							Businesses[i][Product3] = prodID;
							Businesses[i][Product3type] = prodType;
							Businesses[i][Product3count] = 0;
							SaveBizData(i, "Product3");
							SaveBizData(i, "Product3type");
							SaveBizData(i, "Product3count");
						}
					}
					case 3:
					{
						if(Businesses[i][Product4] != prodID || Businesses[i][Product4type] != prodType)
						{
							Businesses[i][Product4] = prodID;
							Businesses[i][Product4type] = prodType;
							Businesses[i][Product4count] = 0;
							SaveBizData(i, "Product4");
							SaveBizData(i, "Product4type");
							SaveBizData(i, "Product4count");
						}
					}
					case 4:
					{
						if(Businesses[i][Product5] != prodID || Businesses[i][Product5type] != prodType)
						{
							Businesses[i][Product5] = prodID;
							Businesses[i][Product5type] = prodType;
							Businesses[i][Product5count] = 0;
							SaveBizData(i, "Product5");
							SaveBizData(i, "Product5type");
							SaveBizData(i, "Product5count");
						}
					}
					case 5:
					{
						if(Businesses[i][Product6] != prodID || Businesses[i][Product6type] != prodType)
						{
							Businesses[i][Product6] = prodID;
							Businesses[i][Product6type] = prodType;
							Businesses[i][Product6count] = 0;
							SaveBizData(i, "Product6");
							SaveBizData(i, "Product6type");
							SaveBizData(i, "Product6count");
						}
					}
					case 6:
					{
						if(Businesses[i][Product7] != prodID || Businesses[i][Product7type] != prodType)
						{
							Businesses[i][Product7] = prodID;
							Businesses[i][Product7type] = prodType;
							Businesses[i][Product7count] = 0;
							SaveBizData(i, "Product7");
							SaveBizData(i, "Product7type");
							SaveBizData(i, "Product7count");
						}
					}
					case 7:
					{
						if(Businesses[i][Product8] != prodID || Businesses[i][Product8type] != prodType)
						{
							Businesses[i][Product8] = prodID;
							Businesses[i][Product8type] = prodType;
							Businesses[i][Product8count] = 0;
							SaveBizData(i, "Product8");
							SaveBizData(i, "Product8type");
							SaveBizData(i, "Product8count");
						}
					}
					case 8:
					{
						if(Businesses[i][Product9] != prodID || Businesses[i][Product9type] != prodType)
						{
							Businesses[i][Product9] = prodID;
							Businesses[i][Product9type] = prodType;
							Businesses[i][Product9count] = 0;
							SaveBizData(i, "Product9");
							SaveBizData(i, "Product9type");
							SaveBizData(i, "Product9count");
						}
					}
					case 9:
					{
						if(Businesses[i][Product10] != prodID || Businesses[i][Product10type] != prodType)
						{
							Businesses[i][Product10] = prodID;
							Businesses[i][Product10type] = prodType;
							Businesses[i][Product10count] = 0;
							SaveBizData(i, "Product10");
							SaveBizData(i, "Product10type");
							SaveBizData(i, "Product10count");
						}
					}
				}
				changed:
				ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Sklep 24/7", "Zmieni³eœ produkt !", "Wróæ", "");
				return 1;
			}
			else
			{
				gListOverItem[playerid] = 1;
				goto BuyMenu;
			}
		}
		case DIALOG_BUY_7P:									// Change product buy price
		{
			if(response)
			{
				if(strval(inputtext) < 0)
				{
					ShowPlayerDialog(playerid, DIALOG_BUY_6P, DIALOG_STYLE_MSGBOX, "Sklep 24/7", "Poda³eœ niepoprwn¹ wartoœæ", "Wróæ", "");
					return 1;
				}
				new i = gBuyBusinessID[playerid];
				new type, id;
				switch(gListItem[playerid])
				{
					case 0:
					{
						Businesses[i][Product1buy] = strval(inputtext);
						type = Businesses[i][Product1type];
						id = Businesses[i][Product1];
						SaveBizData(i, "Product1buy");
					}
					case 1:
					{
						Businesses[i][Product2buy] = strval(inputtext);
						SaveBizData(i, "Product2buy");
						type = Businesses[i][Product2type];
						id = Businesses[i][Product2];
					}
					case 2:
					{
						Businesses[i][Product3buy] = strval(inputtext);
						SaveBizData(i, "Product3buy");
						type = Businesses[i][Product3type];
						id = Businesses[i][Product3];
					}
					case 3:
					{
						Businesses[i][Product4buy] = strval(inputtext);
						SaveBizData(i, "Product4buy");
						type = Businesses[i][Product4type];
						id = Businesses[i][Product4];
					}
					case 4:
					{
						Businesses[i][Product5buy] = strval(inputtext);
						SaveBizData(i, "Product5buy");
						type = Businesses[i][Product5type];
						id = Businesses[i][Product5];
					}
					case 5:
					{
						Businesses[i][Product6buy] = strval(inputtext);
						SaveBizData(i, "Product6buy");
						type = Businesses[i][Product6type];
						id = Businesses[i][Product6];
					}
					case 6:
					{
						Businesses[i][Product7buy] = strval(inputtext);
						SaveBizData(i, "Product7buy");
						type = Businesses[i][Product7type];
						id = Businesses[i][Product7];
					}
					case 7:
					{
						Businesses[i][Product8buy] = strval(inputtext);
						SaveBizData(i, "Product8buy");
						type = Businesses[i][Product8type];
						id = Businesses[i][Product8];
					}
					case 8:
					{
						Businesses[i][Product9buy] = strval(inputtext);
						SaveBizData(i, "Product9buy");
						type = Businesses[i][Product9type];
						id = Businesses[i][Product9];
					}
					case 9:
					{
						Businesses[i][Product10buy] = strval(inputtext);
						SaveBizData(i, "Product10buy");
						type = Businesses[i][Product10type];
						id = Businesses[i][Product10];
					}
				}
				if(Businesses[i][Product1type] == type && Businesses[i][Product1] == id && gListItem[playerid] != 0)
				{
					Businesses[i][Product1buy] = strval(inputtext);
					SaveBizData(i, "Product1buy");
				}
				if(Businesses[i][Product2type] == type && Businesses[i][Product2] == id && gListItem[playerid] != 1)
				{
					Businesses[i][Product2buy] = strval(inputtext);
					SaveBizData(i, "Product2buy");
				}
				if(Businesses[i][Product3type] == type && Businesses[i][Product3] == id && gListItem[playerid] != 2)
				{
					Businesses[i][Product3buy] = strval(inputtext);
					SaveBizData(i, "Product3buy");
				}
				if(Businesses[i][Product4type] == type && Businesses[i][Product4] == id && gListItem[playerid] != 3)
				{
					Businesses[i][Product4buy] = strval(inputtext);
					SaveBizData(i, "Product4buy");
				}
				if(Businesses[i][Product5type] == type && Businesses[i][Product5] == id && gListItem[playerid] != 4)
				{
					Businesses[i][Product5buy] = strval(inputtext);
					SaveBizData(i, "Product5buy");
				}
				if(Businesses[i][Product6type] == type && Businesses[i][Product6] == id && gListItem[playerid] != 5)
				{
					Businesses[i][Product6buy] = strval(inputtext);
					SaveBizData(i, "Product6buy");
				}
				if(Businesses[i][Product7type] == type && Businesses[i][Product7] == id && gListItem[playerid] != 6)
				{
					Businesses[i][Product7buy] = strval(inputtext);
					SaveBizData(i, "Product7buy");
				}
				if(Businesses[i][Product8type] == type && Businesses[i][Product8] == id && gListItem[playerid] != 7)
				{
					Businesses[i][Product8buy] = strval(inputtext);
					SaveBizData(i, "Product8buy");
				}
				if(Businesses[i][Product9type] == type && Businesses[i][Product9] == id && gListItem[playerid] != 8)
				{
					Businesses[i][Product9buy] = strval(inputtext);
					SaveBizData(i, "Product9buy");
				}
				if(Businesses[i][Product10type] == type && Businesses[i][Product10] == id && gListItem[playerid] != 9)
				{
					Businesses[i][Product10buy] = strval(inputtext);
					SaveBizData(i, "Product10buy");
				}
				ShowPlayerDialog(playerid, DIALOG_BUY_2P_MSG, DIALOG_STYLE_MSGBOX, "Sklep 24/7", "Cena skupu itemu zosta³a zmieniona !", "Wróæ", "");
				return 1;
			}
		}
		case DIALOG_BUY_8P:									// Wrong value of buy price
		{
			goto productBuyPrice;
			return 1;
		}
		case DIALOG_ITEM_FACTORY_1:							// How many items ?
		{
			if(response)
			{
				gListItem[playerid] = listitem;
				new i = gBuyItemFactoryID[playerid];
				switch(gListItem[playerid])
				{
					case 0:
					{
						if(gItemFactories[i][item1type] == 0)
						{
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, "Nie wybra³eœ produktu !", "Wróæ", "");
							return 1;
						}
					}
					case 1:
					{
						if(gItemFactories[i][item2type] == 0)
						{
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, "Nie wybra³eœ produktu !", "Wróæ", "");
							return 1;
						}
					}
					case 2:
					{
						if(gItemFactories[i][item3type] == 0)
						{
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, "Nie wybra³eœ produktu !", "Wróæ", "");
							return 1;
						}
					}
					case 3:
					{
						if(gItemFactories[i][item4type] == 0)
						{
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, "Nie wybra³eœ produktu !", "Wróæ", "");
							return 1;
						}
					}
					case 4:
					{
						if(gItemFactories[i][item5type] == 0)
						{
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, "Nie wybra³eœ produktu !", "Wróæ", "");
							return 1;
						}
					}
					case 5:
					{
						if(gItemFactories[i][item6type] == 0)
						{
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, "Nie wybra³eœ produktu !", "Wróæ", "");
							return 1;
						}
					}
					case 6:
					{
						if(gItemFactories[i][item7type] == 0)
						{
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, "Nie wybra³eœ produktu !", "Wróæ", "");
							return 1;
						}
					}
					case 7:
					{
						if(gItemFactories[i][item8type] == 0)
						{
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, "Nie wybra³eœ produktu !", "Wróæ", "");
							return 1;
						}
					}
					case 8:
					{
						if(gItemFactories[i][item9type] == 0)
						{
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, "Nie wybra³eœ produktu !", "Wróæ", "");
							return 1;
						}
					}
					case 9:
					{
						if(gItemFactories[i][item10type] == 0)
						{
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, "Nie wybra³eœ produktu !", "Wróæ", "");
							return 1;
						}
					}
				}
				itemFactoryInput:
				format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
				ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_2, DIALOG_STYLE_INPUT, string2, DIALOG_ITEM_FACTORY_HOW_MUCH, "Dalej", "Wróæ");
				return 1;
			}
			return 1;
		}
		case DIALOG_ITEM_FACTORY_2:							// Buy confirmation
		{
			if(response)
			{
				new i = gBuyItemFactoryID[playerid];
				if(strval(inputtext) <= 0)
				{
					format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
					ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_3, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_WRONG_VALUE, "Wróæ", "");
					return 1;
				}
				switch(gListItem[playerid])
				{
					case 0:
					{
						if(strval(inputtext) < gItemFactories[i][item1minBuy])
						{
							format(string, sizeof(string), DIALOG_ITEM_FACTORY_MIN_BUY, gItemFactories[i][item1minBuy]);
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_3, DIALOG_STYLE_MSGBOX, string2, string, "Wróæ", "");
							return 1;
						}
						if(gItemFactories[i][item1price] <= 0)
						{
							format(string, sizeof(string), "Nie mo¿esz kupiæ tego produktu.");
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_3, DIALOG_STYLE_MSGBOX, string2, string, "Wróæ", "");
							return 1;
						}
						gBuyItemFactoryItemCount[playerid] = strval(inputtext);
						format(string, sizeof(string), DIALOG_ITEM_FACTORY_B_CONFIRM, strval(inputtext), gItemFactories[i][item1price]*strval(inputtext));
						format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
						ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_5, DIALOG_STYLE_MSGBOX, string2, string, "Kup", "Anuluj");
						return 1;
					}
					case 1:
					{
						if(strval(inputtext) < gItemFactories[i][item2minBuy])
						{
							format(string, sizeof(string), DIALOG_ITEM_FACTORY_MIN_BUY, gItemFactories[i][item2minBuy]);
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_3, DIALOG_STYLE_MSGBOX, string2, string, "Wróæ", "");
							return 1;
						}
						if(gItemFactories[i][item2price] <= 0)
						{
							format(string, sizeof(string), "Nie mo¿esz kupiæ tego produktu.");
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_3, DIALOG_STYLE_MSGBOX, string2, string, "Wróæ", "");
							return 1;
						}
						gBuyItemFactoryItemCount[playerid] = strval(inputtext);
						format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
						format(string, sizeof(string), DIALOG_ITEM_FACTORY_B_CONFIRM, strval(inputtext), gItemFactories[i][item2price]*strval(inputtext));
						ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_5, DIALOG_STYLE_MSGBOX, string2, string, "Kup", "Anuluj");
						return 1;
					}
					case 2:
					{
						if(strval(inputtext) < gItemFactories[i][item3minBuy])
						{
							format(string, sizeof(string), DIALOG_ITEM_FACTORY_MIN_BUY, gItemFactories[i][item3minBuy]);
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_3, DIALOG_STYLE_MSGBOX, string2, string, "Wróæ", "");
							return 1;
						}
						if(gItemFactories[i][item3price] <= 0)
						{
							format(string, sizeof(string), "Nie mo¿esz kupiæ tego produktu.");
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_3, DIALOG_STYLE_MSGBOX, string2, string, "Wróæ", "");
							return 1;
						}
						gBuyItemFactoryItemCount[playerid] = strval(inputtext);
						format(string, sizeof(string), DIALOG_ITEM_FACTORY_B_CONFIRM, strval(inputtext), gItemFactories[i][item3price]*strval(inputtext));
						format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
						ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_5, DIALOG_STYLE_MSGBOX, string2, string, "Kup", "Anuluj");
						return 1;
					}
					case 3:
					{
						if(strval(inputtext) < gItemFactories[i][item4minBuy])
						{
							format(string, sizeof(string), DIALOG_ITEM_FACTORY_MIN_BUY, gItemFactories[i][item4minBuy]);
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_3, DIALOG_STYLE_MSGBOX, string2, string, "Wróæ", "");
							return 1;
						}
						if(gItemFactories[i][item4price] <= 0)
						{
							format(string, sizeof(string), "Nie mo¿esz kupiæ tego produktu.");
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_3, DIALOG_STYLE_MSGBOX, string2, string, "Wróæ", "");
							return 1;
						}
						gBuyItemFactoryItemCount[playerid] = strval(inputtext);
						format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
						format(string, sizeof(string), DIALOG_ITEM_FACTORY_B_CONFIRM, strval(inputtext), gItemFactories[i][item4price]*strval(inputtext));
						ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_5, DIALOG_STYLE_MSGBOX, string2, string, "Kup", "Anuluj");
						return 1;
					}
					case 4:
					{
						if(strval(inputtext) < gItemFactories[i][item5minBuy])
						{
							format(string, sizeof(string), DIALOG_ITEM_FACTORY_MIN_BUY, gItemFactories[i][item5minBuy]);
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_3, DIALOG_STYLE_MSGBOX, string2, string, "Wróæ", "");
							return 1;
						}
						if(gItemFactories[i][item5price] <= 0)
						{
							format(string, sizeof(string), "Nie mo¿esz kupiæ tego produktu.");
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_3, DIALOG_STYLE_MSGBOX, string2, string, "Wróæ", "");
							return 1;
						}
						gBuyItemFactoryItemCount[playerid] = strval(inputtext);
						format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
						format(string, sizeof(string), DIALOG_ITEM_FACTORY_B_CONFIRM, strval(inputtext), gItemFactories[i][item5price]*strval(inputtext));
						ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_5, DIALOG_STYLE_MSGBOX, string2, string, "Kup", "Anuluj");
						return 1;
					}
					case 5:
					{
						if(strval(inputtext) < gItemFactories[i][item6minBuy])
						{
							format(string, sizeof(string), DIALOG_ITEM_FACTORY_MIN_BUY, gItemFactories[i][item6minBuy]);
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_3, DIALOG_STYLE_MSGBOX, string2, string, "Wróæ", "");
							return 1;
						}
						if(gItemFactories[i][item6price] <= 0)
						{
							format(string, sizeof(string), "Nie mo¿esz kupiæ tego produktu.");
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_3, DIALOG_STYLE_MSGBOX, string2, string, "Wróæ", "");
							return 1;
						}
						gBuyItemFactoryItemCount[playerid] = strval(inputtext);
						format(string, sizeof(string), DIALOG_ITEM_FACTORY_B_CONFIRM, strval(inputtext), gItemFactories[i][item6price]*strval(inputtext));
						format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
						ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_5, DIALOG_STYLE_MSGBOX, string2, string, "Kup", "Anuluj");
						return 1;
					}
					case 6:
					{
						if(strval(inputtext) < gItemFactories[i][item7minBuy])
						{
							format(string, sizeof(string), DIALOG_ITEM_FACTORY_MIN_BUY, gItemFactories[i][item7minBuy]);
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_3, DIALOG_STYLE_MSGBOX, string2, string, "Wróæ", "");
							return 1;
						}
						if(gItemFactories[i][item7price] <= 0)
						{
							format(string, sizeof(string), "Nie mo¿esz kupiæ tego produktu.");
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_3, DIALOG_STYLE_MSGBOX, string2, string, "Wróæ", "");
							return 1;
						}
						gBuyItemFactoryItemCount[playerid] = strval(inputtext);
						format(string, sizeof(string), DIALOG_ITEM_FACTORY_B_CONFIRM, strval(inputtext), gItemFactories[i][item7price]*strval(inputtext));
						format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
						ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_5, DIALOG_STYLE_MSGBOX, string2, string, "Kup", "Anuluj");
						return 1;
					}
					case 7:
					{
						if(strval(inputtext) < gItemFactories[i][item8minBuy])
						{
							format(string, sizeof(string), DIALOG_ITEM_FACTORY_MIN_BUY, gItemFactories[i][item8minBuy]);
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_3, DIALOG_STYLE_MSGBOX, string2, string, "Wróæ", "");
							return 1;
						}
						if(gItemFactories[i][item8price] <= 0)
						{
							format(string, sizeof(string), "Nie mo¿esz kupiæ tego produktu.");
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_3, DIALOG_STYLE_MSGBOX, string2, string, "Wróæ", "");
							return 1;
						}
						gBuyItemFactoryItemCount[playerid] = strval(inputtext);
						format(string, sizeof(string), DIALOG_ITEM_FACTORY_B_CONFIRM, strval(inputtext), gItemFactories[i][item8price]*strval(inputtext));
						format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
						ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_5, DIALOG_STYLE_MSGBOX, string2, string, "Kup", "Anuluj");
						return 1;
					}
					case 8:
					{
						if(strval(inputtext) < gItemFactories[i][item9minBuy])
						{
							format(string, sizeof(string), DIALOG_ITEM_FACTORY_MIN_BUY, gItemFactories[i][item9minBuy]);
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_3, DIALOG_STYLE_MSGBOX, string2, string, "Wróæ", "");
							return 1;
						}
						if(gItemFactories[i][item9price] <= 0)
						{
							format(string, sizeof(string), "Nie mo¿esz kupiæ tego produktu.");
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_3, DIALOG_STYLE_MSGBOX, string2, string, "Wróæ", "");
							return 1;
						}
						gBuyItemFactoryItemCount[playerid] = strval(inputtext);
						format(string, sizeof(string), DIALOG_ITEM_FACTORY_B_CONFIRM, strval(inputtext), gItemFactories[i][item9price]*strval(inputtext));
						format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
						ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_5, DIALOG_STYLE_MSGBOX, string2, string, "Kup", "Anuluj");
						return 1;
					}
					case 9:
					{
						if(strval(inputtext) < gItemFactories[i][item10minBuy])
						{
							format(string, sizeof(string), DIALOG_ITEM_FACTORY_MIN_BUY, gItemFactories[i][item10minBuy]);
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_3, DIALOG_STYLE_MSGBOX, string2, string, "Wróæ", "");
							return 1;
						}
						if(gItemFactories[i][item10price] <= 0)
						{
							format(string, sizeof(string), "Nie mo¿esz kupiæ tego produktu.");
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_3, DIALOG_STYLE_MSGBOX, string2, string, "Wróæ", "");
							return 1;
						}
						gBuyItemFactoryItemCount[playerid] = strval(inputtext);
						format(string, sizeof(string), DIALOG_ITEM_FACTORY_B_CONFIRM, strval(inputtext), gItemFactories[i][item10price]*strval(inputtext));
						format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
						ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_5, DIALOG_STYLE_MSGBOX, string2, string, "Kup", "Anuluj");
						return 1;
					}
				}
			}
		}
		case DIALOG_ITEM_FACTORY_3:							// Bad input - return
		{
			goto itemFactoryInput;
			return 1;
		}
		case DIALOG_ITEM_FACTORY_4:							// Item list
		{
			itemFactoryList:
			new i = gBuyItemFactoryID[playerid];
			format(string, sizeof(string), DIALOG_ITEM_FACTORY_ITEM_LIST,
				ItemName(gItemFactories[i][item1type], gItemFactories[i][item1]),
				gItemFactories[i][item1price],
				gItemFactories[i][item1count],
				ItemName(gItemFactories[i][item2type], gItemFactories[i][item2]),
				gItemFactories[i][item2price],
				gItemFactories[i][item2count],
				ItemName(gItemFactories[i][item3type], gItemFactories[i][item3]),
				gItemFactories[i][item3price],
				gItemFactories[i][item3count],
				ItemName(gItemFactories[i][item4type], gItemFactories[i][item4]),
				gItemFactories[i][item4price],
				gItemFactories[i][item4count],
				ItemName(gItemFactories[i][item5type], gItemFactories[i][item5]),
				gItemFactories[i][item5price],
				gItemFactories[i][item5count],
				ItemName(gItemFactories[i][item6type], gItemFactories[i][item6]),
				gItemFactories[i][item6price],
				gItemFactories[i][item6count],
				ItemName(gItemFactories[i][item7type], gItemFactories[i][item7]),
				gItemFactories[i][item7price],
				gItemFactories[i][item7count],
				ItemName(gItemFactories[i][item8type], gItemFactories[i][item8]),
				gItemFactories[i][item8price],
				gItemFactories[i][item8count],
				ItemName(gItemFactories[i][item9type], gItemFactories[i][item9]),
				gItemFactories[i][item9price],
				gItemFactories[i][item9count],
				ItemName(gItemFactories[i][item10type], gItemFactories[i][item10]),
				gItemFactories[i][item10price],
				gItemFactories[i][item10count]
			);
			format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
			ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_1, DIALOG_STYLE_LIST, string2,  string, "Wybierz", "WyjdŸ");
			return 1;
		}
		case DIALOG_ITEM_FACTORY_5:							// Actual bought
		{
			if(response)
			{
				new i = gBuyItemFactoryID[playerid];
				new vehid = gBuyItemFactoryVehID[playerid];
				new vehMaxItem; // how many items can be inserted in to vehicles trunk
				switch(gListItem[playerid])
				{
					case 0:
					{
						if(gItemFactories[i][item1count] >= gBuyItemFactoryItemCount[playerid])
						{
							vehMaxItem = VehicleCountMaxItemCarry(vehid, gItemFactories[i][item1type], gItemFactories[i][item1]);
							if(gPlayerData[playerid][pCash] < gBuyItemFactoryItemCount[playerid]*gItemFactories[i][item1price])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_CASH, "Wróæ", "");
								return 1;
							}
							if(InsertVehItem(vehid, gItemFactories[i][item1type], gItemFactories[i][item1], 0, 0, 0, 0, "Puste", gBuyItemFactoryItemCount[playerid]) == 0)
							{
								format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_SPACE, "Wróæ", "");
								return 1;
							}
							if(vehMaxItem < gBuyItemFactoryItemCount[playerid])
							{
								gItemFactories[i][item1count] -= vehMaxItem;
								GivePlayerCash(playerid, -(vehMaxItem*gItemFactories[i][item1price]));
							}
							else
							{
								gItemFactories[i][item1count] -= gBuyItemFactoryItemCount[playerid];
								GivePlayerCash(playerid, -(gBuyItemFactoryItemCount[playerid]*gItemFactories[i][item1price]));
							}
							SaveItemFactory(i, "item1");
						}
						else if(gItemFactories[i][item1count] < gItemFactories[i][item1minBuy] || gItemFactories[i][item1count] == 0)
						{
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_ITEM, "Wróæ", "");
							return 1;
						}
						else
						{
							vehMaxItem = VehicleCountMaxItemCarry(vehid, gItemFactories[i][item1type], gItemFactories[i][item1]);
							if(gPlayerData[playerid][pCash] < gItemFactories[i][item1count]*gItemFactories[i][item1price])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_CASH, "Wróæ", "");
								return 1;
							}
							if(InsertVehItem(vehid, gItemFactories[i][item1type], gItemFactories[i][item1], 0, 0, 0, 0, "Puste", gItemFactories[i][item1count]) == 0)
							{
								format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_SPACE, "Wróæ", "");
								return 1;
							}
							if(vehMaxItem > gBuyItemFactoryItemCount[playerid])
							{
								GivePlayerCash(playerid, -(gItemFactories[i][item1count]*gItemFactories[i][item1price]));
								gItemFactories[i][item1count] = 0;
							}
							else if(vehMaxItem <= gBuyItemFactoryItemCount[playerid])
							{
								if(vehMaxItem > gItemFactories[i][item1count])
								{
									GivePlayerCash(playerid, -(gItemFactories[i][item1count]*gItemFactories[i][item1price]));
									gItemFactories[i][item1count] = 0;
								}
								else
								{
									GivePlayerCash(playerid, -(vehMaxItem*gItemFactories[i][item1price]));
									gItemFactories[i][item1count] -= vehMaxItem;
								}
							}
							SaveItemFactory(i, "item1");
						}
					}
					case 1:
					{
						if(gItemFactories[i][item2count] >= gBuyItemFactoryItemCount[playerid])
						{
							vehMaxItem = VehicleCountMaxItemCarry(vehid, gItemFactories[i][item2type], gItemFactories[i][item2]);
							if(gPlayerData[playerid][pCash] < gBuyItemFactoryItemCount[playerid]*gItemFactories[i][item2price])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_CASH, "Wróæ", "");
								return 1;
							}
							if(InsertVehItem(vehid, gItemFactories[i][item2type], gItemFactories[i][item2], 0, 0, 0, 0, "Puste", gBuyItemFactoryItemCount[playerid]) == 0)
							{
								format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_SPACE, "Wróæ", "");
								return 1;
							}
							if(vehMaxItem < gBuyItemFactoryItemCount[playerid])
							{
								gItemFactories[i][item2count] -= vehMaxItem;
								GivePlayerCash(playerid, -(vehMaxItem*gItemFactories[i][item2price]));
							}
							else
							{
								gItemFactories[i][item2count] -= gBuyItemFactoryItemCount[playerid];
								GivePlayerCash(playerid, -(gBuyItemFactoryItemCount[playerid]*gItemFactories[i][item2price]));
							}
							SaveItemFactory(i, "item2");
						}
						else if(gItemFactories[i][item2count] < gItemFactories[i][item2minBuy] || gItemFactories[i][item2count] == 0)
						{
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_ITEM, "Wróæ", "");
							return 1;
						}
						else
						{
							vehMaxItem = VehicleCountMaxItemCarry(vehid, gItemFactories[i][item2type], gItemFactories[i][item2]);
							if(gPlayerData[playerid][pCash] < gItemFactories[i][item2count]*gItemFactories[i][item2price])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_CASH, "Wróæ", "");
								return 1;
							}
							if(InsertVehItem(vehid, gItemFactories[i][item2type], gItemFactories[i][item2], 0, 0, 0, 0, "Puste", gItemFactories[i][item2count]) == 0)
							{
								format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_SPACE, "Wróæ", "");
								return 1;
							}
							if(vehMaxItem > gBuyItemFactoryItemCount[playerid])
							{
								GivePlayerCash(playerid, -(gItemFactories[i][item2count]*gItemFactories[i][item2price]));
								gItemFactories[i][item2count] = 0;
							}
							else if(vehMaxItem <= gBuyItemFactoryItemCount[playerid])
							{
								if(vehMaxItem > gItemFactories[i][item2count])
								{
									GivePlayerCash(playerid, -(gItemFactories[i][item2count]*gItemFactories[i][item2price]));
									gItemFactories[i][item2count] = 0;
								}
								else
								{
									GivePlayerCash(playerid, -(vehMaxItem*gItemFactories[i][item2price]));
									gItemFactories[i][item2count] -= vehMaxItem;
								}
							}
							SaveItemFactory(i, "item2");
						}
					}
					case 2:
					{
						if(gItemFactories[i][item3count] >= gBuyItemFactoryItemCount[playerid])
						{
							vehMaxItem = VehicleCountMaxItemCarry(vehid, gItemFactories[i][item3type], gItemFactories[i][item3]);
							if(gPlayerData[playerid][pCash] < gBuyItemFactoryItemCount[playerid]*gItemFactories[i][item3price])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_CASH, "Wróæ", "");
								return 1;
							}
							if(InsertVehItem(vehid, gItemFactories[i][item3type], gItemFactories[i][item3], 0, 0, 0, 0, "Puste", gBuyItemFactoryItemCount[playerid]) == 0)
							{
								format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_SPACE, "Wróæ", "");
								return 1;
							}
							if(vehMaxItem < gBuyItemFactoryItemCount[playerid])
							{
								gItemFactories[i][item3count] -= vehMaxItem;
								GivePlayerCash(playerid, -(vehMaxItem*gItemFactories[i][item3price]));
							}
							else
							{
								gItemFactories[i][item3count] -= gBuyItemFactoryItemCount[playerid];
								GivePlayerCash(playerid, -(gBuyItemFactoryItemCount[playerid]*gItemFactories[i][item3price]));
							}
							SaveItemFactory(i, "item3");
						}
						else if(gItemFactories[i][item3count] < gItemFactories[i][item3minBuy] || gItemFactories[i][item3count] == 0)
						{
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_ITEM, "Wróæ", "");
							return 1;
						}
						else
						{
							vehMaxItem = VehicleCountMaxItemCarry(vehid, gItemFactories[i][item3type], gItemFactories[i][item3]);
							if(gPlayerData[playerid][pCash] < gItemFactories[i][item3count]*gItemFactories[i][item3price])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_CASH, "Wróæ", "");
								return 1;
							}
							if(InsertVehItem(vehid, gItemFactories[i][item3type], gItemFactories[i][item3], 0, 0, 0, 0, "Puste", gItemFactories[i][item3count]) == 0)
							{
								format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_SPACE, "Wróæ", "");
								return 1;
							}
							if(vehMaxItem > gBuyItemFactoryItemCount[playerid])
							{
								GivePlayerCash(playerid, -(gItemFactories[i][item3count]*gItemFactories[i][item3price]));
								gItemFactories[i][item3count] = 0;
							}
							else if(vehMaxItem <= gBuyItemFactoryItemCount[playerid])
							{
								if(vehMaxItem > gItemFactories[i][item3count])
								{
									GivePlayerCash(playerid, -(gItemFactories[i][item3count]*gItemFactories[i][item3price]));
									gItemFactories[i][item3count] = 0;
								}
								else
								{
									GivePlayerCash(playerid, -(vehMaxItem*gItemFactories[i][item3price]));
									gItemFactories[i][item3count] -= vehMaxItem;
								}
							}
							SaveItemFactory(i, "item3");
						}
					}
					case 3:
					{
						if(gItemFactories[i][item4count] >= gBuyItemFactoryItemCount[playerid])
						{
							vehMaxItem = VehicleCountMaxItemCarry(vehid, gItemFactories[i][item4type], gItemFactories[i][item4]);
							if(gPlayerData[playerid][pCash] < gBuyItemFactoryItemCount[playerid]*gItemFactories[i][item4price])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_CASH, "Wróæ", "");
								return 1;
							}
							if(InsertVehItem(vehid, gItemFactories[i][item4type], gItemFactories[i][item4], 0, 0, 0, 0, "Puste", gBuyItemFactoryItemCount[playerid]) == 0)
							{
								format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_SPACE, "Wróæ", "");
								return 1;
							}
							if(vehMaxItem < gBuyItemFactoryItemCount[playerid])
							{
								gItemFactories[i][item4count] -= vehMaxItem;
								GivePlayerCash(playerid, -(vehMaxItem*gItemFactories[i][item4price]));
							}
							else
							{
								gItemFactories[i][item4count] -= gBuyItemFactoryItemCount[playerid];
								GivePlayerCash(playerid, -(gBuyItemFactoryItemCount[playerid]*gItemFactories[i][item4price]));
							}
							SaveItemFactory(i, "item4");
						}
						else if(gItemFactories[i][item4count] < gItemFactories[i][item4minBuy] || gItemFactories[i][item4count] == 0)
						{
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_ITEM, "Wróæ", "");
							return 1;
						}
						else
						{
							vehMaxItem = VehicleCountMaxItemCarry(vehid, gItemFactories[i][item4type], gItemFactories[i][item4]);
							if(gPlayerData[playerid][pCash] < gItemFactories[i][item4count]*gItemFactories[i][item4price])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_CASH, "Wróæ", "");
								return 1;
							}
							if(InsertVehItem(vehid, gItemFactories[i][item4type], gItemFactories[i][item4], 0, 0, 0, 0, "Puste", gItemFactories[i][item4count]) == 0)
							{
								format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_SPACE, "Wróæ", "");
								return 1;
							}
							if(vehMaxItem > gBuyItemFactoryItemCount[playerid])
							{
								GivePlayerCash(playerid, -(gItemFactories[i][item4count]*gItemFactories[i][item4price]));
								gItemFactories[i][item4count] = 0;
							}
							else if(vehMaxItem <= gBuyItemFactoryItemCount[playerid])
							{
								if(vehMaxItem > gItemFactories[i][item4count])
								{
									GivePlayerCash(playerid, -(gItemFactories[i][item4count]*gItemFactories[i][item4price]));
									gItemFactories[i][item4count] = 0;
								}
								else
								{
									GivePlayerCash(playerid, -(vehMaxItem*gItemFactories[i][item4price]));
									gItemFactories[i][item4count] -= vehMaxItem;
								}
							}
							SaveItemFactory(i, "item4");
						}
					}
					case 4:
					{
						if(gItemFactories[i][item5count] >= gBuyItemFactoryItemCount[playerid])
						{
							vehMaxItem = VehicleCountMaxItemCarry(vehid, gItemFactories[i][item5type], gItemFactories[i][item5]);
							if(gPlayerData[playerid][pCash] < gBuyItemFactoryItemCount[playerid]*gItemFactories[i][item5price])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_CASH, "Wróæ", "");
								return 1;
							}
							if(InsertVehItem(vehid, gItemFactories[i][item5type], gItemFactories[i][item5], 0, 0, 0, 0, "Puste", gBuyItemFactoryItemCount[playerid]) == 0)
							{
								format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_SPACE, "Wróæ", "");
								return 1;
							}
							if(vehMaxItem < gBuyItemFactoryItemCount[playerid])
							{
								gItemFactories[i][item5count] -= vehMaxItem;
								GivePlayerCash(playerid, -(vehMaxItem*gItemFactories[i][item5price]));
							}
							else
							{
								gItemFactories[i][item5count] -= gBuyItemFactoryItemCount[playerid];
								GivePlayerCash(playerid, -(gBuyItemFactoryItemCount[playerid]*gItemFactories[i][item5price]));
							}
							SaveItemFactory(i, "item5");
						}
						else if(gItemFactories[i][item5count] < gItemFactories[i][item5minBuy] || gItemFactories[i][item5count] == 0)
						{
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_ITEM, "Wróæ", "");
							return 1;
						}
						else
						{
							vehMaxItem = VehicleCountMaxItemCarry(vehid, gItemFactories[i][item5type], gItemFactories[i][item5]);
							if(gPlayerData[playerid][pCash] < gItemFactories[i][item5count]*gItemFactories[i][item5price])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_CASH, "Wróæ", "");
								return 1;
							}
							if(InsertVehItem(vehid, gItemFactories[i][item5type], gItemFactories[i][item5], 0, 0, 0, 0, "Puste", gItemFactories[i][item5count]) == 0)
							{
								format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_SPACE, "Wróæ", "");
								return 1;
							}
							if(vehMaxItem > gBuyItemFactoryItemCount[playerid])
							{
								GivePlayerCash(playerid, -(gItemFactories[i][item5count]*gItemFactories[i][item5price]));
								gItemFactories[i][item5count] = 0;
							}
							else if(vehMaxItem <= gBuyItemFactoryItemCount[playerid])
							{
								if(vehMaxItem > gItemFactories[i][item5count])
								{
									GivePlayerCash(playerid, -(gItemFactories[i][item5count]*gItemFactories[i][item5price]));
									gItemFactories[i][item5count] = 0;
								}
								else
								{
									GivePlayerCash(playerid, -(vehMaxItem*gItemFactories[i][item5price]));
									gItemFactories[i][item5count] -= vehMaxItem;
								}
							}
							SaveItemFactory(i, "item5");
						}
					}
					case 5:
					{
						if(gItemFactories[i][item6count] >= gBuyItemFactoryItemCount[playerid])
						{
							vehMaxItem = VehicleCountMaxItemCarry(vehid, gItemFactories[i][item6type], gItemFactories[i][item6]);
							if(gPlayerData[playerid][pCash] < gBuyItemFactoryItemCount[playerid]*gItemFactories[i][item6price])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_CASH, "Wróæ", "");
								return 1;
							}
							if(InsertVehItem(vehid, gItemFactories[i][item6type], gItemFactories[i][item6], 0, 0, 0, 0, "Puste", gBuyItemFactoryItemCount[playerid]) == 0)
							{
								format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_SPACE, "Wróæ", "");
								return 1;
							}
							if(vehMaxItem < gBuyItemFactoryItemCount[playerid])
							{
								gItemFactories[i][item6count] -= vehMaxItem;
								GivePlayerCash(playerid, -(vehMaxItem*gItemFactories[i][item6price]));
							}
							else
							{
								gItemFactories[i][item6count] -= gBuyItemFactoryItemCount[playerid];
								GivePlayerCash(playerid, -(gBuyItemFactoryItemCount[playerid]*gItemFactories[i][item6price]));
							}
							SaveItemFactory(i, "item6");
						}
						else if(gItemFactories[i][item6count] < gItemFactories[i][item6minBuy] || gItemFactories[i][item6count] == 0)
						{
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_ITEM, "Wróæ", "");
							return 1;
						}
						else
						{
							vehMaxItem = VehicleCountMaxItemCarry(vehid, gItemFactories[i][item6type], gItemFactories[i][item6]);
							if(gPlayerData[playerid][pCash] < gItemFactories[i][item6count]*gItemFactories[i][item6price])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_CASH, "Wróæ", "");
								return 1;
							}
							if(InsertVehItem(vehid, gItemFactories[i][item6type], gItemFactories[i][item6], 0, 0, 0, 0, "Puste", gItemFactories[i][item6count]) == 0)
							{
								format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_SPACE, "Wróæ", "");
								return 1;
							}
							if(vehMaxItem > gBuyItemFactoryItemCount[playerid])
							{
								GivePlayerCash(playerid, -(gItemFactories[i][item6count]*gItemFactories[i][item6price]));
								gItemFactories[i][item6count] = 0;
							}
							else if(vehMaxItem <= gBuyItemFactoryItemCount[playerid])
							{
								if(vehMaxItem > gItemFactories[i][item6count])
								{
									GivePlayerCash(playerid, -(gItemFactories[i][item6count]*gItemFactories[i][item6price]));
									gItemFactories[i][item6count] = 0;
								}
								else
								{
									GivePlayerCash(playerid, -(vehMaxItem*gItemFactories[i][item6price]));
									gItemFactories[i][item6count] -= vehMaxItem;
								}
							}
							SaveItemFactory(i, "item6");
						}
					}
					case 6:
					{
						if(gItemFactories[i][item7count] >= gBuyItemFactoryItemCount[playerid])
						{
							vehMaxItem = VehicleCountMaxItemCarry(vehid, gItemFactories[i][item7type], gItemFactories[i][item7]);
							if(gPlayerData[playerid][pCash] < gBuyItemFactoryItemCount[playerid]*gItemFactories[i][item7price])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_CASH, "Wróæ", "");
								return 1;
							}
							if(InsertVehItem(vehid, gItemFactories[i][item7type], gItemFactories[i][item7], 0, 0, 0, 0, "Puste", gBuyItemFactoryItemCount[playerid]) == 0)
							{
								format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_SPACE, "Wróæ", "");
								return 1;
							}
							if(vehMaxItem < gBuyItemFactoryItemCount[playerid])
							{
								gItemFactories[i][item7count] -= vehMaxItem;
								GivePlayerCash(playerid, -(vehMaxItem*gItemFactories[i][item7price]));
							}
							else
							{
								gItemFactories[i][item7count] -= gBuyItemFactoryItemCount[playerid];
								GivePlayerCash(playerid, -(gBuyItemFactoryItemCount[playerid]*gItemFactories[i][item7price]));
							}
							SaveItemFactory(i, "item7");
						}
						else if(gItemFactories[i][item7count] < gItemFactories[i][item7minBuy] || gItemFactories[i][item7count] == 0)
						{
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_ITEM, "Wróæ", "");
							return 1;
						}
						else
						{
							vehMaxItem = VehicleCountMaxItemCarry(vehid, gItemFactories[i][item7type], gItemFactories[i][item7]);
							if(gPlayerData[playerid][pCash] < gItemFactories[i][item7count]*gItemFactories[i][item7price])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_CASH, "Wróæ", "");
								return 1;
							}
							if(InsertVehItem(vehid, gItemFactories[i][item7type], gItemFactories[i][item7], 0, 0, 0, 0, "Puste", gItemFactories[i][item7count]) == 0)
							{
								format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_SPACE, "Wróæ", "");
								return 1;
							}
							if(vehMaxItem > gBuyItemFactoryItemCount[playerid])
							{
								GivePlayerCash(playerid, -(gItemFactories[i][item7count]*gItemFactories[i][item7price]));
								gItemFactories[i][item7count] = 0;
							}
							else if(vehMaxItem <= gBuyItemFactoryItemCount[playerid])
							{
								if(vehMaxItem > gItemFactories[i][item7count])
								{
									GivePlayerCash(playerid, -(gItemFactories[i][item7count]*gItemFactories[i][item7price]));
									gItemFactories[i][item7count] = 0;
								}
								else
								{
									GivePlayerCash(playerid, -(vehMaxItem*gItemFactories[i][item7price]));
									gItemFactories[i][item7count] -= vehMaxItem;
								}
							}
							SaveItemFactory(i, "item7");
						}
					}
					case 7:
					{
						if(gItemFactories[i][item8count] >= gBuyItemFactoryItemCount[playerid])
						{
							vehMaxItem = VehicleCountMaxItemCarry(vehid, gItemFactories[i][item8type], gItemFactories[i][item8]);
							if(gPlayerData[playerid][pCash] < gBuyItemFactoryItemCount[playerid]*gItemFactories[i][item8price])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_CASH, "Wróæ", "");
								return 1;
							}
							if(InsertVehItem(vehid, gItemFactories[i][item8type], gItemFactories[i][item8], 0, 0, 0, 0, "Puste", gBuyItemFactoryItemCount[playerid]) == 0)
							{
								format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_SPACE, "Wróæ", "");
								return 1;
							}
							if(vehMaxItem < gBuyItemFactoryItemCount[playerid])
							{
								gItemFactories[i][item8count] -= vehMaxItem;
								GivePlayerCash(playerid, -(vehMaxItem*gItemFactories[i][item8price]));
							}
							else
							{
								gItemFactories[i][item8count] -= gBuyItemFactoryItemCount[playerid];
								GivePlayerCash(playerid, -(gBuyItemFactoryItemCount[playerid]*gItemFactories[i][item8price]));
							}
							SaveItemFactory(i, "item8");
						}
						else if(gItemFactories[i][item8count] < gItemFactories[i][item8minBuy] || gItemFactories[i][item8count] == 0)
						{
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_ITEM, "Wróæ", "");
							return 1;
						}
						else
						{
							vehMaxItem = VehicleCountMaxItemCarry(vehid, gItemFactories[i][item8type], gItemFactories[i][item8]);
							if(gPlayerData[playerid][pCash] < gItemFactories[i][item8count]*gItemFactories[i][item8price])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_CASH, "Wróæ", "");
								return 1;
							}
							if(InsertVehItem(vehid, gItemFactories[i][item8type], gItemFactories[i][item8], 0, 0, 0, 0, "Puste", gItemFactories[i][item8count]) == 0)
							{
								format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_SPACE, "Wróæ", "");
								return 1;
							}
							if(vehMaxItem > gBuyItemFactoryItemCount[playerid])
							{
								GivePlayerCash(playerid, -(gItemFactories[i][item8count]*gItemFactories[i][item8price]));
								gItemFactories[i][item8count] = 0;
							}
							else if(vehMaxItem <= gBuyItemFactoryItemCount[playerid])
							{
								if(vehMaxItem > gItemFactories[i][item8count])
								{
									GivePlayerCash(playerid, -(gItemFactories[i][item8count]*gItemFactories[i][item8price]));
									gItemFactories[i][item8count] = 0;
								}
								else
								{
									GivePlayerCash(playerid, -(vehMaxItem*gItemFactories[i][item8price]));
									gItemFactories[i][item8count] -= vehMaxItem;
								}
							}
							SaveItemFactory(i, "item8");
						}
					}
					case 8:
					{
						if(gItemFactories[i][item9count] >= gBuyItemFactoryItemCount[playerid])
						{
							vehMaxItem = VehicleCountMaxItemCarry(vehid, gItemFactories[i][item9type], gItemFactories[i][item9]);
							if(gPlayerData[playerid][pCash] < gBuyItemFactoryItemCount[playerid]*gItemFactories[i][item9price])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_CASH, "Wróæ", "");
								return 1;
							}
							if(InsertVehItem(vehid, gItemFactories[i][item9type], gItemFactories[i][item9], 0, 0, 0, 0, "Puste", gBuyItemFactoryItemCount[playerid]) == 0)
							{
								format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_SPACE, "Wróæ", "");
								return 1;
							}
							if(vehMaxItem < gBuyItemFactoryItemCount[playerid])
							{
								gItemFactories[i][item9count] -= vehMaxItem;
								GivePlayerCash(playerid, -(vehMaxItem*gItemFactories[i][item9price]));
							}
							else
							{
								gItemFactories[i][item9count] -= gBuyItemFactoryItemCount[playerid];
								GivePlayerCash(playerid, -(gBuyItemFactoryItemCount[playerid]*gItemFactories[i][item9price]));
							}
							SaveItemFactory(i, "item9");
						}
						else if(gItemFactories[i][item9count] < gItemFactories[i][item9minBuy] || gItemFactories[i][item9count] == 0)
						{
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_ITEM, "Wróæ", "");
							return 1;
						}
						else
						{
							vehMaxItem = VehicleCountMaxItemCarry(vehid, gItemFactories[i][item9type], gItemFactories[i][item9]);
							if(gPlayerData[playerid][pCash] < gItemFactories[i][item9count]*gItemFactories[i][item9price])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_CASH, "Wróæ", "");
								return 1;
							}
							if(InsertVehItem(vehid, gItemFactories[i][item9type], gItemFactories[i][item9], 0, 0, 0, 0, "Puste", gItemFactories[i][item9count]) == 0)
							{
								format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_SPACE, "Wróæ", "");
								return 1;
							}
							if(vehMaxItem > gBuyItemFactoryItemCount[playerid])
							{
								GivePlayerCash(playerid, -(gItemFactories[i][item9count]*gItemFactories[i][item9price]));
								gItemFactories[i][item9count] = 0;
							}
							else if(vehMaxItem <= gBuyItemFactoryItemCount[playerid])
							{
								if(vehMaxItem > gItemFactories[i][item9count])
								{
									GivePlayerCash(playerid, -(gItemFactories[i][item9count]*gItemFactories[i][item9price]));
									gItemFactories[i][item9count] = 0;
								}
								else
								{
									GivePlayerCash(playerid, -(vehMaxItem*gItemFactories[i][item9price]));
									gItemFactories[i][item9count] -= vehMaxItem;
								}
							}
							SaveItemFactory(i, "item9");
						}
					}
					case 9:
					{
						if(gItemFactories[i][item10count] >= gBuyItemFactoryItemCount[playerid])
						{
							vehMaxItem = VehicleCountMaxItemCarry(vehid, gItemFactories[i][item10type], gItemFactories[i][item10]);
							if(gPlayerData[playerid][pCash] < gBuyItemFactoryItemCount[playerid]*gItemFactories[i][item10price])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_CASH, "Wróæ", "");
								return 1;
							}
							if(InsertVehItem(vehid, gItemFactories[i][item10type], gItemFactories[i][item10], 0, 0, 0, 0, "Puste", gBuyItemFactoryItemCount[playerid]) == 0)
							{
								format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_SPACE, "Wróæ", "");
								return 1;
							}
							if(vehMaxItem < gBuyItemFactoryItemCount[playerid])
							{
								gItemFactories[i][item10count] -= vehMaxItem;
								GivePlayerCash(playerid, -(vehMaxItem*gItemFactories[i][item10price]));
							}
							else
							{
								gItemFactories[i][item10count] -= gBuyItemFactoryItemCount[playerid];
								GivePlayerCash(playerid, -(gBuyItemFactoryItemCount[playerid]*gItemFactories[i][item10price]));
							}
							SaveItemFactory(i, "item10");
						}
						else if(gItemFactories[i][item10count] < gItemFactories[i][item10minBuy] || gItemFactories[i][item10count] == 0)
						{
							format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_ITEM, "Wróæ", "");
							return 1;
						}
						else
						{
							vehMaxItem = VehicleCountMaxItemCarry(vehid, gItemFactories[i][item10type], gItemFactories[i][item10]);
							if(gPlayerData[playerid][pCash] < gItemFactories[i][item10count]*gItemFactories[i][item10price])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_CASH, "Wróæ", "");
								return 1;
							}
							if(InsertVehItem(vehid, gItemFactories[i][item10type], gItemFactories[i][item10], 0, 0, 0, 0, "Puste", gItemFactories[i][item10count]) == 0)
							{
								format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_NO_SPACE, "Wróæ", "");
								return 1;
							}
							if(vehMaxItem > gBuyItemFactoryItemCount[playerid])
							{
								GivePlayerCash(playerid, -(gItemFactories[i][item10count]*gItemFactories[i][item10price]));
								gItemFactories[i][item10count] = 0;
							}
							else if(vehMaxItem <= gBuyItemFactoryItemCount[playerid])
							{
								if(vehMaxItem > gItemFactories[i][item10count])
								{
									GivePlayerCash(playerid, -(gItemFactories[i][item10count]*gItemFactories[i][item10price]));
									gItemFactories[i][item10count] = 0;
								}
								else
								{
									GivePlayerCash(playerid, -(vehMaxItem*gItemFactories[i][item10price]));
									gItemFactories[i][item10count] -= vehMaxItem;
								}
							}
							SaveItemFactory(i, "item10");
						}
					}
				}
				format(string2, sizeof(string2), DIALOG_ITEM_FACTORY_TITLE, gItemFactories[i][fName]);
				ShowPlayerDialog(playerid, DIALOG_ITEM_FACTORY_4, DIALOG_STYLE_MSGBOX, string2, DIALOG_ITEM_FACTORY_B_SUCCESS, "Wróæ", "");
				return 1;
			}
			else
			{
				goto itemFactoryList;
				return 1;
			}
		}
		case DIALOG_GOVERNMENT2_1:
		{
			if(response)
			{
				if(listitem == 0)
				{
					format(string, sizeof(string), "SELECT HIGH_PRIORITY `ID`, `Faction`, `Rank` FROM `samp_users` WHERE `Rank` = 1 AND (`Faction` = '0' OR `Faction` = '2' OR `Faction` = '3' OR `Faction` = '4' OR `Faction` = '9' OR `Faction` = '11')");
					wp_mysql_query(string, DEF_FAC_LEADERS, playerid, db_con1);
					return 1;
				}
			}
		}
		case DIALOG_GOVERNMENT_1:
		{
			if(response)
			{
				// Jobs
				if(listitem == 0)
				{
					ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_JOBS,DIALOG_STYLE_LIST,"Zatrudnij siê","1. Roznosiciel gazet \n2. Detektyw \n3. Prawnik \n4. Sprzedawca produktów \n5. Kierowca autobusu \n6. Kierowca œmieciarki \n7. Kierowca myjki drogowej \n8. Rolnik \n9. Mechanik \n10. Sprzedawca/ekspedient \n11. Zrezygnuj z obecnej pracy", "Wybierz","Wróæ");
				}
				// Actual taxes
				else if(listitem == 1) 
				{
					format(string, sizeof(string), ""#COLOR_BEGIN"Podatek VAT (bazowy) - "#COLOR_DEFAULT"%.4f%%\n"#COLOR_BEGIN"Podatek VAT - "#COLOR_DEFAULT"%.4f%%\n"#COLOR_BEGIN"Podatek od radia - "#COLOR_DEFAULT"$%d\n"#COLOR_BEGIN"Podatek od bogatych (próg: $%d) - "#COLOR_DEFAULT"%.4f%%\n"#COLOR_BEGIN"Podatek od biznesu - "#COLOR_DEFAULT"%.4f%%\n\n",
						DynamicTaxes[VatTaxMin],
						DynamicTaxes[VatTaxMax],
						DynamicTaxes[RadioTax],
						DynamicTaxes[TheRich],
						DynamicTaxes[RichTax],
						DynamicTaxes[BusinessTax]);
					
					format(string, sizeof(string), "%s"#COLOR_BEGIN2"Podatek od typu pojazdu:\n"#COLOR_BEGIN"Motocykle: "#COLOR_DEFAULT"1$\n"#COLOR_BEGIN"Terenowe: "#COLOR_DEFAULT"4$\n"#COLOR_BEGIN"Sportowe: "#COLOR_DEFAULT"6$\n"#COLOR_BEGIN"Ciê¿arowe: "#COLOR_DEFAULT"8$\n"#COLOR_BEGIN"Pozosta³e: "#COLOR_DEFAULT"2$\n\n"#COLOR_BEGIN"Podatek za emisje spalin: "#COLOR_DEFAULT"od 2$ do 9$",
						string);
						
					ShowPlayerDialog(playerid, DIALOG_GOVERNMENT_INFO, DIALOG_STYLE_MSGBOX, ""#COLOR_TITLE"Aktualne podatki", string, "Zamknij", "Wróæ");
				}
				// ID make
				else if(listitem == 2)
				{
					if(InsertPlayerItemEx(playerid, 3, 5, 0, 0, 0, 0, gPlayerData[playerid][pName]) == 0)
					{
						ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_INFO,DIALOG_STYLE_MSGBOX,"Informacja","Nie posiadasz miejsca na dowód !","Zamknij","Wróæ");
						return 1;
					}
					format(string, sizeof(string), "[INFO:] Otrzyma³eœ dowód od urzêdnika");
					SendClientMessage(playerid, COLOR_GREEN, string);
					format(string, sizeof(string), "odbiera dowód od urzêdnika");
					PlayerActionMessage(playerid, 15.0, string);
					format(string, sizeof(string), "[GOVERNMENT:] Identity maked by: %s for %s", "NPC", gPlayerData[playerid][pName]);
					GovermentLog(string);
					ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_INFO,DIALOG_STYLE_MSGBOX,"Informacja","Otrzyma³eœ dowód","Zamknij","Wróæ");
				}
				// Car licence make
				else if(listitem == 3)
				{					
					if(gPlayerData[playerid][pCash] < DRIVING_LICENCE_COST)
					{
						format(string, sizeof(string), "Nie posiadasz wystarczaj¹cej iloœci pieniêdzy na wyrobienie prawa jazdy (koszt: %d).", DRIVING_LICENCE_COST);
						ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_INFO,DIALOG_STYLE_MSGBOX,"Informacja",string,"Zamknij","Wróæ");
						return 1;
					}
					
					new slot;
					slot = PHaveItem(playerid, 3, 11);
					
					if(slot == 0)
					{
						ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_INFO,DIALOG_STYLE_MSGBOX,"Informacja","Nie posiadasz dokumentu potwierdzaj¹cego zdania prawa jazdy.","Zamknij","Wróæ");
						return 1;
					}
					
					SlotParam5(playerid, slot);
					
					if(strcmp(gDSelectedItemP5[playerid], gPlayerData[playerid][pName], false, strlen(gDSelectedItemP5[playerid])) != 0)
					{
						ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_INFO,DIALOG_STYLE_MSGBOX,"Informacja","Dokument, który posiadasz nie nale¿y do ciebie !","Zamknij","Wróæ");
						return 1;
					}
					
					ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_LIC,DIALOG_STYLE_LIST,"Wybierze kategorie prawa jazdy", "Kategoria A\nKategoria B\nKategoria C+E", "Wybierz", "Wróæ");
				}
				// dowod rejestracyjny pojazdu
				else if(listitem == 4)
				{
					ShowPlayerDialog(playerid, DIALOG_GOVERNMENT_VEH_REG, DIALOG_STYLE_INPUT, "Informacja", "WprowadŸ rejestracje pojazdu", "Dalej", "Wróæ");
					return 1;
				}
			}
		}
		case DIALOG_GOVERNMENT_INFO:
		{
			if(!response)
				ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_1,DIALOG_STYLE_LIST,""#COLOR_TITLE"Co chcesz zrobiæ ?",DIALOG_GOVERNMENT_1_TXT,"Wybierz","Zamknij");
		}
		case DIALOG_GOVERNMENT_VEH_REG:
		{
			if(response)
			{
				if(!IsNumeric(inputtext))
				{
					ShowPlayerDialog(playerid, DIALOG_GOVERNMENT_VEH_REG, DIALOG_STYLE_INPUT, "Informacja", "Podana zosta³a niepoprawna rejestracja.\nProsze spróbowaæ ponownie.", "Dalej", "Wróæ");
					return 1;
				}
				
				new vehId = CarSerialToID(strval(inputtext));
				
				if(vehId == -1)
				{
					ShowPlayerDialog(playerid, DIALOG_GOVERNMENT_VEH_REG, DIALOG_STYLE_INPUT, "Informacja", "Nie ma pojazdu o takiej rejestracji.\nProsze spróbowaæ ponownie.", "Dalej", "Wróæ");
					return 1;
				}
				
				if(strcmp(gVehData[vehId][Owner], gPlayerData[playerid], false) != 0)
				{
					ShowPlayerDialog(playerid, DIALOG_GOVERNMENT_VEH_REG, DIALOG_STYLE_INPUT, "Informacja", "Nie jesteœ w³aœcicielem tego pojazdu.\nProsze wprowadziæ inn¹ rejestracje.", "Dalej", "Wróæ");
					return 1;
				}
				
				InsertPlayerItemEx(playerid, 3, 19, strval(inputtext), gVehData[vehId][mVehVinNo], 0, 0, gPlayerData[playerid][pName]);
				PlayerActionMessage(playerid, 15.0, "odbiera dowód rjestracyjny pojazdu");
				ShowPlayerDialog(playerid, DIALOG_GOVERNMENT_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Otrzyma³eœ dowód rejestracyjny pojazdu.", "Zamknij", "Wróæ");

				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_GOVERNMENT_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Operacja anulowana.", "Zamknij", "Wróæ");
				
				return 1;
			}
		}
		case DIALOG_GOVERNMENT_LIC:
		{
			if(response)
			{
				new slot, days, licSlot;
				slot = PHaveItem(playerid, 3, 11);
				// Category A
				if(listitem == 0)
				{					
					if(SlotParam1(playerid, slot) == 0)
					{
						ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_INFO,DIALOG_STYLE_MSGBOX,"Informacja","Dokument, który posiadasz nie odnosi sie do prawa jazdy kat. A","Zamknij","Wróæ");
						return 1;
					}
					days = SlotParam1(playerid, slot);
					licSlot = PHaveItem(playerid, 3, 6);
					if(licSlot > 0)
					{
						if(SlotParam1(playerid, licSlot) > 0)
						{
							ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_INFO,DIALOG_STYLE_MSGBOX,"Informacja","Posiadasz ju¿ prawo jazdy kat. A i nie mo¿esz go przed³u¿yæ.","Zamknij","Wróæ");
							return 1;
						}
						else
						{
							SetPSlotParam1(playerid, licSlot, days);
							RemovePlayerItemExUsed(playerid, slot);
						}
					}
					else
					{
						licSlot = InsertPlayerItemEx(playerid, 3, 6, days, 0, 0, 0, gPlayerData[playerid][pName], 1);
						if(licSlot <= 0)
						{
							ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_INFO,DIALOG_STYLE_MSGBOX,"Informacja","Nie posiadasz miejsca na dokument !","Zamknij","Wróæ");
							return 1;
						}
						RemovePlayerItemExUsed(playerid, slot);		
					}
					ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_INFO,DIALOG_STYLE_MSGBOX,"Informacja","Otrzyma³eœ prawo jazdy kat. A","Zamknij","Wróæ");
					format(string, sizeof(string), "przekazuje dokument oraz pieni¹dze do urzêdnika");
					PlayerActionMessage(playerid, 15.0, string);
					format(string, sizeof(string), "odbiera prawo jazdy od urzêdnika");
					PlayerActionMessage(playerid, 15.0, string);					
				}
				// Category B
				else if(listitem == 1)
				{					
					if(SlotParam2(playerid, slot) == 0)
					{
						ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_INFO,DIALOG_STYLE_MSGBOX,"Informacja","Dokument, który posiadasz nie odnosi sie do prawa jazdy kat. A","Zamknij","Wróæ");
						return 1;
					}
					days = SlotParam2(playerid, slot);
					licSlot = PHaveItem(playerid, 3, 6);
					if(licSlot > 0)
					{
						if(SlotParam2(playerid, licSlot) > 0)
						{
							ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_INFO,DIALOG_STYLE_MSGBOX,"Informacja","Posiadasz ju¿ prawo jazdy kat. B i nie mo¿esz go przed³u¿yæ.","Zamknij","Wróæ");
							return 1;
						}
						else
						{
							SetPSlotParam2(playerid, licSlot, days);
							RemovePlayerItemExUsed(playerid, slot);
						}
					}
					else
					{
						licSlot = InsertPlayerItemEx(playerid, 3, 6, 0, days, 0, 0, gPlayerData[playerid][pName], 1);
						if(licSlot <= 0)
						{
							ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_INFO,DIALOG_STYLE_MSGBOX,"Informacja","Nie posiadasz miejsca na dokument !","Zamknij","Wróæ");
							return 1;
						}
						RemovePlayerItemExUsed(playerid, slot);		
					}
					ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_INFO,DIALOG_STYLE_MSGBOX,"Informacja","Otrzyma³eœ prawo jazdy kat. B","Zamknij","Wróæ");
					format(string, sizeof(string), "przekazuje dokument oraz pieni¹dze do urzêdnika");
					PlayerActionMessage(playerid, 15.0, string);
					format(string, sizeof(string), "odbiera prawo jazdy od urzêdnika");
					PlayerActionMessage(playerid, 15.0, string);					
				}
				// Category CE
				else if(listitem == 2)
				{					
					if(SlotParam3(playerid, slot) == 0)
					{
						ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_INFO,DIALOG_STYLE_MSGBOX,"Informacja","Dokument, który posiadasz nie odnosi sie do prawa jazdy kat. C+E","Zamknij","Wróæ");
						return 1;
					}
					days = SlotParam3(playerid, slot);
					licSlot = PHaveItem(playerid, 3, 6);
					if(licSlot > 0)
					{
						if(SlotParam3(playerid, licSlot) > 0)
						{
							ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_INFO,DIALOG_STYLE_MSGBOX,"Informacja","Posiadasz ju¿ prawo jazdy kat. C+E i nie mo¿esz go przed³u¿yæ.","Zamknij","Wróæ");
							return 1;
						}
						else
						{
							SetPSlotParam3(playerid, licSlot, days);
							RemovePlayerItemExUsed(playerid, slot);
						}
					}
					else
					{
						licSlot = InsertPlayerItemEx(playerid, 3, 6, 0, 0, days, 0, gPlayerData[playerid][pName], 1);
						if(licSlot <= 0)
						{
							ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_INFO,DIALOG_STYLE_MSGBOX,"Informacja","Nie posiadasz miejsca na dokument !","Zamknij","Wróæ");
							return 1;
						}
						RemovePlayerItemExUsed(playerid, slot);		
					}
					ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_INFO,DIALOG_STYLE_MSGBOX,"Informacja","Otrzyma³eœ prawo jazdy kat. C+E","Zamknij","Wróæ");
					format(string, sizeof(string), "przekazuje dokument oraz pieni¹dze do urzêdnika");
					PlayerActionMessage(playerid, 15.0, string);
					format(string, sizeof(string), "odbiera prawo jazdy od urzêdnika");
					PlayerActionMessage(playerid, 15.0, string);					
				}
			}
			return 1;
		}
		case DIALOG_GOVERNMENT_JOBS:
		{
			if(response)
			{
				gSelectedSlot[playerid] = listitem;
				if(listitem == 0) // roznosiciel gazet
				{
					format(string, sizeof(string), "Jesteœ teraz roznosicielem gazet.\nKomendy:\n/wezprace - /zrezygnujzpracy - /komendypracy\n/pobierzgazety - /rzucgazete\nGazety pobiera siê w punkcie poboru pracy roznosiciela gazet i wpisaniu komendy /pobierzgazety.\n\n");
					format(string, sizeof(string), "%sRoznoszenie gazet odbywa sie poprzez podejœcie pod dom lub biznes i wpisaniu komendy /rzucgazete\n\nJednorazowo mo¿esz pobraæ %d gazet.\nStawka za gazete: $%d", string, NewsBoyJob[TakeJobPapersCount], NewsBoyJob[TakeJobReward]);
					ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_JOBS_2,DIALOG_STYLE_MSGBOX,"Zatrudnij siê", string,DIALOG_GOV_APPLY_TXT,"Wróæ");
				}
				else if (listitem == 1) // detektyw
					ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_JOBS_2,DIALOG_STYLE_MSGBOX,"Zatrudnij siê","Jako detektyw masz mo¿liwoœæ œledzenia osób oraz pojazdów.\nMo¿esz zarabiaæ oferuj¹c swoje uslugi innym.\n\nWymagania:\nlicencjat z matematyki",DIALOG_GOV_APPLY_TXT,"Wróæ");
				else if (listitem == 2) // prawnik
					ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_JOBS_2,DIALOG_STYLE_MSGBOX,"Zatrudnij siê","Prawnik ma mo¿liwoœæ skrócenia kary osobom siedz¹cym w wiêzieniu.\nMo¿esz zarabiaæ oferuj¹c swoje uslugi innym.\n\nWymagania:\nlicencjat z nauk matematycznych i tytu³ magistra z nauk prawniczych",DIALOG_GOV_APPLY_TXT,"Wróæ");
				else if (listitem == 3) // sprzedawca produktów
					ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_JOBS_2,DIALOG_STYLE_MSGBOX,"Zatrudnij siê","Sprzedawca produktów sprzedaje produkty wlaœcicielom biznesów przy czym sam ustala ich cene.\n\nWymagania:\nPrawo jazdy",DIALOG_GOV_APPLY_TXT,"Wróæ");
				else if (listitem == 4) // kierowca autobusu
					ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_JOBS_2,DIALOG_STYLE_MSGBOX,"Zatrudnij siê","Kierowca autobusu jeŸdzi po wyznaczonych trasach, zatrzymuj¹c sie na przystankach i zabieraj¹c pasa¿erów.\nWynagrodzenie jest zale¿ne od trasy.\n\nWymagania:\nPrawo jazdy",DIALOG_GOV_APPLY_TXT,"Wróæ");
				else if (listitem == 5) // kierowca œmieciarki
					ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_JOBS_2,DIALOG_STYLE_MSGBOX,"Zatrudnij siê","Kierowca œmieciarki zbiera œmieci z miast w San Andreas.\n\nWymagania:\nPrawo jazdy",DIALOG_GOV_APPLY_TXT,"Wróæ");
				else if (listitem == 6) // kierowca myjki drogowej
					ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_JOBS_2,DIALOG_STYLE_MSGBOX,"Zatrudnij siê","Kierowca myjki drogowej dba o czystoœæ ulic w San Andreas\n\nWymagania:\nDowód osobisty",DIALOG_GOV_APPLY_TXT,"Wróæ");
				else if (listitem == 7) // farmer
					ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_JOBS_2,DIALOG_STYLE_MSGBOX,"Zatrudnij siê","Rolnik œcina plony je¿d¿¹c kombajnem, nastêpnie zsypuje to co udalo mu sie uzbieraæ do magazynu.\n\nWymagania:\nBRAK",DIALOG_GOV_APPLY_TXT,"Wróæ");
				else if (listitem == 8) // mechanik
					ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_JOBS_2,DIALOG_STYLE_MSGBOX,"Zatrudnij siê","Mechanik zajmuje siê ró¿nymi pojazdami i dba o ich sprawnoœæ za co uzyskuje odpowiednie wynagordzenie.\n\nWymagania:\nlicencjat z nauk technicznych",DIALOG_GOV_APPLY_TXT,"Wróæ");
				else if (listitem == 9) // sprzedawca/ekspedient
					ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_JOBS_2,DIALOG_STYLE_MSGBOX,"Zatrudnij siê","Sprzedawca/ekspedient sprzedaje produkty w sklepie (biznesie).\nPraca polega na przesiadywaniu w biznesie i obsludze wchodz¹cych klientów.\n\nWymagania:\nBRAK",DIALOG_GOV_APPLY_TXT,"Wróæ");
				else if (listitem == 10) // rezygnacja
				{
					if(gPlayerData[playerid][pJob] != 0)
					{
						if(gPlayerData[playerid][pJobTimeChange] == 0)
						{
							if(gBusDriverOnDuty[playerid] == 1)
								gBusDriverOnDuty[playerid] = 0;

							gPlayerData[playerid][pJob] = 0;
							SavePlayerData(playerid, "Job");

							SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"[INFO:] Zrezygnowa³eœ ze swojej pracy.");
						}
						else
						{
							format(string, sizeof(string), "[INFO:] Nie mo¿esz zrezygnowaæ ze swoje pracy. Musisz przepracowaæ jeszcze oko³o %d minut", gPlayerData[playerid][pJobTimeChange]);
							SendClientMessage(playerid,COLOR_RED, string);
						}
					}
					else
					{
						SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"[INFO:] Nie masz aktualnie pracy !");
					}
					return 1;
				}
			}
			else
			{
				ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_1,DIALOG_STYLE_LIST,""#COLOR_TITLE"Co chcesz zrobiæ ?",DIALOG_GOVERNMENT_1_TXT,"Wybierz","Zamknij");
			}
		}
		case DIALOG_GOVERNMENT_JOBS_2:
		{
			if(response)
			{
				if(gPlayerData[playerid][pJob] != 0)
					ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_JOBS_3,DIALOG_STYLE_MSGBOX,"Informacja","Posiadasz ju¿ prace !\nZanim weŸmiesz now¹ musisz zwolniæ siê ze starej.","Wróæ","");
				else
				{
					//NewsBoy
					if(gSelectedSlot[playerid] == 0)
					{
						gPlayerData[playerid][pJob] = 21;
						SavePlayerData(playerid, "Job");
						format(string, sizeof(string), "Jesteœ teraz roznosicielem gazet\nKomendy :\n/wezprace /zrezygnujzpracy /komendypracy\n/pobierzgazety /rzucgazete\nGazety pobiera siê w punkcie poboru pracy roznosiciela gazet i wpisaniu komendy /pobierzgazety\n\n");
						format(string, sizeof(string), "%sRoznoszenie gazet odbywa siê poprzez podejœcie pod dom lub biznes i wpisaniu /rzucgazete.\n\nJednorazowo mo¿esz przenosiæ do %d gazety.\nStawka za jedn¹ gazete to $%d.", string, NewsBoyJob[TakeJobPapersCount], NewsBoyJob[TakeJobReward]);
						ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", string, "Zamknij", "");
					}
					//Detective Job
					else if (gSelectedSlot[playerid] == 1)
					{
						if(gPlayerData[playerid][pMat] >= 2)
						{
						
							SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[SUKCES:] Jesteœ teraz detektywem, wpisz /komendypracy.");
							gPlayerData[playerid][pJob] = 3; 

							SavePlayerData(playerid, "Job");
						}
						else
						{
							SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Do tej pracy wymagany jest przynajmniej licencjat z nauk matematycznych");
							SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Wykszta³cenie zdobêdziesz w bibliotece (Mapa -> lokalizacje)");
						}
						
					}
					//Lawyer Job
					else if (gSelectedSlot[playerid] == 2)
					{
						if(gPlayerData[playerid][pMat] > 2 || gPlayerData[playerid][pLaw] > 3)
						{
							SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[SUKCES:] Jesteœ teraz prawnikiem, wpisz /komendypracy.");
							gPlayerData[playerid][pJob] = 4; 

							SavePlayerData(playerid, "Job");
						}
						else
						{
							SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Do tej pracy wymagany jest przynajmniej licencjat z nauk matematycznych i tytu³ magistra z nauk prawniczych");
							SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Wykszta³cenie zdobêdziesz w bibliotece (Mapa -> lokalizacje)");
						}
					}
					//Products Seller Job
					else if (gSelectedSlot[playerid] == 3)
					{
						if(PHaveItemParam5Ex(playerid, 3, 6, gPlayerData[playerid][pName]) == -1)
						{
							SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Prawo jazdy jest wymagane do tej pracy !");
						}
						else if(!gPlayerData[playerid][pHighSchool])
						{
							SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Œrednie wykszta³cenie jest wymagane do tej pracy");
							SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Wykszta³cenie zdobêdziesz w bibliotece (Mapa -> lokalizacje)");
						}
						else
						{
							SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"[SUKCES:] Jesteœ teraz sprzedawc¹ produktów, wpisz /komendypracy.");
							gPlayerData[playerid][pJob] = 5; 

							SavePlayerData(playerid, "Job");
						}
					}
					//Bus Driver
					else if (gSelectedSlot[playerid] == 4)
					{
						new slot = PHaveItem(playerid, 3, 6);
						if(slot == 0 || SlotParam2(playerid, slot) <= 0)
						{
							SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"[INFO:] Prawo jazdy jest wymagane do tej pracy !");
						}
						else
						{
							SlotParam5(playerid, slot);
							
							if(strcmp(gDSelectedItemP5[playerid], gPlayerData[playerid][pName], false) != 0 || strlen(gDSelectedItemP5[playerid]) == 0)
							{
								SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"[INFO:] Prawo jazdy jest wymagane do tej pracy !");
								return 1;
							}
							
							SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[SUKCES:] Jesteœ teraz kierowc¹ autobusu, wpisz /komendypracy.");
							gPlayerData[playerid][pJob] = 13; 

							SavePlayerData(playerid, "Job");
						}
					}
					//Mzgk Driver
					else if (gSelectedSlot[playerid] == 5)
					{
						new slot = PHaveItem(playerid, 3, 6);
						if(slot == 0 || SlotParam2(playerid, slot) <= 0)
						{
							SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"[INFO:] Prawo jazdy jest wymagane do tej pracy !");
						}
						else
						{
							SlotParam5(playerid, slot);
							
							if(strcmp(gDSelectedItemP5[playerid], gPlayerData[playerid][pName], false) != 0 || strlen(gDSelectedItemP5[playerid]) == 0)
							{
								SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"[INFO:] Prawo jazdy jest wymagane do tej pracy !");
								return 1;
							}
							
							SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"[SUKCES:] Jesteœ teraz kierowc¹ œmieciarki wpisz /komendypracy.");
							gPlayerData[playerid][pJob] = 14; 

							SavePlayerData(playerid, "Job");
						}
					}
					//Sweeper Driver
					else if (gSelectedSlot[playerid] == 6)
					{
						new slot = PHaveItemParam5Ex(playerid, 3, 5, gPlayerData[playerid][pName]);
						if(slot == -1)
						{
							SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"[INFO:] Dowód jest wymagany do tej pracy !");
						}
						else
						{
							SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"[SUKCES:] Jesteœ teraz kierowc¹ myjki drogowej, wpisz /komendypracy.");
							gPlayerData[playerid][pJob] = 15; 

							SavePlayerData(playerid, "Job");
						}
					}
					//Farmer Driver
					else if (gSelectedSlot[playerid] == 7)
					{
						SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"[SUKCES:] Jesteœ teraz rolnikiem, wpisz /komendypracy.");
						gPlayerData[playerid][pJob] = 18; 

						SavePlayerData(playerid, "Job");
					}
					// Mechanik
					else if (gSelectedSlot[playerid] == 8)
					{
						if(gPlayerData[playerid][pTech] < 2)
						{
							SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"[INFO:] Musisz mieæ co najmniej licencjat z nauk technicznych");
							SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"[INFO:] Wykszta³cenie zdobêdziesz w bibliotece (Mapa -> lokalizacje)");
						}
						else
						{
							SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"[SUKCES:] Jesteœ teraz mechanikiem, wpisz /komendypracy.");
							gPlayerData[playerid][pJob] = 17; 

							SavePlayerData(playerid, "Job");
						}
					}
					//Seller
					else if (gSelectedSlot[playerid] == 9)
					{
						SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"[SUKCES:] Jesteœ teraz sprzedawc¹/ekspedientem, wpisz /komendypracy.");
						gPlayerData[playerid][pJob] = 19; 

						SavePlayerData(playerid, "Job");
					}
				}
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_JOBS,DIALOG_STYLE_LIST,"Zatrudnij siê","1. Roznosiciel gazet \n2. Detektyw \n3. Prawnik \n4. Sprzedawca produktów \n5. Kierowca autobusu \n6. Kierowca œmieciarki \n7. Kierowca myjki drogowej \n8. Rolnik \n9. Mechanik \n10. Sprzedawca/ekspedient \n11. Zrezygnuj z obecnej pracy", "Wybierz","Wróæ");
				return 1;
			}
		}
		case DIALOG_GOVERNMENT_JOBS_3:
		{
			if(response)
				ShowPlayerDialog(playerid,DIALOG_GOVERNMENT_1,DIALOG_STYLE_LIST,""#COLOR_TITLE"Co chcesz zrobiæ ?",DIALOG_GOVERNMENT_1_TXT,"Wybierz","Zamknij");
			return 1;
		}
		case DIALOG_HITEM_1: // menu glowne itemow w domu
		{
			if(response)
			{
				gDSelectedHItem[playerid] = listitem+1;
				selectItem:
				ShowPlayerDialog(playerid,DIALOG_HITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1. Zabierz item\n2. Wyrzuc item","Akceptuj","Wróæ");
			}
			return 1;
		}
		case DIALOG_HITEM_2:
		{
			if(response)
			{
				if(listitem == 0) // zabierz item
				{
					/*
					* PUSTY SLOT
					*/
					if(!HItemSlotStatus(gDSelectedHItemHouse[playerid], gDSelectedHItem[playerid]))
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Ten slot jest pusty !");
						return 1;
					}
					if( HSlotParam6(gDSelectedHItemHouse[playerid], gDSelectedHItem[playerid]) > 1 )
					{
						ShowPlayerDialog(playerid,DIALOG_HITEM_4,DIALOG_STYLE_INPUT,"Wpisz iloœæ","Podaj wartoœæ reprezentuj¹c¹ iloœæ itemów do zabrania z domu","Akceptuj","Wróæ");
						return 1;
					}
					new slotin;
					if (gDSelectedHItem[playerid] == 1)
					{
						slotin = InsertPlayerItemEx(playerid,
							Houses[gDSelectedHItemHouse[playerid]][HItem1type],
							Houses[gDSelectedHItemHouse[playerid]][HItem1],
							Houses[gDSelectedHItemHouse[playerid]][HItem1param],
							Houses[gDSelectedHItemHouse[playerid]][HItem1param2],
							Houses[gDSelectedHItemHouse[playerid]][HItem1param3],
							Houses[gDSelectedHItemHouse[playerid]][HItem1param4],
							Houses[gDSelectedHItemHouse[playerid]][HItem1param5],
							Houses[gDSelectedHItemHouse[playerid]][HItem1param6]);
						if(slotin == 0)
						{
							SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
							return 1;
						}
					}
					else if (gDSelectedHItem[playerid] == 2)
					{
						slotin = InsertPlayerItemEx(playerid,
							Houses[gDSelectedHItemHouse[playerid]][HItem2type],
							Houses[gDSelectedHItemHouse[playerid]][HItem2],
							Houses[gDSelectedHItemHouse[playerid]][HItem2param],
							Houses[gDSelectedHItemHouse[playerid]][HItem2param2],
							Houses[gDSelectedHItemHouse[playerid]][HItem2param3],
							Houses[gDSelectedHItemHouse[playerid]][HItem2param4],
							Houses[gDSelectedHItemHouse[playerid]][HItem2param5],
							Houses[gDSelectedHItemHouse[playerid]][HItem2param6]);
						if(slotin == 0)
						{
							SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
							return 1;
						}
					}
					else if (gDSelectedHItem[playerid] == 3)
					{
						slotin = InsertPlayerItemEx(playerid,
						Houses[gDSelectedHItemHouse[playerid]][HItem3type],
						Houses[gDSelectedHItemHouse[playerid]][HItem3],
						Houses[gDSelectedHItemHouse[playerid]][HItem3param],
						Houses[gDSelectedHItemHouse[playerid]][HItem3param2],
						Houses[gDSelectedHItemHouse[playerid]][HItem3param3],
						Houses[gDSelectedHItemHouse[playerid]][HItem3param4],
						Houses[gDSelectedHItemHouse[playerid]][HItem3param5],
						Houses[gDSelectedHItemHouse[playerid]][HItem3param6]);
						if(slotin == 0)
						{
							SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
							return 1;
						}
					}
					else if (gDSelectedHItem[playerid] == 4)
					{
						slotin = InsertPlayerItemEx(playerid,
						Houses[gDSelectedHItemHouse[playerid]][HItem4type],
						Houses[gDSelectedHItemHouse[playerid]][HItem4],
						Houses[gDSelectedHItemHouse[playerid]][HItem4param],
						Houses[gDSelectedHItemHouse[playerid]][HItem4param2],
						Houses[gDSelectedHItemHouse[playerid]][HItem4param3],
						Houses[gDSelectedHItemHouse[playerid]][HItem4param4],
						Houses[gDSelectedHItemHouse[playerid]][HItem4param5],
						Houses[gDSelectedHItemHouse[playerid]][HItem4param6]);
						if(slotin == 0)
						{
							SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
							return 1;
						}
					}
					else if (gDSelectedHItem[playerid] == 5)
					{
						slotin = InsertPlayerItemEx(playerid,
						Houses[gDSelectedHItemHouse[playerid]][HItem5type],
						Houses[gDSelectedHItemHouse[playerid]][HItem5],
						Houses[gDSelectedHItemHouse[playerid]][HItem5param],
						Houses[gDSelectedHItemHouse[playerid]][HItem5param2],
						Houses[gDSelectedHItemHouse[playerid]][HItem5param3],
						Houses[gDSelectedHItemHouse[playerid]][HItem5param4],
						Houses[gDSelectedHItemHouse[playerid]][HItem5param5],
						Houses[gDSelectedHItemHouse[playerid]][HItem5param6]);
						if(slotin == 0)
						{
							SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
							return 1;
						}
					}
					RemoveHouseItemEx(gDSelectedHItemHouse[playerid],gDSelectedHItem[playerid]);
					format(string, sizeof(string), "[INFO:] Zabra³eœ item z pokoju (ze slotu %d)", gDSelectedHItem[playerid]);
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
					PlayerActionMessage(playerid, 15.0, "zabiera przedmiot z pó³ki");
					return 1;
				}
				else // wyrzuc item
				{
					if(HSlotItemTypeCompare(gDSelectedHItemHouse[playerid], gDSelectedHItem[playerid], 1) && HSlotParam6(gDSelectedHItemHouse[playerid], gDSelectedHItem[playerid] > 1))
					{
						ShowPlayerDialog(playerid,DIALOG_HITEM_3,DIALOG_STYLE_INPUT,"Wpisz iloœæ","Wpisz ile itemów danego typu chcesz wyrzuciæ","Wyrzuæ","Anuluj");
						return 1;
					}
					RemoveHouseItemEx(gDSelectedHItemHouse[playerid], gDSelectedHItem[playerid]);
					format(string, sizeof(string), "[INFO:] Wyrzuci³eœ item z domu (ze slotu %d)", gDSelectedHItem[playerid]);
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
					PlayerActionMessage(playerid, 15.0, "wyrzuca przedmiot z pó³ki");
					return 1;
				}
			}
			else
			{
				format(string, sizeof(string), "1. %s [iloœæ: %d] [waga: %d]\n2. %s [iloœæ: %d] [waga: %d]\n3. %s [iloœæ: %d] [waga: %d]\n4. %s [iloœæ: %d] [waga: %d]\n5. %s [iloœæ: %d] [waga: %d]",
				ItemName(Houses[gDSelectedHItemHouse[playerid]][HItem1type], Houses[gDSelectedHItemHouse[playerid]][HItem1]),HSlotParam6(gDSelectedHItemHouse[playerid], 1), ItemWeight(Houses[gDSelectedHItemHouse[playerid]][HItem1type], Houses[gDSelectedHItemHouse[playerid]][HItem1]),
				ItemName(Houses[gDSelectedHItemHouse[playerid]][HItem2type], Houses[gDSelectedHItemHouse[playerid]][HItem2]),HSlotParam6(gDSelectedHItemHouse[playerid], 2), ItemWeight(Houses[gDSelectedHItemHouse[playerid]][HItem2type], Houses[gDSelectedHItemHouse[playerid]][HItem2]),
				ItemName(Houses[gDSelectedHItemHouse[playerid]][HItem3type], Houses[gDSelectedHItemHouse[playerid]][HItem3]),HSlotParam6(gDSelectedHItemHouse[playerid], 3), ItemWeight(Houses[gDSelectedHItemHouse[playerid]][HItem3type], Houses[gDSelectedHItemHouse[playerid]][HItem3]),
				ItemName(Houses[gDSelectedHItemHouse[playerid]][HItem4type], Houses[gDSelectedHItemHouse[playerid]][HItem4]),HSlotParam6(gDSelectedHItemHouse[playerid], 4), ItemWeight(Houses[gDSelectedHItemHouse[playerid]][HItem4type], Houses[gDSelectedHItemHouse[playerid]][HItem4]),
				ItemName(Houses[gDSelectedHItemHouse[playerid]][HItem5type], Houses[gDSelectedHItemHouse[playerid]][HItem5]),HSlotParam6(gDSelectedHItemHouse[playerid], 5), ItemWeight(Houses[gDSelectedHItemHouse[playerid]][HItem5type], Houses[gDSelectedHItemHouse[playerid]][HItem5]) );
				format(string2, sizeof(string2), "Moje itemy w domu - waga ca³kowita %d", HItemWeight(gDSelectedHItemHouse[playerid]));
				ShowPlayerDialog(playerid,DIALOG_HITEM_1,DIALOG_STYLE_LIST,string2,string,"Wybierz","Anuluj");
				return 1;
			}
		}
		case DIALOG_HITEM_3:
		{
			new howMuch = strval(inputtext);
			if(HSlotParam6(gDSelectedHItemHouse[playerid], gDSelectedHItem[playerid]) <= 0)
			{
				RemoveHouseItemEx(gDSelectedHItemHouse[playerid], gDSelectedHItem[playerid]);
				format(string, sizeof(string), "[INFO:] Wyrzuci³eœ item ze slotu %d", gDSelectedHItem[playerid]);
				SendClientMessage(playerid, COLOR_LIGHTYELLOW2,string);
				return 1;
			}
			if(howMuch > HSlotParam6(gDSelectedHItemHouse[playerid], gDSelectedHItem[playerid]))
			{
				ShowPlayerDialog(playerid,DIALOG_HITEM_3,DIALOG_STYLE_INPUT,"Wpisz iloœæ","Nie posiadasz tyle przedmiotów danego typu !\nWpisz now¹ wartoœæ","Wyrzuæ","Anuluj");
				return 1;
			}
			else if(howMuch == 0)
			{
				ShowPlayerDialog(playerid,DIALOG_HITEM_3,DIALOG_STYLE_INPUT,"Wpisz iloœæ","Poda³eœ b³êdn¹ wartoœæ\nWpisz now¹","Wyrzuæ","Anuluj");
				return 1;
			}
			if(HSlotParam6(gDSelectedHItemHouse[playerid], gDSelectedHItem[playerid])-howMuch == 0)
				RemoveHouseItemEx(gDSelectedHItemHouse[playerid], gDSelectedHItem[playerid]);
			else
				SetHSlotParam6(gDSelectedHItemHouse[playerid], gDSelectedHItem[playerid], HSlotParam6(gDSelectedHItemHouse[playerid], gDSelectedHItem[playerid])-howMuch);
			format(string, sizeof(string), "[INFO:] Wyrzuci³eœ %d itemów", howMuch);
			SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
			return 1;
		}
		case DIALOG_HITEM_4:
		{
			if(response)
			{
				if( strval(inputtext) <= 0 || strval(inputtext) > HSlotParam6(gDSelectedHItemHouse[playerid], gDSelectedHItem[playerid]) )
				{
					ShowPlayerDialog(playerid,DIALOG_HITEM_4,DIALOG_STYLE_INPUT,"Wpisz iloœæ", "Poda³eœ nieprawid³ow¹ wartoœæ !\nWpisz wartoœæ ponownie","Akceptuj","Wróæ");
					return 1;
				}
				new howMuch = strval(inputtext);
				new slotin;
				if (gDSelectedHItem[playerid] == 1)
				{
					if(PlayerCountMaxItemCarry(playerid, Houses[gDSelectedHItemHouse[playerid]][HItem1type], Houses[gDSelectedHItemHouse[playerid]][HItem1]) < howMuch)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie uniesiesz tylu itemów !");
						format(string, sizeof(string), "[INFO:] Mo¿esz przenieœæ tylko %d tych itemów", PlayerCountMaxItemCarry(playerid, Houses[gDSelectedHItemHouse[playerid]][HItem1type], Houses[gDSelectedHItemHouse[playerid]][HItem1]));
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
						return 1;
					}
					slotin = InsertPlayerItemEx(playerid,
						Houses[gDSelectedHItemHouse[playerid]][HItem1type],
						Houses[gDSelectedHItemHouse[playerid]][HItem1],
						Houses[gDSelectedHItemHouse[playerid]][HItem1param],
						Houses[gDSelectedHItemHouse[playerid]][HItem1param2],
						Houses[gDSelectedHItemHouse[playerid]][HItem1param3],
						Houses[gDSelectedHItemHouse[playerid]][HItem1param4],
						Houses[gDSelectedHItemHouse[playerid]][HItem1param5],
						howMuch);
					if(slotin == 0)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
						return 1;
					}
				}
				else if (gDSelectedHItem[playerid] == 2)
				{
					if(PlayerCountMaxItemCarry(playerid, Houses[gDSelectedHItemHouse[playerid]][HItem2type], Houses[gDSelectedHItemHouse[playerid]][HItem2]) < howMuch)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie uniesiesz tylu itemów !");
						format(string, sizeof(string), "[INFO:] Mo¿esz przenieœæ tylko %d tych itemów", PlayerCountMaxItemCarry(playerid, Houses[gDSelectedHItemHouse[playerid]][HItem2type], Houses[gDSelectedHItemHouse[playerid]][HItem2]));
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
						return 1;
					}
					slotin = InsertPlayerItemEx(playerid,
						Houses[gDSelectedHItemHouse[playerid]][HItem2type],
						Houses[gDSelectedHItemHouse[playerid]][HItem2],
						Houses[gDSelectedHItemHouse[playerid]][HItem2param],
						Houses[gDSelectedHItemHouse[playerid]][HItem2param2],
						Houses[gDSelectedHItemHouse[playerid]][HItem2param3],
						Houses[gDSelectedHItemHouse[playerid]][HItem2param4],
						Houses[gDSelectedHItemHouse[playerid]][HItem2param5],
						howMuch);
					if(slotin == 0)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
						return 1;
					}
				}
				else if (gDSelectedHItem[playerid] == 3)
				{
					if(PlayerCountMaxItemCarry(playerid, Houses[gDSelectedHItemHouse[playerid]][HItem3type], Houses[gDSelectedHItemHouse[playerid]][HItem3]) < howMuch)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie uniesiesz tylu itemów !");
						format(string, sizeof(string), "[INFO:] Mo¿esz przenieœæ tylko %d tych itemów", PlayerCountMaxItemCarry(playerid, Houses[gDSelectedHItemHouse[playerid]][HItem3type], Houses[gDSelectedHItemHouse[playerid]][HItem3]));
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
						return 1;
					}
					slotin = InsertPlayerItemEx(playerid,
					Houses[gDSelectedHItemHouse[playerid]][HItem3type],
					Houses[gDSelectedHItemHouse[playerid]][HItem3],
					Houses[gDSelectedHItemHouse[playerid]][HItem3param],
					Houses[gDSelectedHItemHouse[playerid]][HItem3param2],
					Houses[gDSelectedHItemHouse[playerid]][HItem3param3],
					Houses[gDSelectedHItemHouse[playerid]][HItem3param4],
					Houses[gDSelectedHItemHouse[playerid]][HItem3param5],
					howMuch);
					if(slotin == 0)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
						return 1;
					}
				}
				else if (gDSelectedHItem[playerid] == 4)
				{
					if(PlayerCountMaxItemCarry(playerid, Houses[gDSelectedHItemHouse[playerid]][HItem4type], Houses[gDSelectedHItemHouse[playerid]][HItem4]) < howMuch)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie uniesiesz tylu itemów !");
						format(string, sizeof(string), "[INFO:] Mo¿esz przenieœæ tylko %d tych itemów", PlayerCountMaxItemCarry(playerid, Houses[gDSelectedHItemHouse[playerid]][HItem4type], Houses[gDSelectedHItemHouse[playerid]][HItem4]));
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
						return 1;
					}
					slotin = InsertPlayerItemEx(playerid,
					Houses[gDSelectedHItemHouse[playerid]][HItem4type],
					Houses[gDSelectedHItemHouse[playerid]][HItem4],
					Houses[gDSelectedHItemHouse[playerid]][HItem4param],
					Houses[gDSelectedHItemHouse[playerid]][HItem4param2],
					Houses[gDSelectedHItemHouse[playerid]][HItem4param3],
					Houses[gDSelectedHItemHouse[playerid]][HItem4param4],
					Houses[gDSelectedHItemHouse[playerid]][HItem4param5],
					howMuch);
					if(slotin == 0)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
						return 1;
					}
				}
				else if (gDSelectedHItem[playerid] == 5)
				{
					if(PlayerCountMaxItemCarry(playerid, Houses[gDSelectedHItemHouse[playerid]][HItem5type], Houses[gDSelectedHItemHouse[playerid]][HItem5]) < howMuch)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie uniesiesz tylu itemów !");
						format(string, sizeof(string), "[INFO:] Mo¿esz przenieœæ tylko %d tych itemów", PlayerCountMaxItemCarry(playerid, Houses[gDSelectedHItemHouse[playerid]][HItem5type], Houses[gDSelectedHItemHouse[playerid]][HItem5]));
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
						return 1;
					}
					slotin = InsertPlayerItemEx(playerid,
					Houses[gDSelectedHItemHouse[playerid]][HItem5type],
					Houses[gDSelectedHItemHouse[playerid]][HItem5],
					Houses[gDSelectedHItemHouse[playerid]][HItem5param],
					Houses[gDSelectedHItemHouse[playerid]][HItem5param2],
					Houses[gDSelectedHItemHouse[playerid]][HItem5param3],
					Houses[gDSelectedHItemHouse[playerid]][HItem5param4],
					Houses[gDSelectedHItemHouse[playerid]][HItem5param5],
					howMuch);
					if(slotin == 0)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
						return 1;
					}
				}
				RemoveHouseItemEx(gDSelectedHItemHouse[playerid], gDSelectedHItem[playerid], howMuch);
				format(string, sizeof(string), "[INFO:] Zabra³eœ item z pokoju (ze slotu %d)", gDSelectedHItem[playerid]);
				SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
				PlayerActionMessage(playerid, 15.0, "zabiera przedmiot z pó³ki");
				return 1;
			}
			else
			{
				goto selectItem;
				return 1;
			}
		}
		case DIALOG_VITEM_1: // menu glowne itemow w pojedzie
		{
			if(response)
			{
				gDSelectedVItemSlot[playerid] = listitem+1;
				selectVItem:
				ShowPlayerDialog(playerid,DIALOG_VITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1. Zabierz item\n2. Wyrzuc item","Akceptuj","Wróæ");
			}
			return 1;
		}
		case DIALOG_VITEM_2:
		{
			if(response)
			{
				if(listitem == 0) // zabierz item
				{
					/*
					* PUSTY SLOT
					*/
					if(!VItemSlotStatus(gDSelectedVItemVID[playerid], gDSelectedVItemSlot[playerid]))
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Ten slot jest pusty !");
						return 1;
					}
					if( VSlotParam6(gDSelectedVItemVID[playerid], gDSelectedVItemSlot[playerid]) > 1 )
					{
						ShowPlayerDialog(playerid,DIALOG_VITEM_4,DIALOG_STYLE_INPUT,"Wpisz iloœæ","Podaj wartoœæ reprezentuj¹c¹ iloœæ itemów do zabrania ze schowka","Akceptuj","Wróæ");
						return 1;
					}
					new slotin;
					if (gDSelectedVItemSlot[playerid] == 1)
					{
						slotin = InsertPlayerItemEx(playerid,
							gVehData[gDSelectedVItemVID[playerid]-1][VItem1type],
							gVehData[gDSelectedVItemVID[playerid]-1][VItem1],
							gVehData[gDSelectedVItemVID[playerid]-1][VItem1param],
							gVehData[gDSelectedVItemVID[playerid]-1][VItem1param2],
							gVehData[gDSelectedVItemVID[playerid]-1][VItem1param3],
							gVehData[gDSelectedVItemVID[playerid]-1][VItem1param4],
							gVehData[gDSelectedVItemVID[playerid]-1][VItem1param5],
							gVehData[gDSelectedVItemVID[playerid]-1][VItem1param6]);
						if(slotin == 0)
						{
							SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
							return 1;
						}
					}
					else if (gDSelectedVItemSlot[playerid] == 2)
					{
						slotin = InsertPlayerItemEx(playerid,
							gVehData[gDSelectedVItemVID[playerid]-1][VItem2type],
							gVehData[gDSelectedVItemVID[playerid]-1][VItem2],
							gVehData[gDSelectedVItemVID[playerid]-1][VItem2param],
							gVehData[gDSelectedVItemVID[playerid]-1][VItem2param2],
							gVehData[gDSelectedVItemVID[playerid]-1][VItem2param3],
							gVehData[gDSelectedVItemVID[playerid]-1][VItem2param4],
							gVehData[gDSelectedVItemVID[playerid]-1][VItem2param5],
							gVehData[gDSelectedVItemVID[playerid]-1][VItem2param6]);
						if(slotin == 0)
						{
							SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
							return 1;
						}
					}
					else if (gDSelectedVItemSlot[playerid] == 3)
					{
						slotin = InsertPlayerItemEx(playerid,
						gVehData[gDSelectedVItemVID[playerid]-1][VItem3type],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem3],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem3param],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem3param2],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem3param3],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem3param4],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem3param5],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem3param6]);
						if(slotin == 0)
						{
							SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
							return 1;
						}
					}
					else if (gDSelectedVItemSlot[playerid] == 4)
					{
						slotin = InsertPlayerItemEx(playerid,
						gVehData[gDSelectedVItemVID[playerid]-1][VItem4type],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem4],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem4param],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem4param2],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem4param3],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem4param4],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem4param5],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem4param6]);
						if(slotin == 0)
						{
							SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
							return 1;
						}
					}
					else if (gDSelectedVItemSlot[playerid] == 5)
					{
						slotin = InsertPlayerItemEx(playerid,
						gVehData[gDSelectedVItemVID[playerid]-1][VItem5type],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem5],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem5param],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem5param2],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem5param3],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem5param4],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem5param5],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem5param6]);
						if(slotin == 0)
						{
							SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
							return 1;
						}
					}
					else if (gDSelectedVItemSlot[playerid] == 6)
					{
						slotin = InsertPlayerItemEx(playerid,
						gVehData[gDSelectedVItemVID[playerid]-1][VItem6type],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem6],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem6param],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem6param2],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem6param3],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem6param4],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem6param5],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem6param6]);
						if(slotin == 0)
						{
							SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
							return 1;
						}
					}
					else if (gDSelectedVItemSlot[playerid] == 7)
					{
						slotin = InsertPlayerItemEx(playerid,
						gVehData[gDSelectedVItemVID[playerid]-1][VItem7type],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem7],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem7param],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem7param2],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem7param3],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem7param4],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem7param5],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem7param6]);
						if(slotin == 0)
						{
							SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
							return 1;
						}
					}
					else if (gDSelectedVItemSlot[playerid] == 8)
					{
						slotin = InsertPlayerItemEx(playerid,
						gVehData[gDSelectedVItemVID[playerid]-1][VItem8type],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem8],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem8param],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem8param2],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem8param3],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem8param4],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem8param5],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem8param6]);
						if(slotin == 0)
						{
							SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
							return 1;
						}
					}
					else if (gDSelectedVItemSlot[playerid] == 9)
					{
						slotin = InsertPlayerItemEx(playerid,
						gVehData[gDSelectedVItemVID[playerid]-1][VItem9type],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem9],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem9param],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem9param2],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem9param3],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem9param4],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem9param5],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem9param6]);
						if(slotin == 0)
						{
							SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
							return 1;
						}
					}
					else if (gDSelectedVItemSlot[playerid] == 10)
					{
						slotin = InsertPlayerItemEx(playerid,
						gVehData[gDSelectedVItemVID[playerid]-1][VItem10type],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem10],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem10param],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem10param2],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem10param3],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem10param4],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem10param5],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem10param6]);
						if(slotin == 0)
						{
							SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
							return 1;
						}
					}
					else if (gDSelectedVItemSlot[playerid] == 11)
					{
						slotin = InsertPlayerItemEx(playerid,
						gVehData[gDSelectedVItemVID[playerid]-1][VItem11type],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem11],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem11param],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem11param2],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem11param3],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem11param4],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem11param5],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem11param6]);
						if(slotin == 0)
						{
							SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
							return 1;
						}
					}
					else if (gDSelectedVItemSlot[playerid] == 12)
					{
						slotin = InsertPlayerItemEx(playerid,
						gVehData[gDSelectedVItemVID[playerid]-1][VItem12type],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem12],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem12param],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem12param2],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem12param3],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem12param4],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem12param5],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem12param6]);
						if(slotin == 0)
						{
							SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
							return 1;
						}
					}
					else if (gDSelectedVItemSlot[playerid] == 13)
					{
						slotin = InsertPlayerItemEx(playerid,
						gVehData[gDSelectedVItemVID[playerid]-1][VItem13type],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem13],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem13param],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem13param2],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem13param3],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem13param4],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem13param5],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem13param6]);
						if(slotin == 0)
						{
							SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
							return 1;
						}
					}
					else if (gDSelectedVItemSlot[playerid] == 14)
					{
						slotin = InsertPlayerItemEx(playerid,
						gVehData[gDSelectedVItemVID[playerid]-1][VItem14type],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem14],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem14param],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem14param2],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem14param3],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem14param4],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem14param5],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem14param6]);
						if(slotin == 0)
						{
							SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
							return 1;
						}
					}
					else if (gDSelectedVItemSlot[playerid] == 15)
					{
						slotin = InsertPlayerItemEx(playerid,
						gVehData[gDSelectedVItemVID[playerid]-1][VItem15type],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem15],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem15param],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem15param2],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem15param3],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem15param4],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem15param5],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem15param6]);
						if(slotin == 0)
						{
							SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
							return 1;
						}
					}
					RemoveVehItemEx(gDSelectedVItemVID[playerid],gDSelectedVItemSlot[playerid]);
					format(string, sizeof(string), "[INFO:] Zabra³eœ item ze schowka (ze slotu %d)", gDSelectedVItemSlot[playerid]);
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
					PlayerActionMessage(playerid, 15.0, "zabiera przedmiot ze schowka");
					return 1;
				}
				else // wyrzuc item
				{
					if(VSlotItemTypeCompare(gDSelectedVItemVID[playerid], gDSelectedVItemSlot[playerid], 1) && VSlotParam6(gDSelectedVItemVID[playerid], gDSelectedVItemSlot[playerid]) > 1)
					{
						ShowPlayerDialog(playerid,DIALOG_VITEM_3,DIALOG_STYLE_INPUT,"Wpisz iloœæ","Wpisz ile itemów danego typu chcesz wyrzuciæ","Wyrzuæ","Anuluj");
						return 1;
					}
					RemoveVehItemEx(gDSelectedVItemVID[playerid], gDSelectedVItemSlot[playerid]);
					format(string, sizeof(string), "[INFO:] Wyrzuci³eœ item z domu (ze slotu %d)", gDSelectedVItemSlot[playerid]);
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
					PlayerActionMessage(playerid, 15.0, "wyrzuca przedmiot ze schowka");
					return 1;
				}
			}
			else
				ShowPVItems(playerid, gDSelectedVItemVID[playerid], gDSelectedVItemVTSpace[playerid]);
		}
		case DIALOG_VITEM_3:
		{
			if(response)
			{
				new howMuch = strval(inputtext);
				if(VSlotParam6(gDSelectedVItemVID[playerid], gDSelectedVItemSlot[playerid]) <= 0)
				{
					RemoveVehItemEx(gDSelectedVItemVID[playerid], gDSelectedVItemSlot[playerid]);
					format(string, sizeof(string), "[INFO:] Wyrzuci³eœ item ze slotu %d", gDSelectedVItemSlot[playerid]);
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2,string);
					return 1;
				}
				if(howMuch > VSlotParam6(gDSelectedVItemVID[playerid], gDSelectedVItemSlot[playerid]))
				{
					ShowPlayerDialog(playerid,DIALOG_VITEM_3,DIALOG_STYLE_INPUT,"Wpisz iloœæ","Nie posiadasz tyle przedmiotów danego typu !\nWpisz now¹ wartoœæ","Wyrzuæ","Anuluj");
					return 1;
				}
				else if(howMuch == 0)
				{
					ShowPlayerDialog(playerid,DIALOG_VITEM_3,DIALOG_STYLE_INPUT,"Wpisz iloœæ","Poda³eœ b³êdn¹ wartoœæ\nWpisz now¹","Wyrzuæ","Anuluj");
					return 1;
				}
				RemoveVehItemEx(gDSelectedVItemVID[playerid], gDSelectedVItemSlot[playerid], howMuch);
				format(string, sizeof(string), "[INFO:] Wyrzuci³eœ %d itemów", howMuch);
				SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
			}
			else
				goto selectVItem;
			return 1;
		}
		case DIALOG_VITEM_4:
		{
			if(response)
			{
				if( strval(inputtext) <= 0 || strval(inputtext) > VSlotParam6(gDSelectedVItemVID[playerid], gDSelectedVItemSlot[playerid]) )
				{
					ShowPlayerDialog(playerid,DIALOG_VITEM_4,DIALOG_STYLE_INPUT,"Wpisz iloœæ", "Poda³eœ nieprawid³ow¹ wartoœæ !\nWpisz wartoœæ ponownie","Akceptuj","Wróæ");
					return 1;
				}
				new howMuch = strval(inputtext);
				new slotin;
				if (gDSelectedVItemSlot[playerid] == 1)
				{
					if(PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem1type], gVehData[gDSelectedVItemVID[playerid]-1][VItem1]) < howMuch)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie uniesiesz tylu itemów !");
						format(string, sizeof(string), "[INFO:] Mo¿esz przenieœæ tylko %d tych itemów", PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem1type], gVehData[gDSelectedVItemVID[playerid]-1][VItem1]));
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
						return 1;
					}
					slotin = InsertPlayerItemEx(playerid,
						gVehData[gDSelectedVItemVID[playerid]-1][VItem1type],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem1],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem1param],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem1param2],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem1param3],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem1param4],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem1param5],
						howMuch);
					if(slotin == 0)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
						return 1;
					}
				}
				else if (gDSelectedVItemSlot[playerid] == 2)
				{
					if(PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem2type], gVehData[gDSelectedVItemVID[playerid]-1][VItem2]) < howMuch)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie uniesiesz tylu itemów !");
						format(string, sizeof(string), "[INFO:] Mo¿esz przenieœæ tylko %d tych itemów", PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem2type], gVehData[gDSelectedVItemVID[playerid]-1][VItem2]));
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
						return 1;
					}
					slotin = InsertPlayerItemEx(playerid,
						gVehData[gDSelectedVItemVID[playerid]-1][VItem2type],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem2],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem2param],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem2param2],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem2param3],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem2param4],
						gVehData[gDSelectedVItemVID[playerid]-1][VItem2param5],
						howMuch);
					if(slotin == 0)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
						return 1;
					}
				}
				else if (gDSelectedVItemSlot[playerid] == 3)
				{
					if(PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem3type], gVehData[gDSelectedVItemVID[playerid]-1][VItem3]) < howMuch)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie uniesiesz tylu itemów !");
						format(string, sizeof(string), "[INFO:] Mo¿esz przenieœæ tylko %d tych itemów", PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem3type], gVehData[gDSelectedVItemVID[playerid]-1][VItem3]));
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
						return 1;
					}
					slotin = InsertPlayerItemEx(playerid,
					gVehData[gDSelectedVItemVID[playerid]-1][VItem3type],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem3],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem3param],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem3param2],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem3param3],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem3param4],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem3param5],
					howMuch);
					if(slotin == 0)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
						return 1;
					}
				}
				else if (gDSelectedVItemSlot[playerid] == 4)
				{
					if(PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem4type], gVehData[gDSelectedVItemVID[playerid]-1][VItem4]) < howMuch)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie uniesiesz tylu itemów !");
						format(string, sizeof(string), "[INFO:] Mo¿esz przenieœæ tylko %d tych itemów", PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem4type], gVehData[gDSelectedVItemVID[playerid]-1][VItem4]));
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
						return 1;
					}
					slotin = InsertPlayerItemEx(playerid,
					gVehData[gDSelectedVItemVID[playerid]-1][VItem4type],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem4],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem4param],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem4param2],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem4param3],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem4param4],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem4param5],
					howMuch);
					if(slotin == 0)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
						return 1;
					}
				}
				else if (gDSelectedVItemSlot[playerid] == 5)
				{
					if(PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem5type], gVehData[gDSelectedVItemVID[playerid]-1][VItem5]) < howMuch)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie uniesiesz tylu itemów !");
						format(string, sizeof(string), "[INFO:] Mo¿esz przenieœæ tylko %d tych itemów", PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem5type], gVehData[gDSelectedVItemVID[playerid]-1][VItem5]));
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
						return 1;
					}
					slotin = InsertPlayerItemEx(playerid,
					gVehData[gDSelectedVItemVID[playerid]-1][VItem5type],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem5],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem5param],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem5param2],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem5param3],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem5param4],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem5param5],
					howMuch);
					if(slotin == 0)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
						return 1;
					}
				}
				else if (gDSelectedVItemSlot[playerid] == 6)
				{
					if(PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem6type], gVehData[gDSelectedVItemVID[playerid]-1][VItem6]) < howMuch)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie uniesiesz tylu itemów !");
						format(string, sizeof(string), "[INFO:] Mo¿esz przenieœæ tylko %d tych itemów", PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem6type], gVehData[gDSelectedVItemVID[playerid]-1][VItem6]));
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
						return 1;
					}
					slotin = InsertPlayerItemEx(playerid,
					gVehData[gDSelectedVItemVID[playerid]-1][VItem6type],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem6],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem6param],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem6param2],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem6param3],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem6param4],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem6param5],
					howMuch);
					if(slotin == 0)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
						return 1;
					}
				}
				else if (gDSelectedVItemSlot[playerid] == 7)
				{
					if(PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem7type], gVehData[gDSelectedVItemVID[playerid]-1][VItem7]) < howMuch)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie uniesiesz tylu itemów !");
						format(string, sizeof(string), "[INFO:] Mo¿esz przenieœæ tylko %d tych itemów", PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem7type], gVehData[gDSelectedVItemVID[playerid]-1][VItem7]));
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
						return 1;
					}
					slotin = InsertPlayerItemEx(playerid,
					gVehData[gDSelectedVItemVID[playerid]-1][VItem7type],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem7],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem7param],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem7param2],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem7param3],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem7param4],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem7param5],
					howMuch);
					if(slotin == 0)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
						return 1;
					}
				}
				else if (gDSelectedVItemSlot[playerid] == 8)
				{
					if(PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem8type], gVehData[gDSelectedVItemVID[playerid]-1][VItem8]) < howMuch)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie uniesiesz tylu itemów !");
						format(string, sizeof(string), "[INFO:] Mo¿esz przenieœæ tylko %d tych itemów", PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem8type], gVehData[gDSelectedVItemVID[playerid]-1][VItem8]));
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
						return 1;
					}
					slotin = InsertPlayerItemEx(playerid,
					gVehData[gDSelectedVItemVID[playerid]-1][VItem8type],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem8],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem8param],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem8param2],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem8param3],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem8param4],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem8param5],
					howMuch);
					if(slotin == 0)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
						return 1;
					}
				}
				else if (gDSelectedVItemSlot[playerid] == 9)
				{
					if(PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem9type], gVehData[gDSelectedVItemVID[playerid]-1][VItem9]) < howMuch)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie uniesiesz tylu itemów !");
						format(string, sizeof(string), "[INFO:] Mo¿esz przenieœæ tylko %d tych itemów", PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem9type], gVehData[gDSelectedVItemVID[playerid]-1][VItem9]));
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
						return 1;
					}
					slotin = InsertPlayerItemEx(playerid,
					gVehData[gDSelectedVItemVID[playerid]-1][VItem9type],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem9],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem9param],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem9param2],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem9param3],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem9param4],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem9param5],
					howMuch);
					if(slotin == 0)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
						return 1;
					}
				}
				else if (gDSelectedVItemSlot[playerid] == 10)
				{
					if(PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem10type], gVehData[gDSelectedVItemVID[playerid]-1][VItem10]) < howMuch)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie uniesiesz tylu itemów !");
						format(string, sizeof(string), "[INFO:] Mo¿esz przenieœæ tylko %d tych itemów", PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem10type], gVehData[gDSelectedVItemVID[playerid]-1][VItem10]));
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
						return 1;
					}
					slotin = InsertPlayerItemEx(playerid,
					gVehData[gDSelectedVItemVID[playerid]-1][VItem10type],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem10],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem10param],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem10param2],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem10param3],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem10param4],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem10param5],
					howMuch);
					if(slotin == 0)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
						return 1;
					}
				}
				else if (gDSelectedVItemSlot[playerid] == 11)
				{
					if(PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem11type], gVehData[gDSelectedVItemVID[playerid]-1][VItem11]) < howMuch)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie uniesiesz tylu itemów !");
						format(string, sizeof(string), "[INFO:] Mo¿esz przenieœæ tylko %d tych itemów", PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem11type], gVehData[gDSelectedVItemVID[playerid]-1][VItem11]));
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
						return 1;
					}
					slotin = InsertPlayerItemEx(playerid,
					gVehData[gDSelectedVItemVID[playerid]-1][VItem11type],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem11],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem11param],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem11param2],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem11param3],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem11param4],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem11param5],
					howMuch);
					if(slotin == 0)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
						return 1;
					}
				}
				else if (gDSelectedVItemSlot[playerid] == 12)
				{
					if(PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem12type], gVehData[gDSelectedVItemVID[playerid]-1][VItem12]) < howMuch)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie uniesiesz tylu itemów !");
						format(string, sizeof(string), "[INFO:] Mo¿esz przenieœæ tylko %d tych itemów", PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem12type], gVehData[gDSelectedVItemVID[playerid]-1][VItem12]));
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
						return 1;
					}
					slotin = InsertPlayerItemEx(playerid,
					gVehData[gDSelectedVItemVID[playerid]-1][VItem12type],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem12],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem12param],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem12param2],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem12param3],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem12param4],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem12param5],
					howMuch);
					if(slotin == 0)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
						return 1;
					}
				}
				else if (gDSelectedVItemSlot[playerid] == 13)
				{
					if(PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem13type], gVehData[gDSelectedVItemVID[playerid]-1][VItem13]) < howMuch)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie uniesiesz tylu itemów !");
						format(string, sizeof(string), "[INFO:] Mo¿esz przenieœæ tylko %d tych itemów", PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem13type], gVehData[gDSelectedVItemVID[playerid]-1][VItem13]));
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
						return 1;
					}
					slotin = InsertPlayerItemEx(playerid,
					gVehData[gDSelectedVItemVID[playerid]-1][VItem13type],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem13],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem13param],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem13param2],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem13param3],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem13param4],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem13param5],
					howMuch);
					if(slotin == 0)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
						return 1;
					}
				}
				else if (gDSelectedVItemSlot[playerid] == 14)
				{
					if(PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem14type], gVehData[gDSelectedVItemVID[playerid]-1][VItem14]) < howMuch)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie uniesiesz tylu itemów !");
						format(string, sizeof(string), "[INFO:] Mo¿esz przenieœæ tylko %d tych itemów", PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem14type], gVehData[gDSelectedVItemVID[playerid]-1][VItem14]));
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
						return 1;
					}
					slotin = InsertPlayerItemEx(playerid,
					gVehData[gDSelectedVItemVID[playerid]-1][VItem14type],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem14],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem14param],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem14param2],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem14param3],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem14param4],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem14param5],
					howMuch);
					if(slotin == 0)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
						return 1;
					}
				}
				else if (gDSelectedVItemSlot[playerid] == 15)
				{
					if(PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem15type], gVehData[gDSelectedVItemVID[playerid]-1][VItem15]) < howMuch)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie uniesiesz tylu itemów !");
						format(string, sizeof(string), "[INFO:] Mo¿esz przenieœæ tylko %d tych itemów", PlayerCountMaxItemCarry(playerid, gVehData[gDSelectedVItemVID[playerid]-1][VItem15type], gVehData[gDSelectedVItemVID[playerid]-1][VItem15]));
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
						return 1;
					}
					slotin = InsertPlayerItemEx(playerid,
					gVehData[gDSelectedVItemVID[playerid]-1][VItem15type],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem15],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem15param],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem15param2],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem15param3],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem15param4],
					gVehData[gDSelectedVItemVID[playerid]-1][VItem15param5],
					howMuch);
					if(slotin == 0)
					{
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Nie mo¿esz przenosiæ wiêcej przedmiotów !");
						return 1;
					}
				}
				RemoveVehItemEx(gDSelectedVItemVID[playerid], gDSelectedVItemSlot[playerid], howMuch);
				format(string, sizeof(string), "[INFO:] Zabra³eœ item ze schowka (ze slotu %d)", gDSelectedVItemSlot[playerid]);
				SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
				PlayerActionMessage(playerid, 15.0, "zabiera przedmiot ze schowka");
				return 1;
			}
			else
			{
				goto selectVItem;
				return 1;
			}
		}
		case DIALOG_HITEM_INS_1:
		{
			if(response)
			{
				gSelectedSlot[playerid] = listitem+1;
				SlotParam5(playerid, gSelectedSlot[playerid]);
				if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1))
				{
					ShowPlayerDialog(playerid,DIALOG_HITEM_INS_2,DIALOG_STYLE_INPUT,"Wpisz iloœæ","Wpisz ile itemów danego typu chcesz schowaæ","Schowaj","Wróæ");
					return 1;
				}
				if(InsertHouseItem(gDSelectedHItemHouse[playerid], PSlotItemType(playerid, gSelectedSlot[playerid]), ShowSlotItem(playerid, gSelectedSlot[playerid]), SlotParam1(playerid, gSelectedSlot[playerid]), SlotParam2(playerid, gSelectedSlot[playerid]), SlotParam3(playerid, gSelectedSlot[playerid]), SlotParam4(playerid, gSelectedSlot[playerid]), gDSelectedItemP5[playerid], 1) == 0)
				{
					SendClientMessage(playerid, COLOR_RED, "[INFO:] Nie masz ju¿ miejsca w schowku !");
					return 1;
				}
				if(PSlotItemTypeCompare(playerid,  gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 7) ||  SlotItem(playerid, gSelectedSlot[playerid], 9))
				{
					if(gGlassesWearingModel[playerid] == SlotParam1(playerid, gSelectedSlot[playerid]))
					{
						gGlassesWearingModel[playerid] = 0;
						StopPlayerHoldingObject(playerid);
					}
					if(gHatWearingModel[playerid] == SlotParam1(playerid, gSelectedSlot[playerid]))
					{
						RemovePlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS-2);
						gHatWearingModel[playerid] = 255;
					}
				}
				RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);

				format(string, sizeof(string), "[INFO:] Schowa³eœ item do schowka ze slotu %d", gSelectedSlot[playerid]);
				SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);

				PlayerActionMessage(playerid, 15.0, "wyjmuje przedmiot i wk³ada go do schowka");

				return 1;
			}
		}
		case DIALOG_HITEM_INS_2:
		{
			if(response)
			{
				new howMuch = strval(inputtext);
				new hSlot = HHaveItem(gDSelectedHItemHouse[playerid], PSlotItemType(playerid, gSelectedSlot[playerid]), ShowSlotItem(playerid, gSelectedSlot[playerid]));
				if(SlotParam6(playerid, gSelectedSlot[playerid]) <= 0)
				{
					if(hSlot > 0)
					{
						SetHSlotParam6(gDSelectedHItemHouse[playerid], hSlot, HSlotParam6(gDSelectedHItemHouse[playerid], hSlot) + 1);
					}
					else
					{
						if(InsertHouseItem(gDSelectedHItemHouse[playerid], PSlotItemType(playerid, gSelectedSlot[playerid]), ShowSlotItem(playerid, gSelectedSlot[playerid]), SlotParam1(playerid, gSelectedSlot[playerid]), SlotParam2(playerid, gSelectedSlot[playerid]), SlotParam3(playerid, gSelectedSlot[playerid]), SlotParam4(playerid, gSelectedSlot[playerid]), gDSelectedItemP5[playerid], 1 ) == 0)
						{
							SendClientMessage(playerid, COLOR_RED, "[INFO:] Nie masz ju¿ miejsca w schowku !");
							return 1;
						}
					}
					RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
					format(string, sizeof(string), "[INFO:] Schowa³eœ do schowka item ze slotu %d", gSelectedSlot[playerid]);
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2,string);
					return 1;
				}
				if(howMuch > SlotParam6(playerid, gSelectedSlot[playerid]))
				{
					ShowPlayerDialog(playerid,DIALOG_HITEM_INS_2,DIALOG_STYLE_INPUT,"Wpisz iloœæ","Nie posiadasz tyle przedmiotów danego typu !\nWpisz now¹ wartoœæ","Wyrzuæ","Anuluj");
					return 1;
				}
				if(howMuch == 0)
				{
					ShowPlayerDialog(playerid,DIALOG_HITEM_INS_2,DIALOG_STYLE_INPUT,"Wpisz iloœæ","Poda³eœ b³êdn¹ wartoœæ\nWpisz now¹","Wyrzuæ","Anuluj");
					return 1;
				}
				if(SlotParam6(playerid, gSelectedSlot[playerid])-howMuch == 0)
				{
					if(hSlot > 0)
						SetHSlotParam6(gDSelectedHItemHouse[playerid], hSlot, HSlotParam6(gDSelectedHItemHouse[playerid], hSlot) + howMuch);
					else
					{
						if(InsertHouseItem(gDSelectedHItemHouse[playerid], PSlotItemType(playerid, gSelectedSlot[playerid]), ShowSlotItem(playerid, gSelectedSlot[playerid]), SlotParam1(playerid, gSelectedSlot[playerid]), SlotParam2(playerid, gSelectedSlot[playerid]), SlotParam3(playerid, gSelectedSlot[playerid]), SlotParam4(playerid, gSelectedSlot[playerid]), gDSelectedItemP5[playerid], SlotParam6(playerid, gSelectedSlot[playerid]) ) == 0)
						{
							SendClientMessage(playerid, COLOR_RED, "[INFO:] Nie masz ju¿ miejsca w schowku !");
							return 1;
						}
					}
					RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid], howMuch);
				}
				else
				{
					if(hSlot > 0)
						SetHSlotParam6(gDSelectedHItemHouse[playerid], hSlot, HSlotParam6(gDSelectedHItemHouse[playerid], hSlot) + howMuch);
					else
					{
						if(InsertHouseItem(gDSelectedHItemHouse[playerid], PSlotItemType(playerid, gSelectedSlot[playerid]), ShowSlotItem(playerid, gSelectedSlot[playerid]), SlotParam1(playerid, gSelectedSlot[playerid]), SlotParam2(playerid, gSelectedSlot[playerid]), SlotParam3(playerid, gSelectedSlot[playerid]), SlotParam4(playerid, gSelectedSlot[playerid]), gDSelectedItemP5[playerid], howMuch) == 0)
						{
							SendClientMessage(playerid, COLOR_RED, "[INFO:] Nie masz ju¿ miejsca w schowku !");
							return 1;
						}
					}
					SetPSlotParam6(playerid, gSelectedSlot[playerid], SlotParam6(playerid, gSelectedSlot[playerid])-howMuch);
				}
				format(string, sizeof(string), "[INFO:] Schowa³eœ do schowka %d itemów ze slotu %d", howMuch, gSelectedSlot[playerid]);
				SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
				return 1;
			}
		}
		case DIALOG_VITEM_INS_1:
		{
			if(response)
			{
				gSelectedSlot[playerid] = listitem+1;
				SlotParam5(playerid, gSelectedSlot[playerid]);
				if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1))
				{
					ShowPlayerDialog(playerid,DIALOG_VITEM_INS_2,DIALOG_STYLE_INPUT,"Wpisz iloœæ","Wpisz ile itemów danego typu chcesz schowaæ","Schowaj","Wróæ");
					return 1;
				}
				if(InsertVehItem(gDSelectedVItemVID[playerid], PSlotItemType(playerid, gSelectedSlot[playerid]), ShowSlotItem(playerid, gSelectedSlot[playerid]), SlotParam1(playerid, gSelectedSlot[playerid]), SlotParam2(playerid, gSelectedSlot[playerid]), SlotParam3(playerid, gSelectedSlot[playerid]), SlotParam4(playerid, gSelectedSlot[playerid]), gDSelectedItemP5[playerid], 1) == 0)
				{
					SendClientMessage(playerid, COLOR_RED, "[INFO:] Nie masz ju¿ miejsca w schowku !");
					return 1;
				}
				if(PSlotItemTypeCompare(playerid,  gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 7) ||  SlotItem(playerid, gSelectedSlot[playerid], 9))
				{
					if(gGlassesWearingModel[playerid] == SlotParam1(playerid, gSelectedSlot[playerid]))
					{
						gGlassesWearingModel[playerid] = 0;
						StopPlayerHoldingObject(playerid);
					}
					if(gHatWearingModel[playerid] == SlotParam1(playerid, gSelectedSlot[playerid]))
					{
						RemovePlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS-2);
						gHatWearingModel[playerid] = 255;
					}
				}
				RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);

				format(string, sizeof(string), "[INFO:] Schowa³eœ item do schowka ze slotu %d", gSelectedSlot[playerid]);
				SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);

				PlayerActionMessage(playerid, 15.0, "wyjmuje przedmiot i wk³ada go do schowka");

				return 1;
			}
		}
		case DIALOG_VITEM_INS_2:
		{
			if(response)
			{
				new howMuch = strval(inputtext);
				if(SlotParam6(playerid, gSelectedSlot[playerid]) <= 0)
				{
					if(InsertVehItem(gDSelectedVItemVID[playerid], PSlotItemType(playerid, gSelectedSlot[playerid]), ShowSlotItem(playerid, gSelectedSlot[playerid]), SlotParam1(playerid, gSelectedSlot[playerid]), SlotParam2(playerid, gSelectedSlot[playerid]), SlotParam3(playerid, gSelectedSlot[playerid]), SlotParam4(playerid, gSelectedSlot[playerid]), gDSelectedItemP5[playerid], 1 ) == 0)
					{
						SendClientMessage(playerid, COLOR_RED, "[INFO:] Nie masz ju¿ miejsca w schowku !");
						return 1;
					}
					RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
					format(string, sizeof(string), "[INFO:] Schowa³eœ do schowka item ze slotu %d", gSelectedSlot[playerid]);
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2,string);
					return 1;
				}
				if(howMuch > SlotParam6(playerid, gSelectedSlot[playerid]))
				{
					ShowPlayerDialog(playerid,DIALOG_VITEM_INS_2,DIALOG_STYLE_INPUT,"Wpisz iloœæ","Nie posiadasz tyle przedmiotów danego typu !\nWpisz now¹ wartoœæ","Wyrzuæ","Anuluj");
					return 1;
				}
				if(howMuch == 0)
				{
					ShowPlayerDialog(playerid,DIALOG_VITEM_INS_2,DIALOG_STYLE_INPUT,"Wpisz iloœæ","Poda³eœ b³êdn¹ wartoœæ\nWpisz now¹","Wyrzuæ","Anuluj");
					return 1;
				}
				if(InsertVehItem(gDSelectedVItemVID[playerid], PSlotItemType(playerid, gSelectedSlot[playerid]), ShowSlotItem(playerid, gSelectedSlot[playerid]), SlotParam1(playerid, gSelectedSlot[playerid]), SlotParam2(playerid, gSelectedSlot[playerid]), SlotParam3(playerid, gSelectedSlot[playerid]), SlotParam4(playerid, gSelectedSlot[playerid]), gDSelectedItemP5[playerid], SlotParam6(playerid, gSelectedSlot[playerid]) ) == 0)
				{
					SendClientMessage(playerid, COLOR_RED, "[INFO:] Nie masz ju¿ miejsca w schowku !");
					return 1;
				}
				format(string, sizeof(string), "[INFO:] Schowa³eœ do schowka %d itemów ze slotu %d", howMuch, gSelectedSlot[playerid]);
				RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid], howMuch);
				SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
				return 1;
			}
		}
		case DIALOG_ITEM_1: // Items main menu
		{
			if(response)
			{
				/*
				TRICKY: dont change it unless u know what are u doing...
				Which page should be loaded ?
				*/
				gSelectedSlot[playerid] = listitem+1;
				if(gPreviousDialogList[playerid] != -1)
					gSelectedSlot[playerid] = gPreviousDialogList[playerid];
				else
					gPreviousDialogList[playerid] = gSelectedSlot[playerid];

				/* Food */
				if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && (SlotItem(playerid, gSelectedSlot[playerid], 9) || SlotItem(playerid, gSelectedSlot[playerid], 128) || SlotItem(playerid, gSelectedSlot[playerid], 129) ||
					SlotItem(playerid, gSelectedSlot[playerid], 130) || SlotItem(playerid, gSelectedSlot[playerid], 131) || SlotItem(playerid, gSelectedSlot[playerid], 132)))
				{
					ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³ania","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Zjedz","Akceptuj","Wróæ");
				}
				/* Fluids */
				else if((PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && (SlotItem(playerid, gSelectedSlot[playerid], 125) || SlotItem(playerid, gSelectedSlot[playerid], 126) ||
						SlotItem(playerid, gSelectedSlot[playerid], 127) || SlotItem(playerid, gSelectedSlot[playerid], 133))) || (PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 6) &&
						(SlotItem(playerid, gSelectedSlot[playerid], 1) || SlotItem(playerid, gSelectedSlot[playerid], 2) || SlotItem(playerid, gSelectedSlot[playerid], 3) ||
						SlotItem(playerid, gSelectedSlot[playerid], 4) || SlotItem(playerid, gSelectedSlot[playerid], 5) || SlotItem(playerid, gSelectedSlot[playerid], 6) ||
						SlotItem(playerid, gSelectedSlot[playerid], 7) || SlotItem(playerid, gSelectedSlot[playerid], 8) || SlotItem(playerid, gSelectedSlot[playerid], 133))))
				{
					ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³ania","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Wypij","Akceptuj","Wróæ");
				}
				/* Drugs */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && (SlotItem(playerid, gSelectedSlot[playerid], 134) || SlotItem(playerid, gSelectedSlot[playerid], 135) || SlotItem(playerid, gSelectedSlot[playerid], 136) ||
					SlotItem(playerid, gSelectedSlot[playerid], 137) || SlotItem(playerid, gSelectedSlot[playerid], 138) || SlotItem(playerid, gSelectedSlot[playerid], 139) || SlotItem(playerid, gSelectedSlot[playerid], 140) || SlotItem(playerid, gSelectedSlot[playerid], 141) ||
					SlotItem(playerid, gSelectedSlot[playerid], 142)))
				{
					ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³ania","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Za¿yj","Akceptuj","Wróæ");
				}
				/* Book */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && SlotItem(playerid, gSelectedSlot[playerid], 166))
				{
					ShowPlayerDialog(playerid, DIALOG_ITEM_2, DIALOG_STYLE_LIST, "Dzia³ania", "1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Czytaj", "Akceptuj", "Wróæ");
				}
				/* Weed seed */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && SlotItem(playerid, gSelectedSlot[playerid], 163))
				{
					ShowPlayerDialog(playerid, DIALOG_ITEM_2, DIALOG_STYLE_LIST, "Dzia³ania", "1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. ZasadŸ", "Akceptuj", "Wróæ");
				}
				/* Weed lives */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && SlotItem(playerid, gSelectedSlot[playerid], 164))
				{
					ShowPlayerDialog(playerid, DIALOG_ITEM_2, DIALOG_STYLE_LIST, "Dzia³ania", "1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Skrêæ jointa", "Akcpetuj", "Wróæ");
				}
				/* Joint */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && SlotItem(playerid, gSelectedSlot[playerid], 165))
				{
					ShowPlayerDialog(playerid, DIALOG_ITEM_2, DIALOG_STYLE_LIST, "Dzia³ania", "1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Zapal jointa", "Akcpetuj", "Wróæ");
				}
				/* Armor */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && (SlotItem(playerid, gSelectedSlot[playerid], 22) || SlotItem(playerid, gSelectedSlot[playerid], 23)))
				{
					ShowPlayerDialog(playerid, DIALOG_ITEM_2, DIALOG_STYLE_LIST, "Dzia³ania", "1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Za³ó¿", "Akceptuj", "Wróc");
				}
				/* SIM Card Extension */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 17))
				{
					ShowPlayerDialog(playerid, DIALOG_ITEM_2, DIALOG_STYLE_LIST, "Dzia³ania", "1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Do³aduj wybran¹ karte SIM", "Akceptuj", "Wróc");
				}
				/* SIM Card */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 16))
				{
					ShowPlayerDialog(playerid, DIALOG_ITEM_2, DIALOG_STYLE_LIST, "Dzia³ania", "1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. W³ó¿ karte SIM do telefonu", "Akceptuj", "Wróæ");
				}
				/* Lock changer */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 15))
				{
					ShowPlayerDialog(playerid, DIALOG_ITEM_2, DIALOG_STYLE_LIST, "Dzia³ania", "1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Wymieñ zamek", "Akceptuj", "Wróæ");
				}
				/* Key maker */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && SlotItem(playerid, gSelectedSlot[playerid], 143))
				{
					ShowPlayerDialog(playerid, DIALOG_ITEM_2, DIALOG_STYLE_LIST, "Dzia³ania", "1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Wybierz klucz do skopiowania", "Akceptuj", "Wróæ");
				}
				/* GPS */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && (SlotItem(playerid, gSelectedSlot[playerid], 12)))
				{
					if(SlotParam1(playerid, gSelectedSlot[playerid]))
						ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Wy³¹cz GPS\n5. Poka¿ liste miejsc","Akceptuj","Wróæ");
					else
						ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. W³¹cz GPS\n5. Poka¿ liste miejsc","Akceptuj","Wróæ");
				}
				/* Walky-talky */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && (SlotItem(playerid, gSelectedSlot[playerid], 2) || SlotItem(playerid, gSelectedSlot[playerid], 13)))
				{
					if(SlotParam1(playerid, gSelectedSlot[playerid]))
						ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Wy³¹cz krótkofalówke\n5. Kana³\n6. Pomoc","Akceptuj","Wróæ");
					else
						ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. W³¹cz krótkofalówke\n5. Kana³\n6. Pomoc","Akceptuj","Wróæ");
				}
				/* Player personal documents */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && (SlotItem(playerid, gSelectedSlot[playerid], 5) || SlotItem(playerid, gSelectedSlot[playerid], 6) || SlotItem(playerid, gSelectedSlot[playerid], 19)))
					ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Poka¿ dokument\n5. Poka¿ dokument osobie","Akceptuj","Wróæ");
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 18))
				{
					BWORD_ITEM_1:
					if(!SlotParam3(playerid, gSelectedSlot[playerid]))
					{
						ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Poka¿ dokument\n5. Poka¿ dokument osobie\n6. Przejdz do obowi¹zków egzaminatora\n7. Pomoc","Akceptuj","Wróæ");
					}
					else
					{
						ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Poka¿ dokument\n5. Poka¿ dokument osobie\n6. WeŸ urlop\n7. Pomoc","Akceptuj", "Wróc");
					}
				}
				/* House alarm */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && SlotItem(playerid, gSelectedSlot[playerid], 151))
					ShowPlayerDialog(playerid, DIALOG_ITEM_2, DIALOG_STYLE_LIST, "Dzia³anie", "1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Zamontuj alarm", "Akceptuj", "Wróæ");
				/* Mountable vehicle part */
				else if((PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && (SlotItem(playerid, gSelectedSlot[playerid], 11) || SlotItem(playerid, gSelectedSlot[playerid], 122) || SlotItem(playerid, gSelectedSlot[playerid], 123) || SlotItem(playerid, gSelectedSlot[playerid], 124) || 
					SlotItem(playerid, gSelectedSlot[playerid], 152) || SlotItem(playerid, gSelectedSlot[playerid], 153) || SlotItem(playerid, gSelectedSlot[playerid], 154) || SlotItem(playerid, gSelectedSlot[playerid], 155) || SlotItem(playerid, gSelectedSlot[playerid], 156) ||
					SlotItem(playerid, gSelectedSlot[playerid], 157) || SlotItem(playerid, gSelectedSlot[playerid], 158) || SlotItem(playerid, gSelectedSlot[playerid], 159) || SlotItem(playerid, gSelectedSlot[playerid], 160) || SlotItem(playerid, gSelectedSlot[playerid], 161) || 
					SlotItem(playerid, gSelectedSlot[playerid], 162))) || (PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 7) || PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 8) || PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 9)))
				{
					ShowPlayerDialog(playerid,DIALOG_ITEM_2, DIALOG_STYLE_LIST,"Dzia³anie","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Zamontuj w pojeŸdzie","Akceptuj","Wróæ");
				}
				/* Fix parts for vehciles - engine */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && SlotItem(playerid, gSelectedSlot[playerid], 175))
				{
					ShowPlayerDialog(playerid, DIALOG_ITEM_2, DIALOG_STYLE_LIST, "Dzia³anie", "1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Napraw pojazd", "Akceptuj", "Wróæ");
				}
				/* Fix parts for vehciles - wheels */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && SlotItem(playerid, gSelectedSlot[playerid], 176))
				{
					ShowPlayerDialog(playerid, DIALOG_ITEM_2, DIALOG_STYLE_LIST, "Dzia³anie", "1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Wymieñ ko³o", "Akceptuj", "Wróæ");
				}
				/* Fix parts for vehciles - bulb */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && SlotItem(playerid, gSelectedSlot[playerid], 7))
				{
					ShowPlayerDialog(playerid, DIALOG_ITEM_2, DIALOG_STYLE_LIST, "Dzia³anie", "1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Wymieñ ¿arówkê", "Akceptuj", "Wróæ");
				}
				/* Fix parts for vehciles - hook */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && SlotItem(playerid, gSelectedSlot[playerid], 10))
				{
					ShowPlayerDialog(playerid, DIALOG_ITEM_2, DIALOG_STYLE_LIST, "Dzia³anie", "1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Zamontuj hak", "Akceptuj", "Wróæ");
				}
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && SlotItem(playerid, gSelectedSlot[playerid], 177))
				{
					ShowPlayerDialog(playerid, DIALOG_ITEM_2, DIALOG_STYLE_LIST, "Dzia³anie", "1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Zamontuj instalacje", "Akceptuj", "Wróæ");
				}
				/* Luck Lottery Ticket */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 10))
					ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Poka¿ skreœlone liczby\n5. Odbierz wygran¹","Akceptuj","Wróæ");
				/* Canister */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 1))
					ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Zatankuj pojazd\n5. Zawartoœæ\n6. Zatankuj kanister","Akceptuj","Wróæ");
				/* Phone */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && (SlotItem(playerid, gSelectedSlot[playerid], 3) || SlotItem(playerid, gSelectedSlot[playerid], 4)))
				{
					BPHONE_ITEM_1:
					if(SlotParam1(playerid, gSelectedSlot[playerid]))
						ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Dzwoñ\n5. Wiadomoœci\n6. Mój numer\n7. Numery publiczne\n8. Ukryj numery\n9. Dane sieci\n10. Wyjmij karte SIM\n11. Wy³¹cz telefon","Akceptuj","Wróæ");
					else
						ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Dzwoñ\n5. Wiadomoœæi\n6. Mój numer\n7. Numery publiczne\n8. Ukryj numery\n9. Dane sieci\n10. Wyjmij karte SIM\n11. W³¹cz telefon","Akceptuj","Wróæ");
				}
				/* Items type 3 */
				else if( ( PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && (SlotItem(playerid, gSelectedSlot[playerid], 6) || SlotItem(playerid, gSelectedSlot[playerid], 8))) || (PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 2)))
					ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. U¿yj","Akceptuj","Wróæ");
				/* Weapons */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1)
					&& ((ShowSlotItem(playerid, gSelectedSlot[playerid]) >= 13	&& ShowSlotItem(playerid, gSelectedSlot[playerid]) <= 32) || (ShowSlotItem(playerid, gSelectedSlot[playerid]) >= 145 && ShowSlotItem(playerid, gSelectedSlot[playerid]) <= 150)))
				{
					ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. WeŸ broñ","Akceptuj","Wróæ");
				}
				/* Aparat */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && ShowSlotItem(playerid, gSelectedSlot[playerid]) == 173)
				{
					ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. WeŸ aparat","Akceptuj","Wróæ");
				}
				/* House radio */
				else if( ( PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && SlotItem(playerid, gSelectedSlot[playerid], 106) ) )
					ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1.Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Ustaw radio","Akceptuj","Wróæ");
				/* Glasses */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 7))
				{
					if(IsPlayerHoldingObject(playerid) && SlotParam1(playerid, gSelectedSlot[playerid]) == gGlassesWearingModel[playerid])
						ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Zdejmij","Akceptuj","Wróæ");
					else
						ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Za³ó¿","Akceptuj","Wróæ");
				}
				/* Hats */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 9))
				{
					if(IsPlayerAttachedObjectSlotUsed(playerid, MAX_PLAYER_ATTACHED_OBJECTS-2) && SlotParam1(playerid, gSelectedSlot[playerid]) == gHatWearingModel[playerid])
						ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Zdejmij","Akceptuj","Wróæ");
					else
						ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Za³ó¿","Akceptuj","Wróæ");
				}
				/* Watches */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && (SlotItem(playerid, gSelectedSlot[playerid], 107) || SlotItem(playerid, gSelectedSlot[playerid], 108) || SlotItem(playerid, gSelectedSlot[playerid], 109) ||
					SlotItem(playerid, gSelectedSlot[playerid], 110) || SlotItem(playerid, gSelectedSlot[playerid], 111) || SlotItem(playerid, gSelectedSlot[playerid], 112) || SlotItem(playerid, gSelectedSlot[playerid], 113) ||
					SlotItem(playerid, gSelectedSlot[playerid], 114) || SlotItem(playerid, gSelectedSlot[playerid], 115) || SlotItem(playerid, gSelectedSlot[playerid], 116) || SlotItem(playerid, gSelectedSlot[playerid], 117) ||
					SlotItem(playerid, gSelectedSlot[playerid], 118) || SlotItem(playerid, gSelectedSlot[playerid], 119) || SlotItem(playerid, gSelectedSlot[playerid], 120) || SlotItem(playerid, gSelectedSlot[playerid], 121)))
				{
					if(IsPlayerAttachedObjectSlotUsed(playerid, MAX_PLAYER_ATTACHED_OBJECTS-4) && SlotParam1(playerid, gSelectedSlot[playerid]))
						ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Zdejmij","Akceptuj","Wróæ");
					else
						ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Za³ó¿","Akceptuj","Wróæ");
				}
				/* Bandanas */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 14))
				{
					if(SlotParam1(playerid, gSelectedSlot[playerid]))
						ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Zdejmij","Akceptuj","Wróæ");
					else
						ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Za³ó¿","Akceptuj","Wróæ");
				}
				/* Clothes */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 24))
				{
					ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Przebie¿ siê","Akceptuj","Wróæ");
				}
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && SlotItem(playerid, gSelectedSlot[playerid], 178))
				{
					ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Ustaw tablice","Akceptuj","Wróæ");
				}
				/* Mapa */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && SlotItem(playerid, gSelectedSlot[playerid], 105))
				{
					ShowPlayerDialog(playerid, DIALOG_ITEM_2, DIALOG_STYLE_LIST, "Dzia³anie", "1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar\n4. Poka¿ liste miejsc", "Akceptuj", "Wróæ");
				}
				else // pozostale itemy
					ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie","1. Przeka¿ item\n2. Wyrzuæ item\n3. Sprzedaj towar","Akceptuj","Wróæ");
				return 1;
			}
		}
		case DIALOG_ITEM_2: // Items sub menu
		{
			if(response)
			{
				/* Item giving */
				if(listitem == 0)
				{
					if( PSlotItemType( playerid, gSelectedSlot[playerid] ) == 0 )
					{
						SendClientMessage( playerid, COLOR_ORANGE, "[INFO:] Nie mo¿esz przekazaæ pustego slotu !");
						return 1;
					}
					ShowPlayerDialog(playerid,DIALOG_ITEM_TRANSFER_COUNT,DIALOG_STYLE_INPUT,"Przekazywanie itema","Podaj ile itemów chcesz przekazaæ.","Dalej","Wróæ");
					return 1;
				}
				/* Item drop */
				else if(listitem == 1)
				{
					if(!PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotParam6(playerid, gSelectedSlot[playerid]) > 1)
					{
						ShowPlayerDialog(playerid,DIALOG_ITEM_REMOVE,DIALOG_STYLE_INPUT,"Wpisz iloœæ","Wpisz ile itemów danego typu chcesz wyrzuciæ","Wyrzuæ","Wróæ");
						return 1;
					}
					if(PItemSlotStatus(playerid, gSelectedSlot[playerid]))
					{
						if(PSlotItemTypeCompare(playerid,  gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 7) ||  SlotItem(playerid, gSelectedSlot[playerid], 9))
						{
							if(gGlassesWearingModel[playerid] == SlotParam1(playerid, gSelectedSlot[playerid]))
							{
								gGlassesWearingModel[playerid] = 0;
								StopPlayerHoldingObject(playerid);
							}
							if(gHatWearingModel[playerid] == SlotParam1(playerid, gSelectedSlot[playerid]))
							{
								RemovePlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS-2);
								gHatWearingModel[playerid] = 255;
							}
						}
						RemovePlayerItemEx(playerid, gSelectedSlot[playerid]);

						format(string, sizeof(string), "[INFO:] Wyrzuci³eœ item ze slotu nr %d", gSelectedSlot[playerid]);
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
						PlayerActionMessage(playerid, 15.0, "wyjmuje przedmiot i rzuca go na ziemie");
						ShowPItemsEx(playerid);
						return 1;
					}
					else
					{
						format(string, sizeof(string), "[INFO:] %d slot jest pusty !", gSelectedSlot[playerid]);
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
						ShowPItemsEx(playerid);
						return 1;
					}
				}
				/* Item sell */
				else if(listitem == 2)
				{
					if(gPlayerData[playerid][pJob] != JOB_PRODUCTSELLER)
					{
						ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Info", "Nie jesteœ sprzedawc¹ produktów !", "Ok", "");
						return 1;
					}
					for(new i = 0; i < sizeof(Businesses); i++)
					{
						if(!PlayerToPoint(100.0, playerid, Businesses[i][ExitX], Businesses[i][ExitY], Businesses[i][ExitZ]) || GetPlayerVirtualWorld(playerid) != i)
							continue;
						if(BizCountMaxItemCarry(i, PSlotItemType(playerid, gSelectedSlot[playerid]), ShowSlotItem(playerid, gSelectedSlot[playerid])) == 0)
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Info", "Ten biznes nie potrzebuje tego produktu", "Ok", "");
							return 1;
						}
						if(Businesses[i][Till] <= 0)
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Info", "Ten biznes nie ma pieniêdzy na nowe produkty", "Ok", "");
							return 1;
						}
						gBuyBusinessID[playerid] = i;
						ShowPlayerDialog(playerid, DIALOG_ITEM_4, DIALOG_STYLE_INPUT, "Info", "Podaj iloœæ produktów które chcesz sprzedaæ", "Dalej", "");
						return 1;
					}
					ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Info", "Nie jesteœ w biznesie !", "Ok", "");
					return 1;
				}
				/* Complex */
				else if(listitem == 3)
				{
					/* Food */
					if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && (SlotItem(playerid, gSelectedSlot[playerid], 9) || SlotItem(playerid, gSelectedSlot[playerid], 128) || SlotItem(playerid, gSelectedSlot[playerid], 129) ||
					SlotItem(playerid, gSelectedSlot[playerid], 130) || SlotItem(playerid, gSelectedSlot[playerid], 131) || SlotItem(playerid, gSelectedSlot[playerid], 132)))
					{
						EatItem(playerid, PSlotItemType(playerid, gSelectedSlot[playerid]), ShowSlotItem(playerid, gSelectedSlot[playerid]));
						format(string, sizeof(string), "zjada %s", ItemName(PSlotItemType(playerid, gSelectedSlot[playerid]), ShowSlotItem(playerid, gSelectedSlot[playerid])));
						PlayerActionMessage(playerid, 15.0, string);
						RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
						ApplyAnimation(playerid,"FOOD","EAT_Burger",2.0,0,1,1,0,0);
						ShowPItemsEx(playerid);
					}
					/* Fluids */
					else if((PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && (SlotItem(playerid, gSelectedSlot[playerid], 125) || SlotItem(playerid, gSelectedSlot[playerid], 126) ||
						SlotItem(playerid, gSelectedSlot[playerid], 127) || SlotItem(playerid, gSelectedSlot[playerid], 133))) || (PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 6) &&
						(SlotItem(playerid, gSelectedSlot[playerid], 1) || SlotItem(playerid, gSelectedSlot[playerid], 2) || SlotItem(playerid, gSelectedSlot[playerid], 3) ||
						SlotItem(playerid, gSelectedSlot[playerid], 4) || SlotItem(playerid, gSelectedSlot[playerid], 5) || SlotItem(playerid, gSelectedSlot[playerid], 6) ||
						SlotItem(playerid, gSelectedSlot[playerid], 7) || SlotItem(playerid, gSelectedSlot[playerid], 8) || SlotItem(playerid, gSelectedSlot[playerid], 133))))
					{
						EatItem(playerid, PSlotItemType(playerid, gSelectedSlot[playerid]), ShowSlotItem(playerid, gSelectedSlot[playerid]));
						format(string, sizeof(string), "wypija %s", ItemName(PSlotItemType(playerid, gSelectedSlot[playerid]), ShowSlotItem(playerid, gSelectedSlot[playerid])));
						PlayerActionMessage(playerid, 15.0, string);
						RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
						// ApplyAnimation(playerid,"FOOD","EAT_Burger",2.0,0,1,1,0,0);
						ShowPItemsEx(playerid);
					}
					/* Drugs */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && (SlotItem(playerid, gSelectedSlot[playerid], 134) || SlotItem(playerid, gSelectedSlot[playerid], 135) || SlotItem(playerid, gSelectedSlot[playerid], 136) ||
						SlotItem(playerid, gSelectedSlot[playerid], 137) || SlotItem(playerid, gSelectedSlot[playerid], 138) || SlotItem(playerid, gSelectedSlot[playerid], 139) || SlotItem(playerid, gSelectedSlot[playerid], 140) || SlotItem(playerid, gSelectedSlot[playerid], 141) ||
						SlotItem(playerid, gSelectedSlot[playerid], 142)))
					{
						EatItem(playerid, PSlotItemType(playerid, gSelectedSlot[playerid]), ShowSlotItem(playerid, gSelectedSlot[playerid]));
						format(string, sizeof(string), "za¿ywa %s", ItemName(PSlotItemType(playerid, gSelectedSlot[playerid]), ShowSlotItem(playerid, gSelectedSlot[playerid])));
						PlayerActionMessage(playerid, 15.0, string);
						RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
						ShowPItemsEx(playerid);
					}
					/* Book */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && SlotItem(playerid, gSelectedSlot[playerid], 166))
					{
						SelectTestQuestion(playerid);
					}	
					/* Weed seed */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && SlotItem(playerid, gSelectedSlot[playerid], 163))
					{
						if(gPlayerData[playerid][pFaction] == 255)
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Nie jesteœ cz³onkiem gangu i nie mo¿esz zasadziæ tych nasion.", "Wróæ", "");
							return 1;
						}
						if(DynamicFactions[gPlayerData[playerid][pFaction]][fType] != FACTIONT_GANG)
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Nie jesteœ cz³onkiem gangu i nie mo¿esz zasadziæ tych nasion.", "Wróæ", "");
							return 1;
						}
						GetPlayerPos(playerid, gPlayerData[playerid][pCrashX], gPlayerData[playerid][pCrashY], gPlayerData[playerid][pCrashZ]);
						if(GetPlayerVirtualWorld(playerid))
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Musisz znajdowaæ siê na zewn¹trz pomieszczenia aby zasadziæ nasiona.", "Wróæ", "");
							return 1;
						}
						for(new i = 0; i < sizeof(gWeed); i++)
						{
							if(PlayerToPoint(2.0, playerid, gWeed[i][mPosX], gWeed[i][mPosY], gWeed[i][mPosZ]) && gWeed[i][mPhase] != 0)
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Pomiêdzy sadzonkami powinien zostaæ zachowany pewien odstêp.", "Wróæ", "");
								return 1;
							}
							if(gWeed[i][mPhase])
								continue;
							GetPlayerPos(playerid, gWeed[i][mPosX], gWeed[i][mPosY], gWeed[i][mPosZ]); 
							gWeed[i][mPosZ] -= 2.8;
							gWeed[i][mObjId] = CreateDynamicObject(19473, gWeed[i][mPosX], gWeed[i][mPosY], gWeed[i][mPosZ], 0.0, 0.0, 0.0);
							gWeed[i][mType] = 0;
							gWeed[i][mPhase] = 1;
							SaveWeedData(i, "Phase");
							SaveWeedData(i, "Type");
							SaveWeedData(i, "Pos");
							RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Zasadzi³eœ nasiona.", "Wróæ", "");
							return 1;
						}
					}
					/* Weed lives */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && SlotItem(playerid, gSelectedSlot[playerid], 164))
					{
						if(!PlayerFreeSlotCount(playerid))
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Musisz mieæ wolny co najmniej jeden slot !", "Wróæ", "");
							return 1;
						}
						RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
						InsertPlayerItemEx(playerid, 1, 165, 0, 0, 0, 0, "Puste", 1);
						ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Skrêci³eœ jointa !", "Wróæ", "");
						return 1;
					}
					/* Joint */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && SlotItem(playerid, gSelectedSlot[playerid], 165))
					{
						EatItem(playerid, 1, 165);
						RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);						
						SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);						
						return 1;
					}
					/* Armor*/
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && (SlotItem(playerid, gSelectedSlot[playerid], 22) || SlotItem(playerid, gSelectedSlot[playerid], 23)))
					{
						if(SlotItem(playerid, gSelectedSlot[playerid], 22))
						{
							if(gPlayerData[playerid][pArmour])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Posiadasz ju¿ na sobie pancerz !", "Akceptuj", "Wróæ");
								return 1;
							}
							RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_LIST, "Informacja", "Za³o¿y³eœ pancerz !", "Wróæ", "");
							SetPlayerArmourEx(playerid, 50);
							return 1;
						}
						else if(SlotItem(playerid, gSelectedSlot[playerid], 23))
						{
							if(gPlayerData[playerid][pArmour])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Posiadasz ju¿ na sobie pancerz !", "Akceptuj", "Wróæ");
								return 1;
							}
							RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_LIST, "Informacja", "Za³o¿y³eœ pancerz !", "Wróæ", "");
							SetPlayerArmourEx(playerid, 100);
							return 1;
						}
					}
					/* SIM Card Extension */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 17))
					{
						ShowPlayerDialog(playerid, DIALOG_ITEM_5, DIALOG_STYLE_LIST, "Dzia³ania", ShowPItems(playerid), "Akceptuj", "Wróc");
					}
					/* SIM Card enter */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 16))
					{
						ShowPlayerDialog(playerid, DIALOG_ITEM_5, DIALOG_STYLE_LIST, "Dzia³ania", ShowPItems(playerid), "Akceptuj", "Wróæ");
					}
					/* Lock changer */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 15))
					{
						for(new i = 0; i < sizeof(Businesses); i++)
						{
							if(!PlayerToPoint(2.0, playerid, Businesses[i][EnterX], Businesses[i][EnterY], Businesses[i][EnterZ]) || GetPlayerVirtualWorld(playerid) != Businesses[i][EnterWorld])
								continue;
							if(strcmp(gPlayerData[playerid][pName], Businesses[i][Owner], false) != 0)
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Ten biznes nie jest twoj¹ w³asnoœci¹, nie mo¿esz wymieniæ tutaj zamka", "Wróæ", "");
								return 1;
							}
							Businesses[i][BUID] = SlotParam1(playerid, gSelectedSlot[playerid]);
							SaveBizData(i, "UID");
							RemovePlayerItemUsed(playerid, gSelectedSlot[playerid]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Wymieni³eœ zamek w swoim biznesie !", "Wróæ", "");
							return 1;
						}
						for(new i = 0; i < sizeof(Houses); i++)
						{
							if(!PlayerToPoint(2.0, playerid, Houses[i][EnterX], Houses[i][EnterY], Houses[i][EnterZ]) || GetPlayerVirtualWorld(playerid) != Houses[i][EnterWorld])
								continue;
							if(strcmp(gPlayerData[playerid][pName], Businesses[i][Owner], false) != 0)
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Ten dom nie jest twoj¹ w³asnoœci¹, nie mo¿esz wymieniæ tutaj zamka", "Wróæ", "");
								return 1;
							}
							Houses[i][HUID] = SlotParam1(playerid, gSelectedSlot[playerid]);
							SaveBizData(i, "UID");
							RemovePlayerItemUsed(playerid, gSelectedSlot[playerid]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Wymieni³eœ zamek w swoim domu !", "Wróæ", "");
							return 1;
						}
						ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Nie znajdujesz siê przed wejœcie do ¿adnego domu/biznesu", "Wróæ", "");
						return 1;
					}
					/* Key maker */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && SlotItem(playerid, gSelectedSlot[playerid], 143))
					{
						ShowPlayerDialog(playerid, DIALOG_ITEM_5, DIALOG_STYLE_LIST, "Dzia³ania", ShowPItems(playerid), "Akceptuj", "Wróæ");
					}
					/* GPS */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && (SlotItem(playerid, gSelectedSlot[playerid], 12)))
					{
						if(SlotParam1(playerid, gSelectedSlot[playerid]))
						{
							PlayerActionMessage(playerid, 15.0, "wy³¹cza GPS");
							SetPSlotParam1(playerid, gSelectedSlot[playerid], 0);
							new slot[MAX_PLAYER_ITEM_SLOT], slot2[MAX_PLAYER_ITEM_SLOT], noChange, noChange2;
							PHaveItemEx(playerid, 3, 12, slot);
							for(new i = 0; i < MAX_PLAYER_ITEM_SLOT; i++)
							{
								if(slot[i] && SlotParam1(playerid, i+1))
									noChange = 1;
							}
							PHaveItemEx(playerid, 1, 105, slot);
							for(new i = 0; i < MAX_PLAYER_ITEM_SLOT; i++)
							{
								if(slot2[i])
									noChange2 = 1;
							}
							if(!noChange)
								RemovePlayerMapIcons(playerid, 1);
							if(!noChange2)
								RemovePlayerMapIcons(playerid, 0);

							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Wy³¹czy³eœ GPS", "Wróæ", "");
						}
						else
						{
							PlayerActionMessage(playerid, 15.0, "w³¹cza GPS");
							SetPSlotParam1(playerid, gSelectedSlot[playerid], 1);
							ShowPlayerMapIcons(playerid, 1);
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "W³¹czy³eœ GPS", "Wróæ", "");
						}
					}
					/* Walky-talky */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && (SlotItem(playerid, gSelectedSlot[playerid], 2) || SlotItem(playerid, gSelectedSlot[playerid], 13)))
					{
						if(SlotParam1(playerid, gSelectedSlot[playerid]))
						{
							PlayerActionMessage(playerid, 15.0, "wy³¹cza krótkofalówke");
							SetPSlotParam1(playerid, gSelectedSlot[playerid], 0);
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Wy³¹czy³eœ krótkofalówke", "Wróæ", "");
						}
						else
						{
							PlayerActionMessage(playerid, 15.0, "wy³¹cza krótkofalówke");
							SetPSlotParam1(playerid, gSelectedSlot[playerid], 1);
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "W³¹czy³eœ krótkofalówke", "Wróæ", "");
						}
					}
					/* Player personal documents - identity */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 5))
					{
						SlotParam5(playerid, gSelectedSlot[playerid]);
						format(string, sizeof(string), "Dowód - wyrobiony na osobe: %s", gDSelectedItemP5[playerid]);
						ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Dokument", string, "Zamknij", "");
					}
					/* Player personal documents - driving licence */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 6))
					{
						SlotParam5(playerid, gSelectedSlot[playerid]);
						format(string, sizeof(string), "Prawo jazdy wyrobione na: %s\nKat. A: %d dni\nKat. B: %d dni\nKat. C+E: %d dni", gDSelectedItemP5[playerid], SlotParam1(playerid, gSelectedSlot[playerid]), SlotParam2(playerid, gSelectedSlot[playerid]), SlotParam3(playerid, gSelectedSlot[playerid]));
						ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Dokument", string, "Zamknij", "");
					}
					/* Player personal documents - WORD licence */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 18))
					{
						SlotParam5(playerid, gSelectedSlot[playerid]);
						format(string, sizeof(string), "Legitymacja egzaminatora WORDu\nW³aœciciel: %s", gDSelectedItemP5[playerid]);
						ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Dokument", string, "Zamknij", "");
					}
					/* Player personal documents - vehicle document */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 19))
					{
						SlotParam5(playerid, gSelectedSlot[playerid]);
						format(string, sizeof(string), "Dowód rejestracyjny pojazdu\n\nW³aœciciel: %s\nNumer VIN: %d\nNumer rejestracyjny: %d\n\nUbezpieczenie OC na kwote: $%d\nUbeczpienie AC na kwote: $%d", 
							gDSelectedItemP5[playerid], SlotParam2(playerid, gSelectedSlot[playerid]), SlotParam1(playerid, gSelectedSlot[playerid]), SlotParam3(playerid, gSelectedSlot[playerid]), SlotParam4(playerid, gSelectedSlot[playerid]));
						ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Dokument", string, "Zamknij", "");
					}
					/* House alarm */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && SlotItem(playerid, gSelectedSlot[playerid], 151))
					{
						if(gPlayerVars[playerid][mAtHouseID] == -1 && gPlayerVars[playerid][mAtBizID] == -1)
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Nie jesteœ w pomieszczeniu.", "Wróæ", "");
							return 1;
						}
						if(gPlayerVars[playerid][mAtHouseID] != -1)
						{
							if(Houses[gPlayerVars[playerid][mAtHouseID]][HAlarm])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "W tym pomieszczeniu znajduje siê ju¿ monitoring", "Wróæ", "");
								return 1;
							}
							Houses[gPlayerVars[playerid][mAtHouseID]][HAlarm] = 1;
							SaveHouseData(gPlayerVars[playerid][mAtHouseID], "Alarm");
							RemovePlayerItemEx(playerid, gSelectedSlot[playerid]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Zamontowa³eœ monitoring", "Wróæ", "");
						}
						if(gPlayerVars[playerid][mAtBizID] != -1)
						{
							if(Businesses[gPlayerVars[playerid][mAtBizID]][mAlarm])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "W tym pomieszczeniu znajduje siê ju¿ monitoring", "Wróæ", "");
								return 1;
							}
							Businesses[gPlayerVars[playerid][mAtBizID]][mAlarm] = 1;
							SaveBizData(gPlayerVars[playerid][mAtBizID], "Alarm");
							RemovePlayerItemEx(playerid, gSelectedSlot[playerid]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Zamontowa³eœ monitoring", "Wróæ", "");
						}
						
						return 1;
					}
					else if((PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1)) && (SlotItem(playerid, gSelectedSlot[playerid], 11) || SlotItem(playerid, gSelectedSlot[playerid], 122) || SlotItem(playerid, gSelectedSlot[playerid], 123) || SlotItem(playerid, gSelectedSlot[playerid], 124)))
					{
						if(gPlayerData[playerid][pJob] != JOB_MECHANIC && !AdminDuty[playerid])
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Nie mo¿esz zamontowaæ tej czêœci - nie jesteœ mechanikiem !", "Wróæ", "");
							return 1;
						}
						
						if(gPlayerData[playerid][pFaction2] == 255)
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Musisz nale¿eæ do firmy aby naprawiaæ pojazdy.", "Wróæ", "");
							return 1;
						}
						
						new inCompanyMech = 0;
						
						for(new i = 0; i < sizeof(Building); i++)
						{
							if(Building[i][FactionOwnerId] != gPlayerData[playerid][pFaction2])
							{
								continue;
							}
							
							if(!PlayerToPoint(15.0, playerid, Building[i][EnterX], Building[i][EnterY], Building[i][EnterZ]) && !PlayerToPoint(30.0, playerid, Building[i][ExitX], Building[i][ExitY], Building[i][ExitZ]))
							{
								continue;
							}
							
							inCompanyMech = 1;
						}
						
						if(!inCompanyMech && !AdminDuty[playerid])
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Musisz znajdowaæ siê przy warsztacie twojej firmy.", "Wróæ", "");
							return 1;
						}
						
						new vehid = GetPlayerVehicleID(playerid);
						if(vehid == 0)
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Nie jesteœ w pojeŸdzie", "Wróæ", "");
							return 1;
						}
						
						// alarm samochodowy
						if(SlotItem(playerid, gSelectedSlot[playerid], 11))
						{
							if(gVehData[vehid-1][Alarm])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Pojazd posiada ju¿ to wyposa¿enie !", "Wróæ", "");
								return 1;
							}
							RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
							PlayerActionMessage(playerid,15.0, "montuje alarm samochodowy");
							gVehData[vehid-1][Alarm] = 1;
							SaveVehData(vehid-1, "Alarm");
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Monta¿ udany !", "Wróæ", "");
							return 1;
						}
						// komputer policyjny
						else if(SlotItem(playerid, gSelectedSlot[playerid], 122))
						{
							if(gVehData[vehid-1][VPoliceComputer])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Pojazd posiada ju¿ to wyposa¿enie !", "Wróæ", "");
								return 1;
							}
							PlayerActionMessage(playerid, 15.0, "montuje komputer w pojeŸdzie");
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							gVehData[vehid-1][VPoliceComputer] = 1;
							SaveVehData(vehid-1, "PoliceComputer");
							RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Monta¿ udany !", "Wróæ", "");
							return 1;
						}
						// cb radio
						else if(SlotItem(playerid, gSelectedSlot[playerid], 123))
						{
							if(gVehData[vehid-1][VCBRadio] == 1 || gVehData[vehid-1][VCBRadio] == 2)
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Pojazd posiada ju¿ CB Radio\nJeœli chcesz zamontowaæ inne - wymontuj obecne", "Wróæ", "");
								return 1;
							}
							PlayerActionMessage(playerid, 15.0, "montuje CB w pojeŸdzie");
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							gVehData[vehid-1][VCBRadio] = 1;
							SaveVehData(vehid-1, "CBRadio");
							RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Monta¿ udany !", "Wróæ", "");
						}
						// cb radio ex
						else if(SlotItem(playerid, gSelectedSlot[playerid], 124))
						{
							if(gVehData[vehid-1][VCBRadio] == 1 || gVehData[vehid-1][VCBRadio] == 2)
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Pojazd posiada ju¿ CB Radio\nJeœli chcesz zamontowaæ inne - wymontuj obecne", "Wróæ", "");
								return 1;
							}
							PlayerActionMessage(playerid, 15.0, "montuje CB w pojeŸdzie");
							PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
							gVehData[vehid-1][VCBRadio] = 2;
							SaveVehData(vehid-1, "CBRadio");
							RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Monta¿ udany !", "Wróæ", "");
						}
					}
					/* Mountable vehicle part - batteries */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 7))
					{
						// check if player is mechanic
						if(gPlayerData[playerid][pJob] != JOB_MECHANIC && !AdminDuty[playerid])
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Nie mo¿esz zamontowaæ tej czêœci - nie jesteœ mechanikiem !", "Wróæ", "");
							return 1;
						}
						
						if(IsPlayerInAnyVehicle(playerid))
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Musisz byæ na zewn¹trz pojazdu", "Wróæ", "");
							return 1;
						}
						
						new vehid = GetClosestVehicle(playerid);
						
						if(vehid == INVALID_VEHICLE_ID)
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Nie jesteœ przy ¿adnym pojeŸdzie", "Wróæ", "");
							return 1;
						}
						
						// Check if player is in front of vehicle engine
						if(IsABoat(vehid) == 0 && IsABike(vehid) == 0 && IsAPlane(vehid) == 0 && IsAHelicopter(vehid) == 0 && IsAMotorBike(vehid) == 0)
						{
							new Float:xc, Float:yc, Float:ac, Float:va;
							GetPlayerFacingAngle(playerid, ac);
							GetVehiclePos(vehid, gVehData[vehid-1][mVehX], gVehData[vehid-1][mVehY], gVehData[vehid-1][mVehZ]);
							GetVehicleZAngle(vehid, va);
							
							for(new i = 0; i < sizeof(CarsLenghts); i++)
							{
								if(CarsLenghts[i][lenghtModel] == gVehData[vehid-1][mVehModel])
								{
									GetXYInFrontOfPlayer(playerid, xc, yc, CarsLenghts[i][hoodDistance]);
									if(CarsLenghts[i][hoodAngle] == 1)
									{
										if(ac-180.0 < 0.0)
											ac += 180.0;
										else
											ac -= 180.0;
									}
									if((floatabs(xc-gVehData[vehid-1][mVehX]) > 0.9 || floatabs(yc-gVehData[vehid-1][mVehY]) > 0.9) || floatabs(va-ac) > 28.0)
									{
										SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Jesteœ zbyt daleko od pojazdu ¿eby zamontowaæ akumulator !");
										return 1;
									}
									if(CarsLenghts[i][trunkAngle] == 1)
									{
										if(!gVehData[vehid-1][BootUp])
										{
											SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Otworz maske przed monta¿em akumulatora !");
											return 1;
										}
									}
									else
									{
										if(!gVehData[vehid-1][BonnetUp])
										{
											SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Otworz maske przed monta¿em akumulatora !");
											return 1;
										}
									}
								}
							}
						}
						// Mount part
						if(SlotItem(playerid, gSelectedSlot[playerid], 1))
						{
							gVehData[vehid-1][BatteryCapacity] = 3.0;
							gVehData[vehid-1][BatteryMaxCapacity] = 20.0;
							gVehData[vehid-1][BatteryID] = 1;
						}
						else if(SlotItem(playerid, gSelectedSlot[playerid], 2))
						{
							gVehData[vehid-1][BatteryCapacity] = 3.0;
							gVehData[vehid-1][BatteryMaxCapacity] = 25.0;
							gVehData[vehid-1][BatteryID] = 2;
						}
						else if(SlotItem(playerid, gSelectedSlot[playerid], 3))
						{
							gVehData[vehid-1][BatteryCapacity] = 3.0;
							gVehData[vehid-1][BatteryMaxCapacity] = 35.0;
							gVehData[vehid-1][BatteryID] = 3;
						}
						else if(SlotItem(playerid, gSelectedSlot[playerid], 4))
						{
							gVehData[vehid-1][BatteryCapacity] = 3.0;
							gVehData[vehid-1][BatteryMaxCapacity] = 25.0;
							gVehData[vehid-1][BatteryID] = 4;
						}
						else if(SlotItem(playerid, gSelectedSlot[playerid], 5))
						{
							gVehData[vehid-1][BatteryCapacity] = 3.0;
							gVehData[vehid-1][BatteryMaxCapacity] = 50.0;
							gVehData[vehid-1][BatteryID] = 5;
						}
						else if(SlotItem(playerid, gSelectedSlot[playerid], 6))
						{
							gVehData[vehid-1][BatteryCapacity] = 3.0;
							gVehData[vehid-1][BatteryMaxCapacity] = 50.0;
							gVehData[vehid-1][BatteryID] = 6;
						}
						PlayerActionMessage(playerid, 15.0, "montuje akumulator");
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
						SaveVehData(vehid-1, "BatteryCapacity");
						SaveVehData(vehid-1, "BatteryMaxCapacity");
						SaveVehData(vehid-1, "BatteryID");
						RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
						ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Monta¿ udany !", "Wróæ", "");
						return 1;
					}
					/* Mountable vehicle parts - tuning parts */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 8))
					{
						if(gPlayerData[playerid][pJob] != JOB_MECHANIC && !AdminDuty[playerid])
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Nie mo¿esz zamontowaæ tej czêœci - nie jesteœ mechanikiem !", "Wróæ", "");
							return 1;
						}
						
						if(gPlayerData[playerid][pFaction2] == 255)
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Musisz nale¿eæ do firmy aby naprawiaæ pojazdy.", "Wróæ", "");
							return 1;
						}
						
						new inCompanyMech = 0;
							
						for(new i = 0; i < sizeof(Building); i++)
						{
							if(Building[i][FactionOwnerId] != gPlayerData[playerid][pFaction2])
							{
								continue;
							}
							
							if(!PlayerToPoint(15.0, playerid, Building[i][EnterX], Building[i][EnterY], Building[i][EnterZ]) && !PlayerToPoint(30.0, playerid, Building[i][ExitX], Building[i][ExitY], Building[i][ExitZ]))
							{
								continue;
							}
							
							inCompanyMech = 1;
						}
						
						if(!inCompanyMech && !AdminDuty[playerid])
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Musisz znajdowaæ siê przy warsztacie twojej firmy.", "Wróæ", "");
							return 1;
						}
						
						if(IsPlayerInAnyVehicle(playerid))
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Musisz znajdowaæ siê na zewn¹trz pojazdu.", "Wróæ", "");
							return 1;
						}
						
						new vehId = GetClosestVehicle(playerid);
	
						if(vehId == INVALID_VEHICLE_ID)
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Musisz znajdowaæ siê przy pojeŸdzie aby u¿yæ tych czêœci.", "Wróæ", "");
							return 1;
						}
						
						if(gVehData[vehId-1][EngineOn])
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Wy³¹cz silnik przed rozpoczêciem napraw.", "Wróæ", "");
							return 1;
						}
						
						ShowPlayerDialog(playerid, DIALOG_TUNING_ADD_CONFIRM, DIALOG_STYLE_MSGBOX, "Informacja", "Monta¿ zajmie 15 sekund i nie mo¿na go przerwaæ.\nCzy chcesz kontunuuowaæ?", "Dalej", "Wróæ");
						
						return 1;
					}
					/* Mountable vehicle parts - stock parts */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 9))
					{
						if(gPlayerData[playerid][pJob] != JOB_MECHANIC && !AdminDuty[playerid])
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Nie mo¿esz zamontowaæ tej czêœci - nie jesteœ mechanikiem !", "Wróæ", "");
							return 1;
						}
						
						if(gPlayerData[playerid][pFaction2] == 255)
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Musisz nale¿eæ do firmy aby naprawiaæ pojazdy.", "Wróæ", "");
							return 1;
						}
						
						new inCompanyMech = 0;
							
						for(new i = 0; i < sizeof(Building); i++)
						{
							if(Building[i][FactionOwnerId] != gPlayerData[playerid][pFaction2])
							{
								continue;
							}
							
							if(!PlayerToPoint(15.0, playerid, Building[i][EnterX], Building[i][EnterY], Building[i][EnterZ]) && !PlayerToPoint(30.0, playerid, Building[i][ExitX], Building[i][ExitY], Building[i][ExitZ]))
							{
								continue;
							}
							
							inCompanyMech = 1;
						}
						
						if(!inCompanyMech && !AdminDuty[playerid])
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Musisz znajdowaæ siê przy warsztacie twojej firmy.", "Wróæ", "");
							return 1;
						}
						
						if(IsPlayerInAnyVehicle(playerid))
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Musisz znajdowaæ siê na zewn¹trz pojazdu.", "Wróæ", "");
							return 1;
						}
						
						new vehId = GetClosestVehicle(playerid);
	
						if(vehId == INVALID_VEHICLE_ID)
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Musisz znajdowaæ siê przy pojeŸdzie aby u¿yæ tych czêœci.", "Wróæ", "");
							return 1;
						}
						
						if(gVehData[vehId-1][EngineOn])
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Wy³¹cz silnik przed rozpoczêciem napraw.", "Wróæ", "");
							return 1;
						}
						
						ShowPlayerDialog(playerid, DIALOG_STOCK_ADD_CONFIRM, DIALOG_STYLE_MSGBOX, "Informacja", "Monta¿ zajmie 15 sekund i nie mo¿na go przerwaæ.\nCzy chcesz kontunuuowaæ?", "Dalej", "Wróæ");
						
						return 1;
					}
					/* Fix parts for vehciles */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) &&
					(SlotItem(playerid, gSelectedSlot[playerid], 7) || SlotItem(playerid, gSelectedSlot[playerid], 10) || SlotItem(playerid, gSelectedSlot[playerid], 153) ||
					SlotItem(playerid, gSelectedSlot[playerid], 154) || SlotItem(playerid, gSelectedSlot[playerid], 155) || SlotItem(playerid, gSelectedSlot[playerid], 156) ||
					SlotItem(playerid, gSelectedSlot[playerid], 177) || SlotItem(playerid, gSelectedSlot[playerid], 157) || SlotItem(playerid, gSelectedSlot[playerid], 158) ||
					SlotItem(playerid, gSelectedSlot[playerid], 159)  || SlotItem(playerid, gSelectedSlot[playerid], 160)  || SlotItem(playerid, gSelectedSlot[playerid], 161) ||
					SlotItem(playerid, gSelectedSlot[playerid], 162) || SlotItem(playerid, gSelectedSlot[playerid], 167) || SlotItem(playerid, gSelectedSlot[playerid], 168) ||
					SlotItem(playerid, gSelectedSlot[playerid], 169) || SlotItem(playerid, gSelectedSlot[playerid], 170) || SlotItem(playerid, gSelectedSlot[playerid], 171) ||
					SlotItem(playerid, gSelectedSlot[playerid], 172) || SlotItem(playerid, gSelectedSlot[playerid], 175) ||	SlotItem(playerid, gSelectedSlot[playerid], 176)))
					{
						if(!AdminDuty[playerid])
						{
							if(gPlayerData[playerid][pJob] != JOB_MECHANIC)
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Nie mo¿esz zamontowaæ tej czêœci poniewa¿ nie jesteœ mechanikiem.", "Wróæ", "");
								return 1;
							}
						
							if(gPlayerData[playerid][pFaction2] == 255)
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Musisz nale¿eæ do firmy aby naprawiaæ pojazdy.", "Wróæ", "");
								return 1;
							}
							
							new inCompanyMech = 0;
							
							for(new i = 0; i < sizeof(Building); i++)
							{
								if(Building[i][FactionOwnerId] != gPlayerData[playerid][pFaction2])
								{
									continue;
								}
								
								if(!PlayerToPoint(15.0, playerid, Building[i][EnterX], Building[i][EnterY], Building[i][EnterZ]) && !PlayerToPoint(30.0, playerid, Building[i][ExitX], Building[i][ExitY], Building[i][ExitZ]))
								{
									continue;
								}
								
								inCompanyMech = 1;
							}
							
							if(!inCompanyMech && !AdminDuty[playerid])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Musisz znajdowaæ siê przy warsztacie twojej firmy.", "Wróæ", "");
								return 1;
							}
						
							if(!PHaveItem(playerid, 1, 174))
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Musisz mieæ skrzynke z narzêdziami aby u¿yæ tych czêœci.", "Wróæ", "");
								return 1;
							}
						}
						
						if(IsPlayerInAnyVehicle(playerid))
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Musisz byæ na zewn¹trz pojazdu.", "Wróæ", "");
							return 1;
						}
						
						new vehId = GetClosestVehicle(playerid);
	
						if(vehId == INVALID_VEHICLE_ID)
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Musisz znajdowaæ siê przy pojeŸdzie aby u¿yæ tych czêœci.", "Wróæ", "");
							return 1;
						}
						
						if(gVehData[vehId-1][EngineOn])
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Wy³¹cz silnik przed rozpoczêciem napraw.", "Wróæ", "");
							return 1;
						}
						
						// instalacja gazowa
						if(SlotItem(playerid, gSelectedSlot[playerid], 177))
						{						
							if(gVehData[vehId-1][Fuel] == 2)
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Ten pojazd jest ju¿ wyposa¿ony w instalacje gazow¹.", "Wróæ", "");
								return 1;
							}
							
							new pToGas = 0;
							for(new i = 0; i < sizeof(CarsData); i++)
							{
								if(CarsData[i][Model] == gVehData[vehId-1][mVehModel])
								{
									if(CarsData[i][ToGas])
									{
										pToGas = 1;
										break;
									}
								}
							}
							
							if(pToGas == 0)
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Do tego pojazdu nie mo¿na zamontowaæ instalacji gazowej.", "Wróæ", "");
								return 1;
							}
							
							ShowPlayerDialog(playerid, DIALOG_LPG_ADD_CONFIRM, DIALOG_STYLE_MSGBOX, "Informacja", "Monta¿ zajmie 15 sekund i nie mo¿na go przerwaæ.\nCzy napewno chcesz kontynuuowaæ?", "Dalej", "Wróæ");
						}
						// listwa taxi 1
						else if(SlotItem(playerid, gSelectedSlot[playerid], 154))
						{
							if(IsAnyFreeVehObjectSlot(vehId))
							{
								ShowPlayerDialog(playerid, DIALOG_TAXILIGHT1_ADD_CONFIRM, DIALOG_STYLE_MSGBOX, "Informacja", "Monta¿ zajmie 15 sekund i nie mo¿na go przerwaæ.\nCzy napewno chcesz kontynuuowaæ?", "Dalej", "Wróæ");
								return 1;
							}
							else
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Brak wolnego slotu do zamontowania elementu w pojeŸdzie", "Wróæ", "");
								return 1;
							}
						}
						// listwa taxi 2
						else if(SlotItem(playerid, gSelectedSlot[playerid], 155))
						{
							if(IsAnyFreeVehObjectSlot(vehId))
							{
								ShowPlayerDialog(playerid, DIALOG_TAXILIGHT2_ADD_CONFIRM, DIALOG_STYLE_MSGBOX, "Informacja", "Monta¿ zajmie 15 sekund i nie mo¿na go przerwaæ.\nCzy napewno chcesz kontynuuowaæ?", "Dalej", "Wróæ");
								return 1;
							}
							else
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Brak wolnego slotu do zamontowania elementu w pojeŸdzie", "Wróæ", "");
								return 1;
							}
						}
						// listwa taxi 3
						else if(SlotItem(playerid, gSelectedSlot[playerid], 156))
						{
							if(IsAnyFreeVehObjectSlot(vehId))
							{
								ShowPlayerDialog(playerid, DIALOG_TAXILIGHT3_ADD_CONFIRM, DIALOG_STYLE_MSGBOX, "Informacja", "Monta¿ zajmie 15 sekund i nie mo¿na go przerwaæ.\nCzy napewno chcesz kontynuuowaæ?", "Dalej", "Wróæ");
								return 1;
							}
							else
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Brak wolnego slotu do zamontowania elementu w pojeŸdzie", "Wróæ", "");
								return 1;
							}
						}
						// listwa taxi 4
						else if(SlotItem(playerid, gSelectedSlot[playerid], 157))
						{
							if(IsAnyFreeVehObjectSlot(vehId))
							{
								ShowPlayerDialog(playerid, DIALOG_TAXILIGHT4_ADD_CONFIRM, DIALOG_STYLE_MSGBOX, "Informacja", "Monta¿ zajmie 15 sekund i nie mo¿na go przerwaæ.\nCzy napewno chcesz kontynuuowaæ?", "Dalej", "Wróæ");
								return 1;
							}
							else
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Brak wolnego slotu do zamontowania elementu w pojeŸdzie", "Wróæ", "");
								return 1;
							}
						}
						// lampa halogenowa
						else if(SlotItem(playerid, gSelectedSlot[playerid], 158))
						{
							if(AttachObjectToVehicleSlot(vehId, 19280) != -1)
							{
								RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Zamontowa³eœ element do pojazdu", "Wróæ", "");
								return 1;
							}
							else
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Brak wolnego slotu do zamontowania elementu w pojeŸdzie", "Wróæ", "");
								return 1;
							}
						}
						// dioda biala
						else if(SlotItem(playerid, gSelectedSlot[playerid], 159))
						{
							if(AttachObjectToVehicleSlot(vehId, 19281) != -1)
							{
								RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Zamontowa³eœ element do pojazdu", "Wróæ", "");
								return 1;
							}
							else
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Brak wolnego slotu do zamontowania elementu w pojeŸdzie", "Wróæ", "");
								return 1;
							}
						}
						// dioda czerwona
						else if(SlotItem(playerid, gSelectedSlot[playerid], 160))
						{
							if(AttachObjectToVehicleSlot(vehId, 19282) != -1)
							{
								RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Zamontowa³eœ element do pojazdu", "Wróæ", "");
								return 1;
							}
							else
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Brak wolnego slotu do zamontowania elementu w pojeŸdzie", "Wróæ", "");
								return 1;
							}
						}
						// dioda zielona
						else if(SlotItem(playerid, gSelectedSlot[playerid], 161))
						{
							if(AttachObjectToVehicleSlot(vehId, 19283) != -1)
							{
								RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Zamontowa³eœ element do pojazdu", "Wróæ", "");
								return 1;
							}
							else
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Brak wolnego slotu do zamontowania elementu w pojeŸdzie", "Wróæ", "");
								return 1;
							}
						}
						// dioda niebieska
						else if(SlotItem(playerid, gSelectedSlot[playerid], 162))
						{
							if(AttachObjectToVehicleSlot(vehId, 18648) != -1)
							{
								RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Zamontowa³eœ element do pojazdu", "Wróæ", "");
								return 1;
							}
							else
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Brak wolnego slotu do zamontowania elementu w pojeŸdzie", "Wróæ", "");
								return 1;
							}
						}
						// neon czerwony
						else if(SlotItem(playerid, gSelectedSlot[playerid], 167))
						{
							if(AttachObjectToVehicleSlot(vehId, 18649) != -1)
							{
								RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Zamontowa³eœ element do pojazdu", "Wróæ", "");
								return 1;
							}
							else
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Brak wolnego slotu do zamontowania elementu w pojeŸdzie", "Wróæ", "");
								return 1;
							}
						}
						// neon niebieski
						else if(SlotItem(playerid, gSelectedSlot[playerid], 168))
						{
							if(AttachObjectToVehicleSlot(vehId, 18650) != -1)
							{
								RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Zamontowa³eœ element do pojazdu", "Wróæ", "");
								return 1;
							}
							else
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Brak wolnego slotu do zamontowania elementu w pojeŸdzie", "Wróæ", "");
								return 1;
							}
						}
						// neon zielony
						else if(SlotItem(playerid, gSelectedSlot[playerid], 169))
						{
							if(AttachObjectToVehicleSlot(vehId, 18651) != -1)
							{
								RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Zamontowa³eœ element do pojazdu", "Wróæ", "");
								return 1;
							}
							else
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Brak wolnego slotu do zamontowania elementu w pojeŸdzie", "Wróæ", "");
								return 1;
							}
						}
						// neon ¿ó³ty
						else if(SlotItem(playerid, gSelectedSlot[playerid], 170))
						{
							if(AttachObjectToVehicleSlot(vehId, 18652) != -1)
							{
								RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Zamontowa³eœ element do pojazdu", "Wróæ", "");
								return 1;
							}
							else
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Brak wolnego slotu do zamontowania elementu w pojeŸdzie", "Wróæ", "");
								return 1;
							}
						}
						// neon ró¿owy
						else if(SlotItem(playerid, gSelectedSlot[playerid], 171))
						{
							if(AttachObjectToVehicleSlot(vehId, 18653) != -1)
							{
								RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Zamontowa³eœ element do pojazdu", "Wróæ", "");
								return 1;
							}
							else
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Brak wolnego slotu do zamontowania elementu w pojeŸdzie", "Wróæ", "");
								return 1;
							}
						}
						// neon bia³y
						else if(SlotItem(playerid, gSelectedSlot[playerid], 172))
						{
							if(AttachObjectToVehicleSlot(vehId, 18654) != -1)
							{
								RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Zamontowa³eœ element do pojazdu", "Wróæ", "");
								return 1;
							}
							else
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Brak wolnego slotu do zamontowania elementu w pojeŸdzie", "Wróæ", "");
								return 1;
							}
						}
						// œwiat³a policyjne
						else if(SlotItem(playerid, gSelectedSlot[playerid], 152))
						{
							if(gVehData[vehId-1][mVehSirenObjModel])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Pojazd posiada ju¿ œwiat³a policyjne !", "Wróæ", "");
								
								return 1;
							}
							
							gVehData[vehId-1][mVehSirenObjModel] = 19419;
							SaveVehData(vehId-1, "VehSirenObjModel");
							
							if(IsSirenMountableToVehicle(vehId))
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "W tym pojeŸdzie nie mo¿na zamontowaæ œwiate³ policyjnych.", "Wróæ", "");
								gVehData[vehId-1][mVehSirenObjModel] = 0;
								
								return 1;
							}
							
							ShowPlayerDialog(playerid, DIALOG_POLICELIGHT_ADD_CONFIRM, DIALOG_STYLE_MSGBOX, "Informacja", "Monta¿ zajmie 15 sekund i nie mo¿na go przerwaæ.\nCzy napewno chcesz kontynuuowaæ?", "Dalej", "Wróæ");
							
							return 1;
						}
						// œwiat³a policyjne
						else if(SlotItem(playerid, gSelectedSlot[playerid], 153))
						{
							if(gVehData[vehId-1][mVehSirenObjModel])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Pojazd posiada ju¿ œwiat³a policyjne !", "Wróæ", "");
								
								return 1;
							}
							
							gVehData[vehId-1][mVehSirenObjModel] = 18646;
							SaveVehData(vehId-1, "VehSirenObjModel");
							
							if(IsSirenMountableToVehicle(vehId))
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "W tym pojeŸdzie nie mo¿na zamontowaæ œwiate³ policyjnych.", "Wróæ", "");
								gVehData[vehId-1][mVehSirenObjModel] = 0;
								
								return 1;
							}
							
							ShowPlayerDialog(playerid, DIALOG_POLICELIGHT_ADD_CONFIRM, DIALOG_STYLE_MSGBOX, "Informacja", "Monta¿ zajmie 15 sekund i nie mo¿na go przerwaæ.\nCzy napewno chcesz kontynuuowaæ?", "Dalej", "Wróæ");
							
							return 1;
						}
						// ¿arówka
						else if(SlotItem(playerid, gSelectedSlot[playerid], 7))
						{
							if(!IsInFrontOfHood(playerid, vehId))
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Musisz byæ przed mask¹ aby wymieniæ ¿arówkê.", "Wróæ", "");
								return 1;
							}
							
							if(!IsHoodOpened(playerid, vehId))
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Otwórz maske przed rozpoczêciem naprawy.", "Wróæ", "");
								return 1;
							}
							
							ShowPlayerDialog(playerid, DIALOG_BULB_CHANGE_SELECT, DIALOG_STYLE_LIST, "Wybierz któr¹ ¿arówke chcesz wymieniæ", "Od strony pasa¿era\nOd strony kierowcy\nTyln¹ od strony kierowcy\nTyln¹ od strony pasa¿era", "Wybierz", "Wróæ");
						}
						// hak holowniczy
						else if(SlotItem(playerid, gSelectedSlot[playerid], 10))
						{							
							ShowPlayerDialog(playerid, DIALOG_HOOK_ADD_CONFIRM, DIALOG_STYLE_MSGBOX, "Informacja", "Naprawa zajmie 15 sekund i nie mo¿na jej przerwaæ.\nCzy chcesz kontunuuowaæ?", "Dalej", "Wróæ");
						}
						// czêœci silnika
						else if(SlotItem(playerid, gSelectedSlot[playerid], 175))
						{						
							if(!IsInFrontOfHood(playerid, vehId))
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Musisz byæ przed silnikiem aby go naprawiæ.", "Wróæ", "");
								return 1;
							}
							
							if(!IsHoodOpened(playerid, vehId))
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Otwórz maske przed rozpoczêciem naprawy.", "Wróæ", "");
								return 1;
							}
							
							new Float:vehHp;						
							GetVehicleHealth(vehId, vehHp);
							
							if(vehHp >= 1000.0 && !gVehData[vehId-1][CarDamaged])
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Silnik tego pojazdu nie wymaga naprawy.", "Wróæ", "");
								return 1;
							}
							
							if(vehHp <= 500.0)
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Ten silnik jest zbyt uszkodzony i nie jest mo¿liwa jego naprawa.", "Wróæ", "");
								return 1;
							}
							
							ShowPlayerDialog(playerid, DIALOG_ENGINE_REPAIR_CONFIRM, DIALOG_STYLE_MSGBOX, "Informacja", "Naprawa zajmie 15 sekund i nie mo¿na jej przerwaæ.\nCzy chcesz kontunuuowaæ?", "Tak", "Anuluj");
						}
						// opona
						else if(SlotItem(playerid, gSelectedSlot[playerid], 176))
						{
							GetVehiclePos(vehId, gVehData[vehId-1][mVehX], gVehData[vehId-1][mVehY], gVehData[vehId-1][mVehZ]);
							
							if(!PlayerToPoint(5.0, playerid, gVehData[vehId-1][mVehX], gVehData[vehId-1][mVehY], gVehData[vehId-1][mVehZ]))
							{
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Jesteœ zbyt daleko od pojazdu.", "Wróæ", "");
								return 1;
							}
							
							ShowPlayerDialog(playerid, DIALOG_SELECT_WHEEL_TO_FIX, DIALOG_STYLE_LIST, "Wybierz, które ko³o chcesz wymieniæ", "Lewe przednie\nPrawe przednie\nLewe tylne\nPrawe tylne", "Dalej", "Wróæ");
							return 1;
						}
						
						return 1;
					}
					/* Lucky Lottery Ticked */
					else if( PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 10) )
					{
						PlayerActionMessage(playerid, 15.0, "sprawdza los na loterie");
						SlotParam5( playerid, gSelectedSlot[playerid] );
						format( string, sizeof(string), "[1: %d] [2: %d] [3: %d] [4: %d]\nLosowanie nr: %d", SlotParam1( playerid, gSelectedSlot[playerid] ), SlotParam2( playerid, gSelectedSlot[playerid] ), SlotParam3( playerid, gSelectedSlot[playerid] ), SlotParam4( playerid, gSelectedSlot[playerid] ), strval( gDSelectedItemP5[playerid] ) );
						ShowPlayerDialog( playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Twoje numerki", string, "Zamknij", "" );
					}
					/* Kluczyki do pojazdu */
					else if( PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 2) )
					{
						new vehid = CarSerialToID(ShowSlotItem(playerid, gSelectedSlot[playerid]));
						if(vehid == -1)
						{
							PlayerActionMessage(playerid, 15.0, "wciska pilot od pojazdu");
							return 1;
						}

						if(!IsAMotorBike(vehid+1) && !IsABike(vehid+1))
							PlayerActionMessage(playerid, 15.0, "wciska pilot od pojazdu");
						if( IsABike(vehid+1) )
							return 1;

						new Float:ox, Float:oy, Float:oz;
						GetVehiclePos(vehid+1, ox, oy, oz);
						if(PlayerToPoint(40.0, playerid, ox, oy, oz) && !IsAMotorBike(vehid+1) && !IsABike(vehid+1))
						{
							new enginedyn,lights,alarm,doors,bonnet,boot,objective;
							GetVehicleParamsEx(vehid+1,enginedyn,lights,alarm,doors,bonnet,boot,objective);
							if(doors == 1 && !gVehData[vehid][VConfiscated] )
							{
								doors = 0;
								format(string, sizeof(string),  "* pojazd otwarty (( %s ))", gPlayerData[playerid][pName]);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								gVehData[vehid][Closed] = 0;
								SaveVehData(vehid, "Closed");
							}
							else if(doors == 1 && gVehData[vehid][VConfiscated] )
							{
								SendClientMessage( playerid, COLOR_RED, "[INFO:] Pojazd skonfiskowany ! Nie mo¿esz go otworzyæ !" );
							}
							else
							{
								doors = 1;
								format(string, sizeof(string),  "* pojazd zamkniêty (( %s ))", gPlayerData[playerid][pName]);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								gVehData[vehid][Closed] = 1;
								SaveVehData(vehid, "Closed");
							}
							if(gVehData[vehid][Alarm])
								SetVehicleParamsEx(vehid+1,enginedyn,1,1,doors,bonnet,boot,objective);
							else
								SetVehicleParamsEx(vehid+1,enginedyn,1,alarm,doors,bonnet,boot,objective);
							defer CarAlarmOff[700](vehid+1);
						}
					}
					/* Telefon - call*/
					else if( PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && ( SlotItem(playerid, gSelectedSlot[playerid], 3) || SlotItem(playerid, gSelectedSlot[playerid], 4) ) )
					{
						PlayerActionMessage(playerid, 15.0, "klika coœ w telefonie");
						if(SlotParam1(playerid, gSelectedSlot[playerid]) == 0)
						{
							SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Telefon jest wy³¹czony, przed u¿yciem musisz go w³¹czyæ");
						}
						else
						{
							ShowPlayerDialog(playerid, DIALOG_PHONE, DIALOG_STYLE_INPUT, "Numer telefonu","Wpisz numer telefonu odbiorcy","Dzwon","Anuluj");
							gSendingSMS[playerid] = 0;
						}
					}
					/* Okulary */
					else if( PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 7))
					{
						if(IsPlayerHoldingObject(playerid) && SlotParam1(playerid, gSelectedSlot[playerid]) == gGlassesWearingModel[playerid])
						{
							StopPlayerHoldingObject(playerid);
							PlayerActionMessage(playerid, 15.0, "zdejmuje okulary");
							gGlassesWearingModel[playerid] = 0;
							return 1;
						}
						if(IsPlayerHoldingObject(playerid) && SlotParam1(playerid, gSelectedSlot[playerid]) != gGlassesWearingModel[playerid])
						{
							StopPlayerHoldingObject(playerid);
							new skin = GetPlayerSkin(playerid);
							SetPlayerHoldingObject(playerid, 19006 + (SlotParam1(playerid, gSelectedSlot[playerid])-1),2,SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
							gGlassesWearingModel[playerid] = SlotParam1(playerid, gSelectedSlot[playerid]);
							PlayerActionMessage(playerid, 15.0, "zmienia okulary");
							return 1;
						}
						else
						{
							new skin = GetPlayerSkin(playerid);
							SetPlayerHoldingObject(playerid, 19006 + (SlotParam1(playerid, gSelectedSlot[playerid])-1),2,SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
							gGlassesWearingModel[playerid] = SlotParam1(playerid, gSelectedSlot[playerid]);
							PlayerActionMessage(playerid, 15.0, "zak³ada okulary");
							return 1;
						}
					}
					/* Czapki */
					else if( PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 9))
					{
						if(IsPlayerAttachedObjectSlotUsed(playerid, MAX_PLAYER_ATTACHED_OBJECTS-2) && SlotParam1(playerid, gSelectedSlot[playerid]) == gHatWearingModel[playerid])
						{
							RemovePlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS-2);
							PlayerActionMessage(playerid, 15.0, "zdejmuje czapke");
							gHatWearingModel[playerid] = 255;
							return 1;
						}
						if(IsPlayerAttachedObjectSlotUsed(playerid, MAX_PLAYER_ATTACHED_OBJECTS-2) && SlotParam1(playerid, gSelectedSlot[playerid]) != gHatWearingModel[playerid])
						{
							RemovePlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS-2);
							new skin = GetPlayerSkin(playerid);
							if(SlotParam2(playerid, gSelectedSlot[playerid]) == 0) // inne id obiektow czapek mikolaja
								SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS-2, 19064 + (SlotParam1(playerid, gSelectedSlot[playerid])), 2, Hat2OffSet[skin][0], Hat2OffSet[skin][1], Hat2OffSet[skin][2], Hat2OffSet[skin][3], Hat2OffSet[skin][4], Hat2OffSet[skin][5], Hat2OffSet[skin][6], Hat2OffSet[skin][7], Hat2OffSet[skin][8]);
							else
								SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS-2, 18926 + (SlotParam1(playerid, gSelectedSlot[playerid])), 2, Hat1OffSet[skin][0], Hat1OffSet[skin][1], Hat1OffSet[skin][2], Hat1OffSet[skin][3], Hat1OffSet[skin][4], Hat1OffSet[skin][5], Hat1OffSet[skin][6], Hat1OffSet[skin][7], Hat1OffSet[skin][8]);
							gHatWearingModel[playerid] = SlotParam1(playerid, gSelectedSlot[playerid]);
							PlayerActionMessage(playerid, 15.0, "zmienia czapke");
							return 1;
						}
						else
						{
							new skin = GetPlayerSkin(playerid);
							// SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS-2, 18926 + (SlotParam1(playerid, gSelectedSlot[playerid])),2,Hat1OffSet[skin][0],Hat1OffSet[skin][1], Hat1OffSet[skin][2], Hat1OffSet[skin][3],Hat1OffSet[skin][4],Hat1OffSet[skin][5],Hat1OffSet[skin][6],Hat1OffSet[skin][7],Hat1OffSet[skin][8]);
							RemovePlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS-2);
							if(SlotParam1(playerid, gSelectedSlot[playerid]) > 0) // inne id obiektow czapek mikolaja
								SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS-2, 19064 + (SlotParam1(playerid, gSelectedSlot[playerid]) - 1),2,Hat2OffSet[skin][0],Hat2OffSet[skin][1],Hat2OffSet[skin][2], Hat2OffSet[skin][3], Hat2OffSet[skin][4],Hat2OffSet[skin][5],Hat2OffSet[skin][6],Hat2OffSet[skin][7],Hat2OffSet[skin][8]);
							else
								SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS-2, 18926 + (SlotParam1(playerid, gSelectedSlot[playerid])),2,Hat1OffSet[skin][0],Hat1OffSet[skin][1],Hat1OffSet[skin][2], Hat1OffSet[skin][3], Hat1OffSet[skin][4],Hat1OffSet[skin][5],Hat1OffSet[skin][6],Hat1OffSet[skin][7],Hat1OffSet[skin][8]);
							gHatWearingModel[playerid] = SlotParam1(playerid, gSelectedSlot[playerid]);
							PlayerActionMessage(playerid, 15.0, "zak³ada czapke");
							return 1;
						}
					}
					/* Bandanas */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 14))
					{
						if(SlotParam1(playerid, gSelectedSlot[playerid]))
						{
							SetPSlotParam1(playerid, gSelectedSlot[playerid], 0);
							
							if(IsPlayerVip(playerid))
							{
								format(string, sizeof(string), "{C2A2DA}%s [%d]", GetPlayerNameEx(playerid), playerid);
							}
							else
							{
								format(string, sizeof(string), "{FFFFFF}%s [%d]", GetPlayerNameEx(playerid), playerid);
							}
							
							Update3DTextLabelText(gPlayerData[playerid][pCharNameID], COLOR_BLACK, string);
						}
						else
						{
							SetPSlotParam1(playerid, gSelectedSlot[playerid], 1);
							
							if(IsPlayerVip(playerid))
							{
								format(string, sizeof(string), "{C2A2DA}Twarz za chust¹ [%d]", playerid);
							}
							else
							{
								format(string, sizeof(string), "{FFFFFF}Twarz za chust¹ [%d]", playerid);
							}
							
							Update3DTextLabelText(gPlayerData[playerid][pCharNameID], COLOR_BLACK, string);
						}
					}
					/* Zegarki */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && (SlotItem(playerid, gSelectedSlot[playerid], 107) || SlotItem(playerid, gSelectedSlot[playerid], 108) || SlotItem(playerid, gSelectedSlot[playerid], 109) ||
					SlotItem(playerid, gSelectedSlot[playerid], 110) || SlotItem(playerid, gSelectedSlot[playerid], 111) || SlotItem(playerid, gSelectedSlot[playerid], 112) || SlotItem(playerid, gSelectedSlot[playerid], 113) ||
					SlotItem(playerid, gSelectedSlot[playerid], 114) || SlotItem(playerid, gSelectedSlot[playerid], 115) || SlotItem(playerid, gSelectedSlot[playerid], 116) || SlotItem(playerid, gSelectedSlot[playerid], 117) ||
					SlotItem(playerid, gSelectedSlot[playerid], 118) || SlotItem(playerid, gSelectedSlot[playerid], 119) || SlotItem(playerid, gSelectedSlot[playerid], 120) || SlotItem(playerid, gSelectedSlot[playerid], 121)))
					{
						if(IsPlayerAttachedObjectSlotUsed(playerid, MAX_PLAYER_ATTACHED_OBJECTS-4) && SlotParam1(playerid, gSelectedSlot[playerid]))
						{
							RemovePlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS-4);
							PlayerActionMessage(playerid, 15.0, "zdejmuje zegarek");
							SetPSlotParam1(playerid, gSelectedSlot[playerid], 0);
						}
						else
						{
							PlayerActionMessage(playerid, 15.0, "zak³ada zegarek");
							if(SlotItem(playerid, gSelectedSlot[playerid], 107))
							{
								SetPSlotParam1(playerid, gSelectedSlot[playerid], 1);
								SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS-4, 19039, 5,
									WatchOffSet[gPlayerData[playerid][pSkin]][0],
									WatchOffSet[gPlayerData[playerid][pSkin]][1],
									WatchOffSet[gPlayerData[playerid][pSkin]][2],
									WatchOffSet[gPlayerData[playerid][pSkin]][3],
									WatchOffSet[gPlayerData[playerid][pSkin]][4],
									WatchOffSet[gPlayerData[playerid][pSkin]][5],
									WatchOffSet[gPlayerData[playerid][pSkin]][6],
									WatchOffSet[gPlayerData[playerid][pSkin]][7],
									WatchOffSet[gPlayerData[playerid][pSkin]][8]
								);
							}
							else if(SlotItem(playerid, gSelectedSlot[playerid], 108))
							{
								SetPSlotParam1(playerid, gSelectedSlot[playerid], 1);
								SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS-4, 19040, 5,
									WatchOffSet[gPlayerData[playerid][pSkin]][0],
									WatchOffSet[gPlayerData[playerid][pSkin]][1],
									WatchOffSet[gPlayerData[playerid][pSkin]][2],
									WatchOffSet[gPlayerData[playerid][pSkin]][3],
									WatchOffSet[gPlayerData[playerid][pSkin]][4],
									WatchOffSet[gPlayerData[playerid][pSkin]][5],
									WatchOffSet[gPlayerData[playerid][pSkin]][6],
									WatchOffSet[gPlayerData[playerid][pSkin]][7],
									WatchOffSet[gPlayerData[playerid][pSkin]][8]
								);
							}
							else if(SlotItem(playerid, gSelectedSlot[playerid], 109))
							{
								SetPSlotParam1(playerid, gSelectedSlot[playerid], 1);
								SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS-4, 19041, 5,
									WatchOffSet[gPlayerData[playerid][pSkin]][0],
									WatchOffSet[gPlayerData[playerid][pSkin]][1],
									WatchOffSet[gPlayerData[playerid][pSkin]][2],
									WatchOffSet[gPlayerData[playerid][pSkin]][3],
									WatchOffSet[gPlayerData[playerid][pSkin]][4],
									WatchOffSet[gPlayerData[playerid][pSkin]][5],
									WatchOffSet[gPlayerData[playerid][pSkin]][6],
									WatchOffSet[gPlayerData[playerid][pSkin]][7],
									WatchOffSet[gPlayerData[playerid][pSkin]][8]
								);
							}
							else if(SlotItem(playerid, gSelectedSlot[playerid], 110))
							{
								SetPSlotParam1(playerid, gSelectedSlot[playerid], 1);
								SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS-4, 19042, 5,
									WatchOffSet[gPlayerData[playerid][pSkin]][0],
									WatchOffSet[gPlayerData[playerid][pSkin]][1],
									WatchOffSet[gPlayerData[playerid][pSkin]][2],
									WatchOffSet[gPlayerData[playerid][pSkin]][3],
									WatchOffSet[gPlayerData[playerid][pSkin]][4],
									WatchOffSet[gPlayerData[playerid][pSkin]][5],
									WatchOffSet[gPlayerData[playerid][pSkin]][6],
									WatchOffSet[gPlayerData[playerid][pSkin]][7],
									WatchOffSet[gPlayerData[playerid][pSkin]][8]
								);
							}
							else if(SlotItem(playerid, gSelectedSlot[playerid], 111))
							{
								SetPSlotParam1(playerid, gSelectedSlot[playerid], 1);
								SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS-4, 19043, 5,
									WatchOffSet[gPlayerData[playerid][pSkin]][0],
									WatchOffSet[gPlayerData[playerid][pSkin]][1],
									WatchOffSet[gPlayerData[playerid][pSkin]][2],
									WatchOffSet[gPlayerData[playerid][pSkin]][3],
									WatchOffSet[gPlayerData[playerid][pSkin]][4],
									WatchOffSet[gPlayerData[playerid][pSkin]][5],
									WatchOffSet[gPlayerData[playerid][pSkin]][6],
									WatchOffSet[gPlayerData[playerid][pSkin]][7],
									WatchOffSet[gPlayerData[playerid][pSkin]][8]
								);
							}
							else if(SlotItem(playerid, gSelectedSlot[playerid], 112))
							{
								SetPSlotParam1(playerid, gSelectedSlot[playerid], 1);
								SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS-4, 19044, 5,
									WatchOffSet[gPlayerData[playerid][pSkin]][0],
									WatchOffSet[gPlayerData[playerid][pSkin]][1],
									WatchOffSet[gPlayerData[playerid][pSkin]][2],
									WatchOffSet[gPlayerData[playerid][pSkin]][3],
									WatchOffSet[gPlayerData[playerid][pSkin]][4],
									WatchOffSet[gPlayerData[playerid][pSkin]][5],
									WatchOffSet[gPlayerData[playerid][pSkin]][6],
									WatchOffSet[gPlayerData[playerid][pSkin]][7],
									WatchOffSet[gPlayerData[playerid][pSkin]][8]
								);
							}
							else if(SlotItem(playerid, gSelectedSlot[playerid], 113))
							{
								SetPSlotParam1(playerid, gSelectedSlot[playerid], 1);
								SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS-4, 19045, 5,
									WatchOffSet[gPlayerData[playerid][pSkin]][0],
									WatchOffSet[gPlayerData[playerid][pSkin]][1],
									WatchOffSet[gPlayerData[playerid][pSkin]][2],
									WatchOffSet[gPlayerData[playerid][pSkin]][3],
									WatchOffSet[gPlayerData[playerid][pSkin]][4],
									WatchOffSet[gPlayerData[playerid][pSkin]][5],
									WatchOffSet[gPlayerData[playerid][pSkin]][6],
									WatchOffSet[gPlayerData[playerid][pSkin]][7],
									WatchOffSet[gPlayerData[playerid][pSkin]][8]
								);
							}
							else if(SlotItem(playerid, gSelectedSlot[playerid], 114))
							{
								SetPSlotParam1(playerid, gSelectedSlot[playerid], 1);
								SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS-4, 19046, 5,
									WatchOffSet[gPlayerData[playerid][pSkin]][0],
									WatchOffSet[gPlayerData[playerid][pSkin]][1],
									WatchOffSet[gPlayerData[playerid][pSkin]][2],
									WatchOffSet[gPlayerData[playerid][pSkin]][3],
									WatchOffSet[gPlayerData[playerid][pSkin]][4],
									WatchOffSet[gPlayerData[playerid][pSkin]][5],
									WatchOffSet[gPlayerData[playerid][pSkin]][6],
									WatchOffSet[gPlayerData[playerid][pSkin]][7],
									WatchOffSet[gPlayerData[playerid][pSkin]][8]
								);
							}
							else if(SlotItem(playerid, gSelectedSlot[playerid], 115))
							{
								SetPSlotParam1(playerid, gSelectedSlot[playerid], 1);
								SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS-4, 19047, 5,
									WatchOffSet[gPlayerData[playerid][pSkin]][0],
									WatchOffSet[gPlayerData[playerid][pSkin]][1],
									WatchOffSet[gPlayerData[playerid][pSkin]][2],
									WatchOffSet[gPlayerData[playerid][pSkin]][3],
									WatchOffSet[gPlayerData[playerid][pSkin]][4],
									WatchOffSet[gPlayerData[playerid][pSkin]][5],
									WatchOffSet[gPlayerData[playerid][pSkin]][6],
									WatchOffSet[gPlayerData[playerid][pSkin]][7],
									WatchOffSet[gPlayerData[playerid][pSkin]][8]
								);
							}
							else if(SlotItem(playerid, gSelectedSlot[playerid], 116))
							{
								SetPSlotParam1(playerid, gSelectedSlot[playerid], 1);
								SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS-4, 19048, 5,
									WatchOffSet[gPlayerData[playerid][pSkin]][0],
									WatchOffSet[gPlayerData[playerid][pSkin]][1],
									WatchOffSet[gPlayerData[playerid][pSkin]][2],
									WatchOffSet[gPlayerData[playerid][pSkin]][3],
									WatchOffSet[gPlayerData[playerid][pSkin]][4],
									WatchOffSet[gPlayerData[playerid][pSkin]][5],
									WatchOffSet[gPlayerData[playerid][pSkin]][6],
									WatchOffSet[gPlayerData[playerid][pSkin]][7],
									WatchOffSet[gPlayerData[playerid][pSkin]][8]
								);
							}
							else if(SlotItem(playerid, gSelectedSlot[playerid], 117))
							{
								SetPSlotParam1(playerid, gSelectedSlot[playerid], 1);
								SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS-4, 19049, 5,
									WatchOffSet[gPlayerData[playerid][pSkin]][0],
									WatchOffSet[gPlayerData[playerid][pSkin]][1],
									WatchOffSet[gPlayerData[playerid][pSkin]][2],
									WatchOffSet[gPlayerData[playerid][pSkin]][3],
									WatchOffSet[gPlayerData[playerid][pSkin]][4],
									WatchOffSet[gPlayerData[playerid][pSkin]][5],
									WatchOffSet[gPlayerData[playerid][pSkin]][6],
									WatchOffSet[gPlayerData[playerid][pSkin]][7],
									WatchOffSet[gPlayerData[playerid][pSkin]][8]
								);
							}
							else if(SlotItem(playerid, gSelectedSlot[playerid], 118))
							{
								SetPSlotParam1(playerid, gSelectedSlot[playerid], 1);
								SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS-4, 19050, 5,
									WatchOffSet[gPlayerData[playerid][pSkin]][0],
									WatchOffSet[gPlayerData[playerid][pSkin]][1],
									WatchOffSet[gPlayerData[playerid][pSkin]][2],
									WatchOffSet[gPlayerData[playerid][pSkin]][3],
									WatchOffSet[gPlayerData[playerid][pSkin]][4],
									WatchOffSet[gPlayerData[playerid][pSkin]][5],
									WatchOffSet[gPlayerData[playerid][pSkin]][6],
									WatchOffSet[gPlayerData[playerid][pSkin]][7],
									WatchOffSet[gPlayerData[playerid][pSkin]][8]
								);
							}
							else if(SlotItem(playerid, gSelectedSlot[playerid], 119))
							{
								SetPSlotParam1(playerid, gSelectedSlot[playerid], 1);
								SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS-4, 19051, 5,
									WatchOffSet[gPlayerData[playerid][pSkin]][0],
									WatchOffSet[gPlayerData[playerid][pSkin]][1],
									WatchOffSet[gPlayerData[playerid][pSkin]][2],
									WatchOffSet[gPlayerData[playerid][pSkin]][3],
									WatchOffSet[gPlayerData[playerid][pSkin]][4],
									WatchOffSet[gPlayerData[playerid][pSkin]][5],
									WatchOffSet[gPlayerData[playerid][pSkin]][6],
									WatchOffSet[gPlayerData[playerid][pSkin]][7],
									WatchOffSet[gPlayerData[playerid][pSkin]][8]
								);
							}
							else if(SlotItem(playerid, gSelectedSlot[playerid], 120))
							{
								SetPSlotParam1(playerid, gSelectedSlot[playerid], 1);
								SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS-4, 19052, 5,
									WatchOffSet[gPlayerData[playerid][pSkin]][0],
									WatchOffSet[gPlayerData[playerid][pSkin]][1],
									WatchOffSet[gPlayerData[playerid][pSkin]][2],
									WatchOffSet[gPlayerData[playerid][pSkin]][3],
									WatchOffSet[gPlayerData[playerid][pSkin]][4],
									WatchOffSet[gPlayerData[playerid][pSkin]][5],
									WatchOffSet[gPlayerData[playerid][pSkin]][6],
									WatchOffSet[gPlayerData[playerid][pSkin]][7],
									WatchOffSet[gPlayerData[playerid][pSkin]][8]
								);
							}
							else if(SlotItem(playerid, gSelectedSlot[playerid], 121))
							{
								SetPSlotParam1(playerid, gSelectedSlot[playerid], 1);
								SetPlayerAttachedObject(playerid, MAX_PLAYER_ATTACHED_OBJECTS-4, 19053, 5,
									WatchOffSet[gPlayerData[playerid][pSkin]][0],
									WatchOffSet[gPlayerData[playerid][pSkin]][1],
									WatchOffSet[gPlayerData[playerid][pSkin]][2],
									WatchOffSet[gPlayerData[playerid][pSkin]][3],
									WatchOffSet[gPlayerData[playerid][pSkin]][4],
									WatchOffSet[gPlayerData[playerid][pSkin]][5],
									WatchOffSet[gPlayerData[playerid][pSkin]][6],
									WatchOffSet[gPlayerData[playerid][pSkin]][7],
									WatchOffSet[gPlayerData[playerid][pSkin]][8]
								);
							}
						}
					}
					/* Rakieta (fajerwerek) */
					else if( PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && SlotItem(playerid, gSelectedSlot[playerid], 6) )
					{
						ShowPItemsEx(playerid);
						return 1;
						// if(firerockettime[playerid] == 0)
						// {
							// new distance;
							// if(AllowedFirework[FWNDrawDistance] == 0) distance = 15;
							// if(AllowedFirework[FWNDrawDistance] == 1) distance = 22;
							// if(AllowedFirework[FWNDrawDistance] == 2) distance = 30;
							// new Float:Xj, Float:Yj,Float:Zj;
							// firerockettime[playerid] = 1;
							// new sendername[MAX_PLAYER_NAME];
							// GetPlayerName(playerid, sendername, sizeof(sendername));
							// PlayerActionMessage(playerid, 15.0, "rozstawia rakiete");
							// GetPlayerPos(playerid,Xj,Yj,Zj);
							// GetXYInFrontOfPlayer(playerid, Xj,Yj, distance);
							// Firerocket[playerid] = CreateObject(354, Xj,Yj,(Zj), 0, 0, 0);
							// rocketsmoke[playerid] = CreateObject(2780, Xj,Yj,(Zj), 0, 0, 0);
							// MoveObject(Firerocket[playerid], Xj, Yj, Zj+30, 10);
							// MoveObject(rocketsmoke[playerid], Xj, Yj, Zj+30, 10);
							// SetTimerEx("FirerocketTime", 3000, 0, "i", playerid);
							// RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
							// return 1;
						// }
						// else return SendClientMessage(playerid, RED, "[INFO:] Ju¿ u¿y³eœ jednego zestawu, musisz poczekaæ a¿ siê skoñczy");
					}
					
					/* Zestaw fajerwerków */
					// if( PSlotItemTypeCompare(playerid,  gSelectedSlot[playerid], 1) && SlotItem(playerid, gSelectedSlot[playerid], 8) )
					// {
						// if(RocketBoxTime[playerid] == 0)
						// {
							// new distance;
							// if(AllowedFirework[FWNDrawDistance] == 0) distance = 15;
							// if(AllowedFirework[FWNDrawDistance] == 1) distance = 22;
							// if(AllowedFirework[FWNDrawDistance] == 2) distance = 30;
							// new Float:Xj, Float:Yj,Float:Zj;
							// RocketBoxTime[playerid] = 1;
							// PlayerActionMessage(playerid, 15.0, "rozstawia fajerwerki");
							// GetPlayerPos(playerid,Xj,Yj,Zj);
							// GetXYInFrontOfPlayer(playerid, Xj,Yj, distance);
							// RBX[playerid] = Xj;
							// RBY[playerid] = Yj;
							// RBZ[playerid] = (Zj-1.0);
							// RocketBox[playerid] = CreateObject(354, Xj,Yj,(Zj-1.0), 0, 0, 0);
							// RocketBoxSmoke[playerid] = CreateObject(2780, Xj,Yj,(Zj-1.0), 0, 0, 0);
							// SetTimerEx("RocketBoxTimer", 3000, 0, "i", playerid);
							// RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
							// return 1;
						// }
						// else return SendClientMessage(playerid, RED, "[INFO:] Ju¿ u¿y³eœ jednego zestawu, musisz poczekaæ a¿ siê skoñczy");
					// }
					/* Kanister */
					else if( PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 1) )
					{
						PlayerActionMessage(playerid, 15.0, "zagl¹da do kanistra");
						if(SlotParam1(playerid, gSelectedSlot[playerid]) == 0)
						{
							SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Kanister jest pusty !");
							return 1;
						}
						ShowPlayerDialog(playerid,DIALOG_KANISTER,DIALOG_STYLE_INPUT,"Rejestracja pojazdu","Wpisz rejestracje pojazdu który chcesz zatankowaæ","Tankuj","Anuluj");
					}
					/* Pobór broni */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && ((ShowSlotItem(playerid, gSelectedSlot[playerid]) >= 13 && ShowSlotItem(playerid, gSelectedSlot[playerid]) <= 32) || 
						(ShowSlotItem(playerid, gSelectedSlot[playerid]) >= 145 && ShowSlotItem(playerid, gSelectedSlot[playerid]) <= 150)) && !IsPlayerInAnyVehicle(playerid))
					{
						PlayerActionMessage(playerid, 15.0, "wyjmuje broñ");
						new slot;
						printf("[WEAPON:] Player %s took weapon item ID: %d from /mi", GetPlayerNameEx(playerid), ShowSlotItem(playerid, gSelectedSlot[playerid]));
						switch(ShowSlotItem(playerid, gSelectedSlot[playerid]))
						{
							case 16: // example
							{
								if( ( slot = PHaveItem( playerid, 1, 36 ) ) != 0 ) // sprawdzenie czy gracz posiada ammo na itemach
								{
									if( PlayerHaveWeapon( playerid, 22 ) == 0 )
										RemovePlayerItemExUsed( playerid, gSelectedSlot[playerid] );
									GivePlayerGun( playerid, 22, SlotParam6( playerid, slot ) );
									RemovePlayerItemUsed( playerid, slot );
									return 1;
								}
							}
							case 17:
							{
								if( ( slot = PHaveItem( playerid, 1, 36 ) ) != 0 )
								{
									if( PlayerHaveWeapon( playerid, 23 ) == 0 )
										RemovePlayerItemExUsed( playerid, gSelectedSlot[playerid] );
									GivePlayerGun( playerid, 23, SlotParam6( playerid, slot ) );
									RemovePlayerItemUsed( playerid, slot );
									return 1;
								}
							}
							case 18:
							{
								if( ( slot = PHaveItem( playerid, 1, 37 ) ) != 0 )
								{
									if( PlayerHaveWeapon( playerid, 24 ) == 0 )
										RemovePlayerItemExUsed( playerid, gSelectedSlot[playerid] );
									GivePlayerGun( playerid, 24, SlotParam6( playerid, slot ) );
									RemovePlayerItemUsed( playerid, slot );
									return 1;
								}
							}
							case 19:
							{
								if( ( slot = PHaveItem( playerid, 1, 38 ) ) != 0 )
								{
									if( PlayerHaveWeapon( playerid, 25 ) == 0 )
										RemovePlayerItemExUsed( playerid, gSelectedSlot[playerid] );
									GivePlayerGun( playerid, 25, SlotParam6( playerid, slot ) );
									RemovePlayerItemUsed( playerid, slot );
									return 1;
								}
							}
							case 20:
							{
								if( ( slot = PHaveItem( playerid, 1, 38 ) ) != 0 )
								{
									if( PlayerHaveWeapon( playerid, 26 ) == 0 )
										RemovePlayerItemExUsed( playerid, gSelectedSlot[playerid] );
									GivePlayerGun( playerid, 26, SlotParam6( playerid, slot ) );
									RemovePlayerItemUsed( playerid, slot );
									return 1;
								}
							}
							case 21:
							{
								if( ( slot = PHaveItem( playerid, 1, 38 ) ) != 0 )
								{
									if( PlayerHaveWeapon( playerid, 27 ) == 0 )
										RemovePlayerItemExUsed( playerid, gSelectedSlot[playerid] );
									GivePlayerGun( playerid, 27, SlotParam6( playerid, slot ) );
									RemovePlayerItemUsed( playerid, slot );
									return 1;
								}
							}
							case 22:
							{
								if( ( slot = PHaveItem( playerid, 1, 36 ) ) != 0 )
								{
									if( PlayerHaveWeapon( playerid, 28 ) == 0 )
										RemovePlayerItemExUsed( playerid, gSelectedSlot[playerid] );
									GivePlayerGun( playerid, 28, SlotParam6( playerid, slot ) );
									RemovePlayerItemUsed( playerid, slot );
									return 1;
								}
							}
							case 23:
							{
								if( ( slot = PHaveItem( playerid, 1, 36 ) ) != 0 )
								{
									if( PlayerHaveWeapon( playerid, 29 ) == 0 )
										RemovePlayerItemExUsed( playerid, gSelectedSlot[playerid] );
									GivePlayerGun( playerid, 29, SlotParam6( playerid, slot ) );
									RemovePlayerItemUsed( playerid, slot );
									return 1;
								}
							}
							case 24:
							{
								if( ( slot = PHaveItem( playerid, 1, 39 ) ) != 0 )
								{
									if( PlayerHaveWeapon( playerid, 30 ) == 0 )
										RemovePlayerItemExUsed( playerid, gSelectedSlot[playerid] );
									GivePlayerGun( playerid, 30, SlotParam6( playerid, slot ) );
									RemovePlayerItemUsed( playerid, slot );
									return 1;
								}
							}
							case 25:
							{
								if( ( slot = PHaveItem( playerid, 1, 39 ) ) != 0 )
								{
									if( PlayerHaveWeapon( playerid, 31 ) == 0 )
										RemovePlayerItemExUsed( playerid, gSelectedSlot[playerid] );
									GivePlayerGun( playerid, 31, SlotParam6( playerid, slot ) );
									RemovePlayerItemUsed( playerid, slot );
									return 1;
								}
							}
							case 26:
							{
								if( ( slot = PHaveItem( playerid, 1, 36 ) ) != 0 )
								{
									if( PlayerHaveWeapon( playerid, 32 ) == 0 )
										RemovePlayerItemExUsed( playerid, gSelectedSlot[playerid] );
									GivePlayerGun( playerid, 32, SlotParam6( playerid, slot ) );
									RemovePlayerItemUsed( playerid, slot );
									return 1;
								}
							}
							case 27:
							{
								if( ( slot = PHaveItem( playerid, 1, 40 ) ) != 0 )
								{
									if( PlayerHaveWeapon( playerid, 33 ) == 0 )
										RemovePlayerItemExUsed( playerid, gSelectedSlot[playerid] );
									GivePlayerGun( playerid, 33, SlotParam6( playerid, slot ) );
									RemovePlayerItemUsed( playerid, slot );
									return 1;
								}
							}
							case 28:
							{
								if( ( slot = PHaveItem( playerid, 1, 40 ) ) != 0 )
								{
									if( PlayerHaveWeapon( playerid, 34 ) == 0 )
										RemovePlayerItemExUsed( playerid, gSelectedSlot[playerid] );
									GivePlayerGun( playerid, 34, SlotParam6( playerid, slot ) );
									RemovePlayerItemUsed( playerid, slot );
									return 1;
								}
							}
							case 29:
							{
								if( ( slot = PHaveItem( playerid, 1, 41 ) ) != 0 )
								{
									if( PlayerHaveWeapon( playerid, 35 ) == 0 )
										RemovePlayerItemExUsed( playerid, gSelectedSlot[playerid] );
									GivePlayerGun( playerid, 35, SlotParam6( playerid, slot ) );
									RemovePlayerItemUsed( playerid, slot );
									return 1;
								}
							}
							case 30:
							{
								if( ( slot = PHaveItem( playerid, 1, 41 ) ) != 0 )
								{
									if( PlayerHaveWeapon( playerid, 36 ) == 0 )
										RemovePlayerItemExUsed( playerid, gSelectedSlot[playerid] );
									GivePlayerGun( playerid, 36, SlotParam6( playerid, slot ) );
									RemovePlayerItemUsed( playerid, slot );
									return 1;
								}
							}
							case 31:
							{
								if( ( slot = PHaveItem( playerid, 1, 42 ) ) != 0 )
								{
									if( PlayerHaveWeapon( playerid, 37 ) == 0 )
										RemovePlayerItemExUsed( playerid, gSelectedSlot[playerid] );
									GivePlayerGun( playerid, 37, SlotParam6( playerid, slot ) );
									RemovePlayerItemUsed( playerid, slot );
									return 1;
								}
							}
							case 32:
							{
								if( ( slot = PHaveItem( playerid, 1, 39 ) ) != 0 )
								{
									if( PlayerHaveWeapon( playerid, 38 ) == 0 )
										RemovePlayerItemExUsed( playerid, gSelectedSlot[playerid] );
									GivePlayerGun( playerid, 38, SlotParam6( playerid, slot ) );
									RemovePlayerItemUsed( playerid, slot );
									return 1;
								}
							}
							case 33:
							{
								GivePlayerGun( playerid, 39, SlotParam6(playerid, gSelectedSlot[playerid] ) );
								RemovePlayerItemUsed( playerid, gSelectedSlot[playerid] );
								return 1;
							}
							case 34:
							{
								GivePlayerGun(playerid, 41, SlotParam6(playerid, gSelectedSlot[playerid]));
								RemovePlayerItemUsed( playerid, gSelectedSlot[playerid] );
								return 1;
							}
							case 35:
							{
								GivePlayerGun( playerid, 42, SlotParam6(playerid, gSelectedSlot[playerid] ) );
								RemovePlayerItemUsed( playerid, gSelectedSlot[playerid] );
								return 1;
							}
							case 145:
							{
								GivePlayerGun( playerid, 5, SlotParam6(playerid, gSelectedSlot[playerid] ) );
								RemovePlayerItemUsed( playerid, gSelectedSlot[playerid] );
								return 1;
							}
							case 146:
							{
								GivePlayerGun( playerid, 7, SlotParam6(playerid, gSelectedSlot[playerid] ) );
								RemovePlayerItemUsed( playerid, gSelectedSlot[playerid] );
								return 1;
							}
							case 147:
							{
								GivePlayerGun( playerid, 1, SlotParam6(playerid, gSelectedSlot[playerid] ) );
								RemovePlayerItemUsed( playerid, gSelectedSlot[playerid] );
								return 1;
							}
							case 148:
							{
								GivePlayerGun( playerid, 4, SlotParam6(playerid, gSelectedSlot[playerid] ) );
								RemovePlayerItemUsed( playerid, gSelectedSlot[playerid] );
								return 1;
							}
							case 149:
							{
								GivePlayerGun( playerid, 6, SlotParam6(playerid, gSelectedSlot[playerid] ) );
								RemovePlayerItemUsed( playerid, gSelectedSlot[playerid] );
								return 1;
							}
							case 150:
							{
								GivePlayerGun( playerid, 15, SlotParam6(playerid, gSelectedSlot[playerid] ) );
								RemovePlayerItemUsed( playerid, gSelectedSlot[playerid] );
								return 1;
							}
						}
						SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Brak amunicji !");
						return 1;
					}
					/* Radio */
					else if( PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && SlotItem(playerid, gSelectedSlot[playerid], 106) )
					{
						new Float:x, Float:y, Float:z, Float:angle;
						for( new i = 0; i < sizeof(Businesses); i++ )
						{
							if( PlayerToPoint(100.0, playerid, Businesses[i][ExitX], Businesses[i][ExitY], Businesses[i][ExitZ]) && i == GetPlayerVirtualWorld(playerid) )
							{
								if( Businesses[i][BRadio1Bought] )
								{
									SendClientMessage( playerid, COLOR_ORANGE, "[INFO:] Posiadasz ju¿ radio w tym biznesie !");
									return 1;
								}
								PlayerActionMessage(playerid, 15.0, "stawia radio");
								Businesses[i][BRadio1Bought] = 1;
								Businesses[i][BRadio1On] = 0;
								Businesses[i][BRadio1Vol] = 50;
								SaveBizData( i, "BRadio1Bought" );
								SaveBizData( i, "BRadio1On" );
								SaveBizData( i, "BRadio1Vol" );
								GetPlayerPos( playerid, x, y, z );
								GetPlayerFacingAngle(playerid, angle);
								Businesses[i][BRadio1X] = x;
								Businesses[i][BRadio1Y] = y;
								Businesses[i][BRadio1Z] = z;
								Businesses[i][BRadio1Angle] = angle;
								Businesses[i][BRadio1Obj] = CreateDynamicObject(O_RADIO_T_1, x, y, z-1.0, 0, 0, angle, i, Businesses[i][ExitInterior]);
								SaveBizData( i, "BRadio1X" );
								SaveBizData( i, "BRadio1Y" );
								SaveBizData( i, "BRadio1Z" );
								SaveBizData( i, "BRadio1Angle" );
								RemovePlayerItemExUsed( playerid, gSelectedSlot[playerid] );
								return 1;
							}
						}
						for( new i = 0; i < sizeof(Houses); i++ )
						{
							if( PlayerToPoint(50.0, playerid, Houses[i][ExitX], Houses[i][ExitY], Houses[i][ExitZ]) && i == GetPlayerVirtualWorld(playerid) )
							{
								if( Houses[i][HRadio1Bought] )
								{
									SendClientMessage( playerid, COLOR_ORANGE, "[INFO:] Posiadasz ju¿ radio w tym domu !");
									return 1;
								}
								PlayerActionMessage(playerid, 15.0, "stawia radio");
								Houses[i][HRadio1Bought] = 1;
								Houses[i][HRadio1On] = 0;
								Houses[i][HRadio1Vol] = 50;
								SaveHouseData( i, "HRadio1Bought" );
								SaveHouseData( i, "HRadio1On" );
								SaveHouseData( i, "HRadio1Vol" );
								GetPlayerPos( playerid, x, y, z );
								GetPlayerFacingAngle(playerid, angle);
								Houses[i][HRadio1X] = x;
								Houses[i][HRadio1Y] = y;
								Houses[i][HRadio1Z] = z;
								Houses[i][HRadio1Angle] = angle;
								Houses[i][HRadio1Obj] = CreateDynamicObject(O_RADIO_T_1, x, y, z-1.0, 0, 0, angle, i, Houses[i][ExitInterior]);
								SaveHouseData( i, "HRadio1X" );
								SaveHouseData( i, "HRadio1Y" );
								SaveHouseData( i, "HRadio1Z" );
								SaveHouseData( i, "HRadio1Angle" );
								RemovePlayerItemExUsed( playerid, gSelectedSlot[playerid] );
								return 1;
							}
						}
						SendClientMessage( playerid, COLOR_ORANGE, "[INFO:] Nie znajdujesz siê w domu !");
						return 1;
					}
					/* Clothes */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 24))
					{
						if(gPlayerVars[playerid][mAtHouseID] == -1)
						{
							if(gPlayerVars[playerid][mAtBizID] == -1)
							{
								noClotheChange:
								ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Aby zmieniæ ubranie musisz znajdowaæ siê w domu", "Zamknij", "");
								return 1;
							}
							else
							{
								if(!BizHaveItem(gPlayerVars[playerid][mAtBizID], 3, 24))
								{
									goto noClotheChange;
								}
							}
						}
						new newSkin = SlotParam1(playerid, gSelectedSlot[playerid]);
						
						SetPSlotParam1(playerid, gSelectedSlot[playerid], gPlayerData[playerid][pSkin]);
						
						gPlayerData[playerid][pSkin] = newSkin;
						SavePlayerData(playerid, "Skin");
						
						SetPlayerSkinEx(playerid, gPlayerData[playerid][pSkin]);
						
						ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Zmieni³eœ ubranie", "Zamknij", "");
					}
					/* Aparat */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && SlotItem(playerid, gSelectedSlot[playerid], 173))
					{
						PlayerActionMessage(playerid, 15.0, "wyjmuje aparat");
						GivePlayerGun(playerid, 43, 300);
						RemovePlayerItemUsed(playerid, gSelectedSlot[playerid]);
						return 1;
					}
					/* tablica og³oszeñ */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && SlotItem(playerid, gSelectedSlot[playerid], 178))
					{
						if(gPlayerVars[playerid][mAtBuildingId] == -1)
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Tablice og³oszeñ mo¿na ustawiaæ tylko wewn¹trz w³asnego budynku.", "Wróæ", "");
							return 1;
						}
						
						if(Building[gPlayerVars[playerid][mAtBuildingId]][FactionOwnerId] != gPlayerData[playerid][pFaction] && Building[gPlayerVars[playerid][mAtBuildingId]][FactionOwnerId] != gPlayerData[playerid][pFaction2])
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Tablice og³oszeñ mo¿na ustawiaæ tylko wewn¹trz w³asnego budynku.", "Wróæ", "");
							return 1;
						}
						
						for(new i = 0; i < sizeof(gPublicAds); i++)
						{
							if(gPublicAds[i][mObjId])
							{
								continue;
							}
							
							GetPlayerPos(playerid, gPublicAds[i][mObjPosX], gPublicAds[i][mObjPosY], gPublicAds[i][mObjPosZ]);
							GetXYInFrontOfPlayer(playerid, gPublicAds[i][mObjPosX], gPublicAds[i][mObjPosY], 2.0);
							
							gPublicAds[i][mObjWorld] = GetPlayerVirtualWorld(playerid);								
							gPublicAds[i][mObjId] = CreateDynamicObject(3335, gPublicAds[i][mObjPosX], gPublicAds[i][mObjPosY], gPublicAds[i][mObjPosZ], gPublicAds[i][mObjRotX], gPublicAds[i][mObjRotY], gPublicAds[i][mObjRotZ], gPublicAds[i][mObjWorld]);
							format(gPublicAds[i][mOwner], MAX_PLAYER_NAME, gPlayerData[playerid][pName]);
						
							SavePublicAdsData(i, "Owner");
							SavePublicAdsData(i, "ObjPos");
						
							defer RefreshPublicAd(i);
						
							RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
						
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Ustawi³eœ now¹ tablice og³oszeñ.", "Wróæ", "");
							
							return 1;
						}
					}
					/* mapa */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && SlotItem(playerid, gSelectedSlot[playerid], 105))
					{
						format(string, sizeof(string), "");
						for(new i = 0; i < sizeof(gLsLocations); i++)
						{
							format(string, sizeof(string), "%s%s\n", string, gLsLocations[i][mLocationDescription]);
						}
						ShowPlayerDialog(playerid, DIALOG_MAP_LOCATIONS, DIALOG_STYLE_LIST, "Dostêpne lokacje", string, "Akceptuj", "Wróæ");
					}
				}
				/* Complex */
				else if(listitem == 4)
				{
					/* Walky-talky */
					if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && (SlotItem(playerid, gSelectedSlot[playerid], 2)))
						ShowPlayerDialog(playerid, DIALOG_ITEM_5, DIALOG_STYLE_INPUT, "Wybór kana³u", "Podaj ID na któy chcesz ustawiæ krótkofalówke\nZakres: 0-40", "Ok", "Wróæ");
					if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && (SlotItem(playerid, gSelectedSlot[playerid], 13)))
						ShowPlayerDialog(playerid, DIALOG_ITEM_5, DIALOG_STYLE_INPUT, "Wybór kana³u", "Podaj ID na któy chcesz ustawiæ krótkofalówke\nZakres: 0-45", "Ok", "Wróæ");
					/* Player personal documents */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && (SlotItem(playerid, gSelectedSlot[playerid], 5) || SlotItem(playerid, gSelectedSlot[playerid], 6) || SlotItem(playerid, gSelectedSlot[playerid], 18) || SlotItem(playerid, gSelectedSlot[playerid], 19)))
						ShowPlayerDialog(playerid, DIALOG_ITEM_5, DIALOG_STYLE_INPUT, "ID gracza", "Podaj ID gracza któremu chcesz pokazaæ dokument", "Ok", "Wróæ");
					/* Lucky Lottery Ticked */
					if( PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 10) )
					{
						if( !IsPlayerInRangeOfPoint( playerid, 1.0, 359.0, 167.0, 1008.0 ) )
						{
							ShowPlayerDialog( playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Nie jesteœ w kolekturze !", "Zamknij", "" );
							return 1;
						}

						/* Check ticket ID ( validity ) */
						SlotParam5( playerid, gSelectedSlot[playerid] );
						if( strval(gDSelectedItemP5[playerid]) > gLuckyLotteryID )
						{
							ShowPlayerDialog( playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "To losowanie jeszcze siê nie odby³o !", "Zamknij", "" );
							return 1;
						}
						if( strval(gDSelectedItemP5[playerid]) < gLuckyLotteryID )
						{
							ShowPlayerDialog( playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Ten kupon jest ju¿ niewa¿ny !", "Zamknij", "" );
							return 1;
						}

						/* Check if player winn */
						for( new i = 0; i < sizeof(gLuckyLottery); i++ )
						{
							if(gLuckyLottery[i][LuckyNumbers][0] == SlotParam1(playerid, gSelectedSlot[playerid]) && gLuckyLottery[i][LuckyNumbers][1] == SlotParam2(playerid, gSelectedSlot[playerid]) &&
								gLuckyLottery[i][LuckyNumbers][2] == SlotParam1(playerid, gSelectedSlot[playerid]) && gLuckyLottery[i][LuckyNumbers][3] == SlotParam2(playerid, gSelectedSlot[playerid]))
							{
								if(gLuckyLottery[i][LuckyNumbers][0] != gLuckyLotteryNumbers[0] || gLuckyLottery[i][LuckyNumbers][1] != gLuckyLotteryNumbers[1] ||
									gLuckyLottery[i][LuckyNumbers][2] != gLuckyLotteryNumbers[2] || gLuckyLottery[i][LuckyNumbers][3] != gLuckyLotteryNumbers[3])
								{
									ShowPlayerDialog( playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Te numery nie zosta³y wylosowane !", "Zamknij", "" );
									return 1;
								}
								RemovePlayerItemUsed( playerid, gSelectedSlot[playerid] );
								if( gLuckyLotteryWinnersCount > 0 )
								{
									GivePlayerCash( playerid, floatround( gLuckyLotteryCash/gLuckyLotteryWinnersCount, floatround_round ) );
									gLuckyLotteryCash -= floatround( gLuckyLotteryCash/gLuckyLotteryWinnersCount, floatround_round );
								}
								else
								{
									GivePlayerCash( playerid, gLuckyLotteryCash );
									gLuckyLotteryCash = 0;
								}
								SaveLotteryData( -1 );
								ShowPlayerDialog( playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Odebra³eœ nagrode !", "Zamknij", "" );
								return 1;
							}
						}
						ShowPlayerDialog( playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Te numery nie zosta³y wylosowane !", "Zamknij", "" );
						return 1;
					}
					/* Telefon - messages */
					if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && (SlotItem(playerid, gSelectedSlot[playerid], 3) || SlotItem(playerid, gSelectedSlot[playerid], 4)))
					{
						if(SlotParam1(playerid, gSelectedSlot[playerid] == 0))
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Telefon jest wy³¹czony, przed u¿yciem musisz go w³¹czyæ", "Wróæ", "");
						}
						else
						{
							BPHONE_ITEM_2:
							if(gPhoneTextReceived[playerid] == SlotParam2(playerid, gSelectedSlot[playerid]))
							{
								gPhoneTextBlinking[playerid] = 0;
								format(string, sizeof(string), "UPDATE `samp_sms` SET `New` = '0' WHERE `ReceiverNumber` = '%d' AND `New` = '1' ",
									gPhoneTextReceived[playerid]);
								wp_mysql_query(string, SAVE, INVALID_PLAYER_ID, db_con3);
								gPhoneTextReceived[playerid] = 0;
							}
							ShowPlayerDialog(playerid, DIALOG_SMS, DIALOG_STYLE_LIST, "Dzia³anie", "1. Wyœwietl wiadomoœci\n2. Wyœlij now¹ wiadomoœæ", "Wybierz", "Wróc");
						}
					}
					/* Kanister - zawartoœæ */
					if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 1))
					{
						new fuelType = SlotParam2(playerid, gSelectedSlot[playerid]);
						new fuelTypeTXT[32];
						if( fuelType == 0 )
							strins( fuelTypeTXT, "benzyna", 0 );
						else
							strins( fuelTypeTXT, "ropa", 0 );
						format(string, sizeof(string), "Zawartoœæ kanistra: %d/25ltr\nTyp: %s", SlotParam1(playerid, gSelectedSlot[playerid]), fuelTypeTXT);
						ShowPlayerDialog(playerid, DIALOG_ITEM_1, DIALOG_STYLE_MSGBOX, "Kanister", string, "Wróæ", "" );
						return 1;
					}
					/* GPS */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && (SlotItem(playerid, gSelectedSlot[playerid], 12)))
					{
						if(!SlotParam1(playerid, gSelectedSlot[playerid]))
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, ""#COLOR_TITLE"Informacja", "GPS jest wy³¹czony", "Wróæ", "Zamknij");
							return 1;
						}
						
						format(string, sizeof(string), "");
						for(new i = 0; i < sizeof(gLsLocations); i++)
						{
							format(string, sizeof(string), "%s%s\n", string, gLsLocations[i][mLocationDescription]);
						}
						ShowPlayerDialog(playerid, DIALOG_GPS_LOCATIONS, DIALOG_STYLE_LIST, "Dostêpne lokacje", string, "Akceptuj", "Wróæ");
					}
				}
				/* Complex */
				else if(listitem == 5)
				{
					/* Telefon - wyœwietlenie numeru */
					if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && (SlotItem(playerid, gSelectedSlot[playerid], 3) || SlotItem(playerid, gSelectedSlot[playerid], 4)))
					{
						format(string, sizeof(string), "[INFO:] Twój numer to: %d", SlotParam2(playerid, gSelectedSlot[playerid]));
						SendClientMessage(playerid, COLOR_WHITE, string);
					}
					/* Kanister - tankowanie */
					if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 1))
					{
						if(SlotParam1(playerid, gSelectedSlot[playerid]) == 25)
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Kanister jest pe³ny !", "Wróæ", "");
							return 1;
						}
						ShowPlayerDialog(playerid, DIALOG_KANISTER_REFUEL, DIALOG_STYLE_LIST, "Wybierz paliwo którym chcesz nape³niæ kanister", "Beznyna\nDiesel","Wybierz","Anuluj");
					}
					/* WORD document */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 18))
					{
						if(SlotParam3(playerid, gSelectedSlot[playerid]))
							SetPSlotParam3(playerid, gSelectedSlot[playerid], 0);
						else
							SetPSlotParam3(playerid, gSelectedSlot[playerid], 1);
						goto BWORD_ITEM_1;
					}
					/* Walky-talky */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && (SlotItem(playerid, gSelectedSlot[playerid], 2)))
					{
						ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_INPUT, "Wybór kana³u", "Aby u¿ywaæ krótkofalówki wystarczy j¹ w³¹czyæ i wpisaæ komende /cb", "Wróæ", "");
					}
					
				}
				/* Complex */
				else if(listitem == 6)
				{
					/* Telefon - numery alarmowe */
					if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && (SlotItem(playerid, gSelectedSlot[playerid], 3) || SlotItem(playerid, gSelectedSlot[playerid], 4)))
					{
						if(SlotParam1(playerid, gSelectedSlot[playerid]) == 0)
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "W³¹cz telefon zanim zaczniej z niego korzystaæ", "Wróæ", "");
							return 1;
						}
						ShowPlayerDialog(playerid,DIALOG_PHONE_ALARMS,DIALOG_STYLE_LIST, "Wybierz numer", "1. 999 - pogotwie\n2. 997 - policja\n3. 555 - warsztat samochodowy\n4. 444 - taxi","Dzwoñ","Anuluj");
					}
					/* WORD document */
					else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 18))
					{
						format(string, sizeof(string), "Komendy:\n/egzaminnaprawko [id] [ilosc dni] - W [ilosc dni] podaje siê ile dni prawko bêdzie wa¿ne dla kursanta.\nWartoœæ zero oznacza niezdanie egzaminu.\n\n/zamknij - do zamykania/otwierania pojazdów WORD. Aby zamkn¹æ  nale¿y byæ w pojeŸdzie.");
						ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Pomoc", string, "Zamknij", "");
						return 1;
					}
				}
				/* Complex */
				else if(listitem == 7)
				{
					/* Telefon - ukryj numery */
					if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && (SlotItem(playerid, gSelectedSlot[playerid], 3) || SlotItem(playerid, gSelectedSlot[playerid], 4)))
					{
						// TODO: Make this option separate by each phone
						if(gPlayerData[playerid][pListNumber])
						{
							SendClientMessage(playerid,  COLOR_LIGHTYELLOW2, "[INFO:] Twój numer zosta³ ukryty i nie bêdzie pokazywany w ksi¹¿ce telefonicznej.");
							gPlayerData[playerid][pListNumber] = 0;
							SavePlayerData(playerid, "ListNumber");
						}
						else
						{
							SendClientMessage(playerid,  COLOR_LIGHTYELLOW2, "[INFO:] Twój numer jest widoczny w ksi¹¿ce telefonicznej.");
							gPlayerData[playerid][pListNumber] = 1;
							SavePlayerData(playerid, "ListNumber");
						}
					}
				}
				/* Complex */
				else if(listitem == 8)
				{
					/* Telefon - dane sieci */
					if(!SlotParam1(playerid, gSelectedSlot[playerid]))
					{
						ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "W³¹cz telefon przed jego u¿yciem", "Wróæ", "");
						return 1;
					}
					if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && (SlotItem(playerid, gSelectedSlot[playerid], 3) || SlotItem(playerid, gSelectedSlot[playerid], 4)))
					{
						if(SlotParam4(playerid, gSelectedSlot[playerid]) == 0)
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "W³ó¿ karte SIM", "Wróæ", "");
							return 1;
						}							
						if(gPlayerVars[playerid][mPhoneDataReceived] == 0)
						{
							SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Pobieranie danych z sieci w toku !");
							return 1;
						}
						gPlayerVars[playerid][mPhoneDataReceived] = 0;
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Pobieranie danych z sieci...");
						format(string, sizeof(string), "SELECT HIGH_PRIORITY * FROM `samp_phones` WHERE `Nr` = '%d' AND `SimID` = '%d'",
							SlotParam2(playerid, gSelectedSlot[playerid]), SlotParam4(playerid, gSelectedSlot[playerid]));
						wp_mysql_query(string, CHECK_PHONE_STATUS, playerid, db_con2);
					}
				}
				/* Complex */
				else if(listitem == 9)
				{
					/* Telefon - put SIM Card out */
					if(SlotParam2(playerid, gSelectedSlot[playerid]) == 0)
					{
						ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Telefon nie posiada karty SIM", "Wróc", "");
						return 1;
					}
					if(!PlayerFreeSlotCount(playerid))
					{
						ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Nie posiadasz miejsca na karte SIM", "Wróc", "");
						return 1;
					}
					InsertPlayerItemEx(playerid, 3, 16, SlotParam2(playerid, gSelectedSlot[playerid]), SlotParam3(playerid, gSelectedSlot[playerid]), SlotParam4(playerid, gSelectedSlot[playerid]), 0, "Puste");
					SetPSlotParam2(playerid, gSelectedSlot[playerid], 0);
					SetPSlotParam3(playerid, gSelectedSlot[playerid], 0);
					SetPSlotParam4(playerid, gSelectedSlot[playerid] ,0);
					ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Wyj¹³eœ karte SIM z telefonu", "Wróc", "");
				}
				/* Complex */
				else if(listitem == 10)
				{
					/* Telefon - on/off */
					if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && (SlotItem(playerid, gSelectedSlot[playerid], 3) || SlotItem(playerid, gSelectedSlot[playerid], 4)))
					{
						if(SlotParam1(playerid, gSelectedSlot[playerid]) == 0)
						{
							SetPSlotParam1(playerid, gSelectedSlot[playerid], 1);
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "W³¹czy³eœ swój telefon", "Wróæ", "");
						}
						else
						{
							SetPSlotParam1(playerid, gSelectedSlot[playerid], 0);
							ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Wy³¹czy³eœ swój telefon", "Wróæ", "");
						}
					}
				}
			}
			else
			{
				ShowPItemsEx(playerid);
			}
		}
		case DIALOG_ITEM_3: // item msg
		{
			ShowPItemsEx(playerid);
			return 1;
		}
		case DIALOG_ITEM_4: // item sell
		{
			if(response)
			{
				if(strval(inputtext) <= 0)
				{
					ShowPlayerDialog(playerid, DIALOG_ITEM_4, DIALOG_STYLE_INPUT, "Info", "Poda³eœ nieprawid³ow¹ wartoœæ\nPodaj iloœæ produktów które chcesz sprzedaæ", "Dalej", "");
					return 1;
				}
				new i = gBuyBusinessID[playerid];
				new slot = BizHaveItemType(i, PSlotItemType(playerid, gSelectedSlot[playerid]), ShowSlotItem(playerid, gSelectedSlot[playerid]));
				new maxCanCarry = BizCountMaxItemCarry(i, PSlotItemType(playerid, gSelectedSlot[playerid]), ShowSlotItem(playerid, gSelectedSlot[playerid]));

				if(maxCanCarry <= 0)
				{
					ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Info", "W tym bizniesie nie ma juz miejsca na ten przedmiot", "Dalej", "");
					return 1;
				}
				
				if(SlotParam6(playerid, gSelectedSlot[playerid]) < strval(inputtext))
				{					
					format(string, sizeof(string), "Nie posiadasz tyle danego produktu na tym slocie !\nObecnie posiadasz %d sztuk tego produktu.\nWprowadŸ ponownie liczbe produktów do sprzeda¿y.", SlotParam6(playerid, gSelectedSlot[playerid]));
					ShowPlayerDialog(playerid, DIALOG_ITEM_4, DIALOG_STYLE_INPUT, "Info", string, "Dalej", "");
					return 1;
				}
				
				if(BizItemSlotBuy(i, slot) <= 0)
				{
					ShowPlayerDialog(playerid, DIALOG_ITEM_4, DIALOG_STYLE_INPUT, "Info", "W³aœciciel sklepu nie ustali³ ceny skupu.", "Dalej", "");
					return 1;
				}
				
				
				// sprawdzamy ile biznes pomiesci produktu danego typu
				if(strval(inputtext) < ItemsOnBizSlot(PSlotItemType(playerid, gSelectedSlot[playerid]), ShowSlotItem(playerid, gSelectedSlot[playerid])))
				{
					// maksymalna iloœæ danego itemu w biznesie a iloœæ wpisana przez gracza
					if(maxCanCarry < strval(inputtext) && maxCanCarry > 0)
					{
						if(BizItemSlotBuy(i, slot)*maxCanCarry <= Businesses[i][Till])
						{
							format(string, sizeof(string), "Chcesz sprzedaæ %d itemów do biznesu.\nZysk z tranzakcji wynosi³by $%d\nCzy potwierdzasz sprzeda¿ ?", maxCanCarry, BizItemSlotBuy(i, slot)*maxCanCarry);
							gBuyBusinessItemSellCount[playerid] = maxCanCarry;
						}
						else
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_4, DIALOG_STYLE_INPUT, "Info", "W³aœciciel nie posiada tylu pieniêdzy w biznesie\nPodaj iloœæ produktów które chcesz sprzedaæ", "Dalej", "");
							return 1;
						}
					}
					else
					{
						if(BizItemSlotBuy(i, slot)*strval(inputtext) <= Businesses[i][Till])
						{
							format(string, sizeof(string), "Chcesz sprzedaæ %d itemów do biznesu.\nZysk z tranzakcji wynosi³by $%d\nCzy potwierdzasz sprzeda¿ ?", strval(inputtext), BizItemSlotBuy(i, slot)*strval(inputtext));
							gBuyBusinessItemSellCount[playerid] = strval(inputtext);
						}
						else
						{
							ShowPlayerDialog(playerid, DIALOG_ITEM_4, DIALOG_STYLE_INPUT, "Info", "W³aœciciel nie posiada tylu pieniêdzy w biznesie\nPodaj iloœæ produktów które chcesz sprzedaæ", "Dalej", "");
							return 1;
						}
					}
				}
				else
				{
					if(BizItemSlotBuy(i, slot)*maxCanCarry <= Businesses[i][Till] && maxCanCarry > 0)
					{
						format(string, sizeof(string), "Chcesz sprzedaæ %d itemów do biznesu.\nZysk z tranzakcji wynosi³by $%d\nCzy potwierdzasz sprzeda¿ ?", maxCanCarry, BizItemSlotBuy(i, slot)*maxCanCarry);
						gBuyBusinessItemSellCount[playerid] = maxCanCarry;
					}
					else
					{
						ShowPlayerDialog(playerid, DIALOG_ITEM_4, DIALOG_STYLE_INPUT, "Info", "W³aœciciel nie posiada tylu pieniêdzy w biznesie\nPodaj iloœæ produktów które chcesz sprzedaæ", "Dalej", "");
						return 1;
					}
				}
				ShowPlayerDialog(playerid, DIALOG_ITEM_4B, DIALOG_STYLE_MSGBOX, "Info", string, "Tak", "Anuluj");
			}
		}
		case DIALOG_ITEM_4B:
		{
			if(response)
			{
				new i = gBuyBusinessID[playerid];
				new slot = BizHaveItemType(i, PSlotItemType(playerid, gSelectedSlot[playerid]), ShowSlotItem(playerid, gSelectedSlot[playerid]));
				InsertBizItem(i, PSlotItemType(playerid, gSelectedSlot[playerid]), ShowSlotItem(playerid, gSelectedSlot[playerid]), gBuyBusinessItemSellCount[playerid]);
				RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid], gBuyBusinessItemSellCount[playerid]);
				
				switch(gSelectedSlot[playerid])
				{
					case 1:
					{
						Businesses[i][Product1incomeTotal] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						Businesses[i][Product1incomeToday] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						Businesses[i][mIncomeTotal] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						SaveBizData(i, "Product1incomeTotal");
						SaveBizData(i, "Product1incomeToday");
						SaveBizData(i, "IncomeTotal");
					}
					case 2:
					{
						Businesses[i][Product2incomeTotal] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						Businesses[i][Product2incomeToday] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						Businesses[i][mIncomeTotal] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						SaveBizData(i, "Product2incomeTotal");
						SaveBizData(i, "Product2incomeToday");
						SaveBizData(i, "IncomeTotal");
					}
					case 3:
					{
						Businesses[i][Product3incomeTotal] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						Businesses[i][Product3incomeToday] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						Businesses[i][mIncomeTotal] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						SaveBizData(i, "Product3incomeTotal");
						SaveBizData(i, "Product3incomeToday");
						SaveBizData(i, "IncomeTotal");
					}
					case 4:
					{
						Businesses[i][Product4incomeTotal] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						Businesses[i][Product4incomeToday] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						Businesses[i][mIncomeTotal] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						SaveBizData(i, "Product4incomeTotal");
						SaveBizData(i, "Product4incomeToday");
						SaveBizData(i, "IncomeTotal");
					}
					case 5:
					{
						Businesses[i][Product5incomeTotal] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						Businesses[i][Product5incomeToday] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						Businesses[i][mIncomeTotal] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						SaveBizData(i, "Product5incomeTotal");
						SaveBizData(i, "Product5incomeToday");
						SaveBizData(i, "IncomeTotal");
					}
					case 6:
					{
						Businesses[i][Product6incomeTotal] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						Businesses[i][Product6incomeToday] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						Businesses[i][mIncomeTotal] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						SaveBizData(i, "Product6incomeTotal");
						SaveBizData(i, "Product6incomeToday");
						SaveBizData(i, "IncomeTotal");
					}
					case 7:
					{
						Businesses[i][Product7incomeTotal] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						Businesses[i][Product7incomeToday] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						Businesses[i][mIncomeTotal] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						SaveBizData(i, "Product7incomeTotal");
						SaveBizData(i, "Product7incomeToday");
						SaveBizData(i, "IncomeTotal");
					}
					case 8:
					{
						Businesses[i][Product8incomeTotal] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						Businesses[i][Product8incomeToday] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						Businesses[i][mIncomeTotal] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						SaveBizData(i, "Product8incomeTotal");
						SaveBizData(i, "Product8incomeToday");
						SaveBizData(i, "IncomeTotal");
					}
					case 9:
					{
						Businesses[i][Product9incomeTotal] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						Businesses[i][Product9incomeToday] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						Businesses[i][mIncomeTotal] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						SaveBizData(i, "Product9incomeTotal");
						SaveBizData(i, "Product9incomeToday");
						SaveBizData(i, "IncomeTotal");
					}
					case 10:
					{
						Businesses[i][Product10incomeTotal] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						Businesses[i][Product10incomeToday] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						Businesses[i][mIncomeTotal] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
						SaveBizData(i, "Product10incomeTotal");
						SaveBizData(i, "Product10incomeToday");
						SaveBizData(i, "IncomeTotal");
					}
				}
				
				format(string, sizeof(string), "Sprzeda³eœ itemy !\nZarobi³eœ $%d", BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid]);
				GivePlayerCash(playerid, BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid]);
				Businesses[i][Till] -= BizItemSlotBuy(i, slot)*gBuyBusinessItemSellCount[playerid];
				SaveBizData(i, "Till");
				ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Info", string, "Dalej", "");
			}
			else
				ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Info", "Anulowa³eœ sprzeda¿", "Dalej", "");
		}
		case DIALOG_ITEM_5: // show item for other player or additional data input
		{
			if(response)
			{
				/* Walky-talky */
				if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && (SlotItem(playerid, gSelectedSlot[playerid], 2)))
				{
					if(strval(inputtext) < 0 || strval(inputtext) > 40)
						ShowPlayerDialog(playerid, DIALOG_ITEM_5, DIALOG_STYLE_INPUT, "Kana³ CB", "Niepoprawne ID kana³u - podaj ponownie ID kana³u - zakres 0-40", "Ok", "Wróæ");
					SetPSlotParam2(playerid, gSelectedSlot[playerid], strval(inputtext));
					ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Info", "Zmieni³eœ kana³", "Wróæ", "");
				}
				if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && (SlotItem(playerid, gSelectedSlot[playerid], 13)))
				{
					if(strval(inputtext) < 0 || strval(inputtext) > 45)
						ShowPlayerDialog(playerid, DIALOG_ITEM_5, DIALOG_STYLE_INPUT, "Kana³ CB", "Niepoprawne ID kana³u - podaj ponownie ID kana³u - zakres 0-45", "Ok", "Wróæ");
					SetPSlotParam2(playerid, gSelectedSlot[playerid], strval(inputtext));
					ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Info", "Zmieni³eœ kana³", "Wróæ", "");
				}
				/* SIM Card Extension */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 17))
				{
					new slot = listitem+1;
					if(Businesses[SlotParam3(playerid, slot)][mFaction] != Businesses[SlotParam3(playerid, gSelectedSlot[playerid])][mFaction])
					{
						ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Ta karta nie przed³u¿a wa¿noœci konta dla tej sieci", "Wróæ", "");
						return 1;
					}					
					format(string, sizeof(string), "SELECT HIGH_PRIORITY * FROM `samp_phones` WHERE `Nr` = '%d' AND `SimID` = '%d'",
						SlotParam2(playerid, slot), SlotParam4(playerid, slot));
					wp_mysql_query(string, CHECK_PHONE_TYPE_EXTENSION, playerid, db_con1);
					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Sprawdzanie stanu konta... Poczekaj na komunikat wynikowy przed ponownym u¿yciem /mi", "Ok", "");
				}
				/* SIM Card enter */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 16))
				{
					new slot = listitem+1;
					if(PSlotItemType(playerid, slot) != 3 && (ShowSlotItem(playerid, slot) != 3 || ShowSlotItem(playerid, slot) != 4))
					{
						ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Wybra³eœ niepoprawny item (nie bêd¹cy telefonem)", "Wróæ", "");
						return 1;
					}
					if(SlotParam2(playerid, slot) != 0)
					{
						ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Ten telefon posiada ju¿ karte SIM", "Wróæ", "");
						return 1;
					}
					SetPSlotParam2(playerid, slot, SlotParam1(playerid, gSelectedSlot[playerid]));
					SetPSlotParam3(playerid, slot, SlotParam2(playerid, gSelectedSlot[playerid]));
					SetPSlotParam4(playerid, slot, SlotParam3(playerid, gSelectedSlot[playerid]));
					RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
					ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "W³o¿y³eœ karte SIM do telefonu", "Wróæ", "");
					return 1;
				}
				/* Key maker */
				else if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 1) && SlotItem(playerid, gSelectedSlot[playerid], 143))
				{
					new slot = listitem+1;
					if(PSlotItemType(playerid, slot) != 2 && PSlotItemType(playerid, slot) != 4 && PSlotItemType(playerid, slot) != 10)
					{
						ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Wybra³eœ niepoprawny item (nie bêd¹cy kluczem)", "Wróæ", "");
						return 1;
					}
					if(PlayerFreeSlotCount(playerid) == 0)
					{
						ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Musisz posiadaæ co najmniej 1 wolny slot aby skopiowaæ klucz", "Wróæ", "");
						return 1;
					}
					if(SlotParam2(playerid, slot))
					{
						ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Nie mo¿esz skopiowaæ tego klucza !", "Wróæ", "");
						return 1;
					}
					InsertPlayerItem(playerid, PSlotItemType(playerid, slot), ShowSlotItem(playerid, slot), SlotParam1(playerid, slot), 0);
					RemovePlayerItemUsed(playerid, gSelectedSlot[playerid]);
					ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Stworzy³eœ kopie klucza !", "Wróæ", "");
					return 1;
				}
				/* Player personal documents */
				if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && (SlotItem(playerid, gSelectedSlot[playerid], 5) || SlotItem(playerid, gSelectedSlot[playerid], 6) || SlotItem(playerid, gSelectedSlot[playerid], 18) || SlotItem(playerid, gSelectedSlot[playerid], 19)))
				{
					new giveplayerid = strval(inputtext);
					if(!IsPlayerConnected(giveplayerid) || !gPlayerLogged[giveplayerid])
						ShowPlayerDialog(playerid, DIALOG_ITEM_5, DIALOG_STYLE_INPUT, "ID gracza", "Niepoprawne ID - podaj ponownie ID gracza któremu chcesz pokazaæ dokument", "Ok", "Wróæ");
					if(GetDistanceBetweenPlayers(playerid, giveplayerid) > 5.0)
						ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Info", "Jesteœ zbyt daleko od tej osoby !", "Wróæ", "");
					/* Player personal documents - identity */
					format(string, sizeof(string), "pokazuje dokumenty dla %s", GetPlayerNameEx(giveplayerid));
					PlayerActionMessage(playerid, 15.0, string);
					if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 5))
					{
						SlotParam5(playerid, gSelectedSlot[playerid]);
						format(string, sizeof(string), "Dowód - wyrobiony na osobe: %s", gDSelectedItemP5[playerid]);
						ShowPlayerDialog(giveplayerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Dokument", string, "Zamknij", "");
					}
					/* Player personal documents - driving licence */
					if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 6))
					{
						SlotParam5(playerid, gSelectedSlot[playerid]);
						format(string, sizeof(string), "Prawo jazdy wyrobione na: %s\nKat. A: %d dni\nKat. B: %d dni\nKat. C+E: %d dni", gDSelectedItemP5[playerid], SlotParam1(playerid, gSelectedSlot[playerid]), SlotParam2(playerid, gSelectedSlot[playerid]), SlotParam3(playerid, gSelectedSlot[playerid]));
						ShowPlayerDialog(giveplayerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Dokument", string, "Zamknij", "");
					}
					/* Player personal documents - vehicle document */
					if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 19))
					{
						SlotParam5(playerid, gSelectedSlot[playerid]);
						format(string, sizeof(string), "Dowód rejestracyjny pojazdu\n\nW³aœciciel: %s\nNumer VIN: %d\nNumer rejestracyjny: %d\n\nUbezpieczenie OC na kwote: $%d\nUbeczpienie AC na kwote: $%d", 
							gDSelectedItemP5[playerid], SlotParam2(playerid, gSelectedSlot[playerid]), SlotParam1(playerid, gSelectedSlot[playerid]), SlotParam3(playerid, gSelectedSlot[playerid]), SlotParam4(playerid, gSelectedSlot[playerid]));
						ShowPlayerDialog(giveplayerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Dokument", string, "Zamknij", "");
					}					
					/* Player personal documents - WORD document */
					if(PSlotItemTypeCompare(playerid, gSelectedSlot[playerid], 3) && SlotItem(playerid, gSelectedSlot[playerid], 18))
					{
						SlotParam5(playerid, gSelectedSlot[playerid]);
						format(string, sizeof(string), "Legitymacja egzaminatora WORDu\nW³aœciciel: %s", gDSelectedItemP5[playerid]);
						ShowPlayerDialog(giveplayerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Dokument", string, "Zamknij", "");
					}
				}
			}
			else
				ShowPItemsEx(playerid);
		}
		case DIALOG_ITEM_TRANSFER_COUNT:
		{
			if(response)
			{
				gSendingCount[playerid] = strval(inputtext);
				if(gSendingCount[playerid] <= 0)
				{
					ShowPlayerDialog(playerid,DIALOG_ITEM_TRANSFER_COUNT, DIALOG_STYLE_INPUT,"Przekazywanie itema","Poda³eœ niepoprawn¹ liczbe.\nWprowadŸ ponownie wartoœæ.","Dalej","Wróæ");
					return 1;
				}					
				ShowPlayerDialog(playerid,DIALOG_ITEM_TRANSFER, DIALOG_STYLE_INPUT,"Przekazywanie itema","Wpisz ID gracza któremu chcesz przekazaæ item.","Przeka¿","Wróæ");
			}
			else
			{
				ShowPItemsEx(playerid);
				return 1;
			}
		}
		case DIALOG_ITEM_TRANSFER: // przekazywanie itema
		{
			if(response)
			{
				new giveplayerid = strval(inputtext);
				new slot = gSelectedSlot[playerid];
				gSelectedSlot[giveplayerid] = gSelectedSlot[playerid];
				gSendingPlayer[giveplayerid] = playerid;
				if(IsPlayerConnected(giveplayerid) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Ten gracz nie jest ON-LINE");
					return 1;
				}
				if( giveplayerid == playerid )
				{
					SendClientMessage( playerid, COLOR_ORANGE, "[INFO:] Nie mo¿esz sam sobie przekazaæ itemu !" );
					return 1;
				}
				new Float: posX, Float: posY, Float: posZ;
				GetPlayerPos(playerid, posX, posY, posZ);
				if(PlayerToPoint(2.0, giveplayerid, posX, posY, posZ) == 0)
				{
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Ta osoba jest zbyt daleko od Ciebie !");
					return 1;
				}
				if(gSendingCount[playerid] > SlotParam6(playerid, gSelectedSlot[playerid]))
					gSendingCount[giveplayerid] = SlotParam6(playerid, gSelectedSlot[playerid]);
				else
					gSendingCount[giveplayerid] = gSendingCount[playerid];
				if(PlayerFreeSlotCount(giveplayerid) > 0)
				{
					format(string, sizeof(string), "Czy zgadzasz siê na odebranie itemu: %s od %s?", ItemName(PSlotItemType(playerid, slot), ShowSlotItem(playerid, slot)), gPlayerData[playerid][pName]);
					ShowPlayerDialog(giveplayerid, DIALOG_ITEM_TRANSFER_RESPONSE, DIALOG_STYLE_MSGBOX, "PotwierdŸ transakcje", string, "Tak", "Nie");
					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Zaoferowa³eœ graczowi przedmiot", "Zamknij", "");
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Ta osoba nie ma miejsca aby przyj¹æ od ciebie item");
					ShowPItemsEx(playerid);
					return 1;
				}
			}
			else
			{
				ShowPItemsEx(playerid);
				return 1;
			}
		}
		case DIALOG_ITEM_TRANSFER_RESPONSE:
		{
			if(response)
			{
				new giveplayerid = gSendingPlayer[playerid];

				format(string, sizeof(string), "[INFO:] Przekaza³eœ item ze slotu nr %d", gSelectedSlot[playerid]);
				SendClientMessage(giveplayerid, COLOR_LIGHTYELLOW2, string);

				format(string, sizeof(string), "[INFO:] Otrzyma³eœ item od %s, slot %d", gPlayerData[giveplayerid][pName], gSelectedSlot[playerid]);
				SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);

				format(string, sizeof(string), "wyjmuje %s i przekazuje go/je", ItemName( PSlotItemType(giveplayerid, gSelectedSlot[giveplayerid] ), ShowSlotItem(giveplayerid, gSelectedSlot[giveplayerid]) ));
				PlayerPlayerActionMessage(giveplayerid, playerid, 20.0, string);

				SlotParam5(giveplayerid, gSelectedSlot[playerid]);
				InsertPlayerItemEx(playerid, PSlotItemType(giveplayerid, gSelectedSlot[playerid]), ShowSlotItem(giveplayerid, gSelectedSlot[playerid]), SlotParam1(giveplayerid, gSelectedSlot[playerid]), SlotParam2(giveplayerid, gSelectedSlot[playerid]), SlotParam3(giveplayerid, gSelectedSlot[playerid]), SlotParam4(giveplayerid, gSelectedSlot[playerid]), gDSelectedItemP5[giveplayerid], gSendingCount[playerid]);

				RemovePlayerItemExUsed(giveplayerid, gSelectedSlot[playerid], gSendingCount[playerid]);
				ShowPItemsEx(playerid);
			}
			else
			{
				SendClientMessage(gSendingPlayer[playerid], COLOR_ORANGE, "[INFO:] Gracz odrzuci³ twoj¹ propozycje !");
				return 1;
			}
		}
		case DIALOG_ITEM_REMOVE: // wyrzucanie itema
		{
			if(response)
			{
				new howMuch = strval(inputtext);
				if(SlotParam6(playerid, gSelectedSlot[playerid]) <= 0)
				{
					RemovePlayerItemEx(playerid, gSelectedSlot[playerid]);
					format(string, sizeof(string), "[INFO:] Wyrzuci³eœ item ze slotu %d", gSelectedSlot[playerid]);
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2,string);
					ShowPItemsEx(playerid);
					return 1;
				}
				if(howMuch > SlotParam6(playerid, gSelectedSlot[playerid]))
				{
					format(string, sizeof(string), "Nie posiadasz tyle przedmiotów danego typu !\nAktualna iloœæ to %d itemów\nWpisz now¹ wartoœæ:", SlotParam6(playerid, gSelectedSlot[playerid]));
					ShowPlayerDialog(playerid,DIALOG_ITEM_REMOVE,DIALOG_STYLE_INPUT,"Wpisz iloœæ",string,"Wyrzuæ","Anuluj");
					return 1;
				}
				if(howMuch == 0)
				{
					ShowPlayerDialog(playerid,DIALOG_ITEM_REMOVE,DIALOG_STYLE_INPUT,"Wpisz iloœæ","Poda³eœ b³êdn¹ wartoœæ\nWpisz now¹","Wyrzuæ","Anuluj");
					return 1;
				}
				if(SlotParam6(playerid, gSelectedSlot[playerid])-howMuch == 0)
				{
					RemovePlayerItem(playerid, gSelectedSlot[playerid]);
				}
				else
				{
					SetPSlotParam6(playerid, gSelectedSlot[playerid], SlotParam6(playerid, gSelectedSlot[playerid])-howMuch);
					InsertPlayerPickupItem(playerid, gSelectedSlot[playerid], howMuch); // tworze pickupa do podniesienie
				}
				format(string, sizeof(string), "[INFO:] Wyrzuci³eœ %d itemów", howMuch);
				SendClientMessage(playerid, COLOR_LIGHTYELLOW2, string);
				ShowPItemsEx(playerid);
				return 1;
			}
			else
			{
				ShowPItemsEx(playerid);
			}
		}
		case DIALOG_KANISTER:
		{
			if(response)
			{
				new Float:xpos, Float:ypos, Float:zpos, Float:carx, Float:cary, Float:carz;
				new serial = strval(inputtext);
				for(new i = 0; i < sizeof(gVehData); i++)
				{
					if(gVehData[i][CarSerial] == serial)
					{
						if(gVehData[i][CarFuel] == float(VehFTank(i+1)))
						{
							SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Bak tego pojazdu jest pe³ny !");
							return 1;
						}
						if(gVehData[i][EngineOn])
						{
							SendClientMessage(playerid, COLOR_LIGHTBLUE, "[INFO:] Wy³¹cz silnik zanim zatankujesz !");
							return 1;
						}
						if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT)
						{
							SendClientMessage(playerid, COLOR_LIGHTBLUE, "[INFO:] Musisz byæ przy pojeŸdzie !");
							return 1;
						}
						if(SlotParam2(playerid, gSelectedSlot[playerid]) != gVehData[i][Fuel])
						{
							SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Ten kanister zawiera paliwo które nie jest przeznaczone do tego pojazdu");
							return 1;
						}
						GetPlayerPos(playerid,xpos,ypos,zpos);
						GetVehiclePos(i+1,carx,cary,carz);
						if(!PlayerToPoint(11.0, playerid, carx, cary, carz))
						{
							SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Jesteœ zbyt daleko od tego pojazdu !");
							return 1;
						}
						SetTimerEx("RefuelingVehicleCanister",DBVariables[1][varDValue] * floatround(float(VehFTank(i+1)) - gVehData[i][CarFuel]), false, "idfff", playerid, i+1, carx, cary, carz);
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Rozpoczê³eœ tankowanie");
						PlayerActionMessage(playerid, 15.0, "wlewa paliwo z kanistra");
						return 1;
					}
				}
				SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Nie ma takiego pojazdu !");
				return 1;
			}
			else
				ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie", DIALOG_KANISTER_TXT,"Akceptuj","Wróæ");
			return 1;
		}
		case DIALOG_KANISTER_REFUEL:
		{
			if(response)
			{
				new refillprice;
				new Float:posx, Float:posy, Float:posz;
				GetPlayerPos(playerid,posx,posy,posz);
				for(new i = 0; i < sizeof(Businesses); i++)
				{
					if(gPlayerData[playerid][pGasStationRefPetrol][i] != 0.0 || gPlayerData[playerid][pGasStationRefOil][i] != 0 || gPlayerData[playerid][pGasStationRefGas][i] != 0)
					{
						format(string, sizeof(string), "Nie mo¿esz zatankowaæ paliwa, posiadasz d³ug na jednej ze stacji ! (biznes nr %d)", i);
						ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", string, "Zamknij", "");
						return 1;
					}
				}
				for(new i = 0; i < sizeof(GasStations); i++)
				{
					if(PlayerToPoint(10.0, playerid, GasStations[i][GSposX], GasStations[i][GSposY], GasStations[i][GSposZ]))
					{
						if(listitem == 0 && GasStations[i][PetrolResourceValue] <= 0)
						{
							SendClientMessage(playerid, COLOR_RED, "[INFO:] Brak zasobów na stacji !");
							return 1;
						}
						else if(listitem == 1 && GasStations[i][OilResourceValue] <= 0)
						{
							SendClientMessage(playerid, COLOR_RED, "[INFO:] Brak zasobów na stacji !");
							return 1;
						}
						if(listitem == 0)
						{
							SetPSlotParam2(playerid, gSelectedSlot[playerid], 0);
							SaveStatsData("kanister-benzyna", gPlayerData[playerid][pName], refillprice, GasStations[i][BusinessID], Businesses[GasStations[i][BusinessID]][BizType]);
						}
						else if(listitem == 1)
						{
							SetPSlotParam2(playerid, gSelectedSlot[playerid], 1);
							SaveStatsData("kanister-diesel", gPlayerData[playerid][pName], refillprice, GasStations[i][BusinessID], Businesses[GasStations[i][BusinessID]][BizType]);
						}
						RefuelingCanister(playerid, 0.0, gSelectedSlot[playerid], i, posx, posy, posz);
						return 1;
					}
				}
				SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Nie znajdujesz siê na stacji beznynowej !");
				return 1;
			}
			else
				ShowPlayerDialog(playerid,DIALOG_ITEM_2,DIALOG_STYLE_LIST,"Dzia³anie", DIALOG_KANISTER_TXT,"Akceptuj","Wróæ");
			return 1;
		}
		case DIALOG_BUY_SIM:
		{
			if(response)
			{
				if(listitem == 0)
				{
					format(string, sizeof(string), "Oferta na abonament\n\nOp³ata aktywacyjna: $%d\nDarmowe minuty/SMSy: %d/%d\nKoszt dziennego abonamentu: $%d\nKoszt za minute po³¹czenia: $%d\nKoszt SMS: $%d\n\nOferta sieci mo¿e ulec zmianie w czasie korzystania z sieci",
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mSimFreeMins],
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mSimFreeSms],
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mSimActivationCost],
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mSimDailyFee],
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCallCostFee],
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mSmsCostFee]);
					ShowPlayerDialog(playerid, DIALOG_BUY_SIM_2_FEE, DIALOG_STYLE_MSGBOX, "Oferta", string, "Kup", "Wróæ"); 
				}
				else if(listitem == 1)
				{
					format(string, sizeof(string), "Oferta na karte\n\nOp³ata aktywacyjna: $%d\nDostêpne ceny kart: $%d/%d dni, $%d/%d dni, $%d/%d dni, $%d/%d dni\nKoszt za minute po³¹czenia: $%d\nKoszt SMS: $%d\n\nOferta sieci mo¿e ulec zmianie w czasie korzystania z sieci",
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mSimActivationCost],
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewCost1],
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewTime1],
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewCost2],
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewTime2],
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewCost3],
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewTime3],
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewCost4],
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewTime4],
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCallCostCard],
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mSmsCostCard]);
					ShowPlayerDialog(playerid, DIALOG_BUY_SIM_2_CARD, DIALOG_STYLE_MSGBOX, "Oferta", string, "Kup", "Wróæ"); 
				}
				else if(listitem == 2)
				{
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] £adowanie danych...");
					format(string, sizeof(string), "SELECT `ID` , `Nr` , `SimID` FROM `samp_phones` WHERE `PlayerName` = '%s' AND `Faction` = '%d' ORDER BY `ID` ASC",
						gPlayerData[playerid][pName], Businesses[gBuyBusinessID[playerid]][mFaction]);
					wp_mysql_query(string, PHONE_LIST_SIM_REPLACE, playerid, db_con1);
				}
				else if(listitem == 3)
				{
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] £adowanie danych...");
					format(string, sizeof(string), "SELECT `ID` , `Nr` , `SimID` FROM `samp_phones` WHERE `PlayerName` = '%s' AND `Faction` = '%d' ORDER BY `ID` ASC",
						gPlayerData[playerid][pName], Businesses[gBuyBusinessID[playerid]][mFaction]);
					wp_mysql_query(string, PHONE_LIST_FEE_RESIGN, playerid, db_con1);
				}
				else if(listitem == 4)
				{
					format(string, sizeof(string), "1. Karta o wartoœci $%d. Przed³u¿enie wa¿noœci konta o %d\n",
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewCost1],
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewTime1]);
					format(string, sizeof(string), "%s2. Karta o wartoœci $%d. Przed³u¿enie wa¿noœci konta o %d\n",
						string,
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewCost2],
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewTime2]);
					format(string, sizeof(string), "%s3. Karta o wartoœci $%d. Przed³u¿enie wa¿noœci konta o %d\n",
						string,
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewCost3],
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewTime3]);
					format(string, sizeof(string), "%s4. Karta o wartoœci $%d. Przed³u¿enie wa¿noœci konta o %d",
						string,
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewCost4],
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewTime4]);
					ShowPlayerDialog(playerid, DIALOG_BUY_SIM_2_EXTENSION, DIALOG_STYLE_LIST, "Dostêpne opcje kart", string, "Kup", "Wróc");
				}
				else if(listitem == 5)
				{
					if(Businesses[gBuyBusinessID[playerid]][mFactionTimeLeft] > 0)
					{
						format(string, sizeof(string), "Jeœli postanowisz teraz zerwaæ umowe z obecn¹ sieci¹ zap³acisz kare w wysokoœci $%d.\nDo koñca okresu ochronnego zosta³o %d dni",
							DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mBizPenaltyValue], Businesses[gBuyBusinessID[playerid]][mFactionTimeLeft]);
						ShowPlayerDialog(playerid, DIALOG_BUY_SIM_2_RESIGN_CONTRACT, DIALOG_STYLE_MSGBOX, "Informacja", string, "Kontynuuj", "Wróæ");
						return 1;
					}
					format(string, sizeof(string), "Zerwa³eœ umowe z %s", DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][Name]);
					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", string, "Zamknij", "");
					Businesses[gBuyBusinessID[playerid]][mFaction] = -1;
					SaveBizData(gBuyBusinessID[playerid], "Faction");					
				}
			}
		}
		case DIALOG_BUY_SIM_2_FEE:
		{
			if(response)
			{
				gPhoneC[playerid] = gBuyBusinessID[playerid];
				if(GetPlayerCash(playerid) < DynamicFactions[Businesses[gPhoneC[playerid]][mFaction]][mSimActivationCost])
				{
					SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Nie masz wystarczaj¹cej iloœci pieniêdzy");
					return 1;
				}
				DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][fBank] += DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mSimActivationCost] - floatround(DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mSimActivationCost]*DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mBizOfferIncome]);
				SaveFData(Businesses[gBuyBusinessID[playerid]][mFaction], "Bank");
				
				Businesses[gBuyBusinessID[playerid]][Till] += floatround(DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mSimActivationCost]*DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mBizOfferIncome]);
				SaveBizData(gBuyBusinessID[playerid], "Till");
				
				GivePlayerCash(playerid, -DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mSimActivationCost]);
				
				Businesses[gCalledCompany[playerid]][mIncomeTotal] += floatround(DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mSimActivationCost]*DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mBizOfferIncome]);
				Businesses[gCalledCompany[playerid]][mIncomePhoneTotal] += floatround(DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mSimActivationCost]*DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mBizOfferIncome]);
				Businesses[gCalledCompany[playerid]][mIncomePhoneToday] += floatround(DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mSimActivationCost]*DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mBizOfferIncome]);
				SaveBizData(gCalledCompany[playerid], "IncomeTotal");
				SaveBizData(gCalledCompany[playerid], "IncomePhoneTotal");
				SaveBizData(gCalledCompany[playerid], "IncomePhoneToday");
				
				gRandNumber[playerid] = 600000000 + random(999999);				
				gRandSimNumber[playerid] = random(999999);				
				SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Trwa generowanie numeru...");
				format(string, sizeof(string), "SELECT `Nr` FROM `samp_phones` WHERE `Nr` = '%d'",gRandNumber[playerid]);
				wp_mysql_query(string, CHECK_PHONE_FEE, playerid, db_con3);
				
				return 1;
			}
			else
				ShowShopMenu(playerid);
		}
		case DIALOG_BUY_SIM_2_CARD:
		{
			if(response)
			{
				gPhoneC[playerid] = gBuyBusinessID[playerid];
				if(GetPlayerCash(playerid) < DynamicFactions[Businesses[gPhoneC[playerid]][mFaction]][mSimActivationCost])
				{
					SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Nie masz wystarczaj¹cej iloœci pieniêdzy");
					return 1;
				}
				
				DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][fBank] += DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mSimActivationCost] - floatround(DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mSimActivationCost]*DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewCost1]);
				SaveFData(Businesses[gBuyBusinessID[playerid]][mFaction], "Bank");
				
				Businesses[gBuyBusinessID[playerid]][Till] += floatround(DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mSimActivationCost]*DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewCost1]);
				SaveBizData(gBuyBusinessID[playerid], "Till");
				
				GivePlayerCash(playerid, -DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mSimActivationCost]);
				
				Businesses[gCalledCompany[playerid]][mIncomeTotal] += floatround(DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mSimActivationCost]*DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewCost1]);
				Businesses[gCalledCompany[playerid]][mIncomePhoneTotal] += floatround(DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mSimActivationCost]*DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewCost1]);
				Businesses[gCalledCompany[playerid]][mIncomePhoneToday] += floatround(DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mSimActivationCost]*DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewCost1]);
				SaveBizData(gCalledCompany[playerid], "IncomeTotal");
				SaveBizData(gCalledCompany[playerid], "IncomePhoneTotal");
				SaveBizData(gCalledCompany[playerid], "IncomePhoneToday");
				
				gRandNumber[playerid] = 600000000 + random(999999);				
				gRandSimNumber[playerid] = random(999999);				
				SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Trwa generowanie numeru...");
				format(string, sizeof(string), "SELECT `Nr` FROM `samp_phones` WHERE `Nr` = '%d'",gRandNumber[playerid]);
				wp_mysql_query(string, CHECK_PHONE_CARD, playerid, db_con3);
				return 1;
			}
			else
				ShowShopMenu(playerid);
		}
		case DIALOG_BUY_SIM_2_RENEW:
		{
			if(response)
			{
				if(!PlayerFreeSlotCount(playerid))
				{
					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Musisz mieæ wolny przynajmniej jeden slot !", "Ok", "");
					return 1;
				}
				new tmpid = random(999999);			
				format(string, sizeof(string), "UPDATE `samp_phones` SET `SimID` = '%d' WHERE `PlayerName` = '%s' AND `Nr` = '%d' AND `SimID` = '%d'",
					tmpid, gPlayerData[playerid][pName], gPhoneList[listitem][mPhoneNr], gPhoneList[listitem][mPhoneSimID]);
				wp_mysql_query(string, SAVE, INVALID_PLAYER_ID, db_con2);
				gPhoneList[listitem][mPhoneSimID] = tmpid;
				InsertPlayerItemEx(playerid, 3, 16, gRandNumber[playerid], gBuyBusinessID[playerid], gPhoneList[listitem][mPhoneSimID], 0, "Puste");
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Otrzyma³eœ now¹ karte SIM, poprzednia karta zosta³a zablokowana", "Ok", "");
			}
			else
				ShowShopMenu(playerid);
		}
		case DIALOG_BUY_SIM_2_RESIGN:
		{
			if(response)
			{			
				format(string, sizeof(string), "DELETE FROM `samp_phones` WHERE `PlayerName` = '%s' AND `Nr` = '%d' AND `SimID` = '%d'",
					gPlayerData[playerid][pName], gPhoneList[listitem][mPhoneNr], gPhoneList[listitem][mPhoneSimID]);
				wp_mysql_query(string, SAVE, INVALID_PLAYER_ID, db_con2);
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Zrezygnowa³eœ z abonamentu.", "Ok", "");
			}
			else
				ShowShopMenu(playerid);
		}
		case DIALOG_BUY_SIM_2_EXTENSION:
		{
			if(response)
			{
				if(listitem == 0)
				{
					if(gPlayerData[playerid][pCash] < DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewCost1])
					{
						ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Nie masz wystarczaj¹cej iloœci pieniêdzy !", "Ok", "");
						return 1;
					}
					InsertPlayerItemEx(playerid, 3, 17, DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewCost1], 
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewTime1],
						gBuyBusinessID[playerid], 0, "Puste", 1);
				}
				if(listitem == 1)
				{
					if(gPlayerData[playerid][pCash] < DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewCost2])
					{
						ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Nie masz wystarczaj¹cej iloœci pieniêdzy !", "Ok", "");
						return 1;
					}
					InsertPlayerItemEx(playerid, 3, 17, DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewCost2], 
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewTime2],
						gBuyBusinessID[playerid], 0, "Puste", 1);
				}
				if(listitem == 2)
				{
					if(gPlayerData[playerid][pCash] < DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewCost3])
					{
						ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Nie masz wystarczaj¹cej iloœci pieniêdzy !", "Ok", "");
						return 1;
					}
					InsertPlayerItemEx(playerid, 3, 17, DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewCost3], 
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewTime3],
						gBuyBusinessID[playerid], 0, "Puste", 1);
				}
				if(listitem == 3)
				{
					if(gPlayerData[playerid][pCash] < DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewCost4])
					{
						ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Nie masz wystarczaj¹cej iloœci pieniêdzy !", "Ok", "");
						return 1;
					}
					InsertPlayerItemEx(playerid, 3, 17, DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewCost4], 
						DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mCardRenewTime4],
						gBuyBusinessID[playerid], 0, "Puste", 1);
				}
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Kupi³eœ karte", "Ok", "");
			}
			else
				ShowShopMenu(playerid);
		}
		case DIALOG_BUY_SIM_2_RESIGN_CONTRACT:
		{
			if(response)
			{
				if(Businesses[gBuyBusinessID[playerid]][Till] < DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mBizPenaltyValue])
				{
					format(string, sizeof(string), "W biznesie nie ma wystarczaj¹cej iloœci pieniêdzy ! Potrzeba $%d", DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][mBizPenaltyValue]);
					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", string, "Ok", "");
				}
				format(string, sizeof(string), "Zerwa³eœ umowe z %s", DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][Name]);
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", string, "Zamknij", "");
				Businesses[gBuyBusinessID[playerid]][mFaction] = -1;
				SaveBizData(gBuyBusinessID[playerid], "Faction");
				Businesses[gBuyBusinessID[playerid]][Till] -= DynamicFactions[Businesses[gBuyBusinessID[playerid]][mFaction]][Name];
				SaveBizData(gBuyBusinessID[playerid], "Till");
			}
			else
				ShowShopMenu(playerid);
		}
		case DIALOG_SELECT_PHONE_COMPANY:
		{
			if(response)
			{
				new j = 1;
				for(new i = 0; i < sizeof(DynamicFactions); i++)
				{
					if(DynamicFactions[i][IsEnabled] && DynamicFactions[i][fType] == FACTIONT_COMPANY_PHONE)
					{
						format(string, sizeof(string), "%s%d. %s\n", string, j++, DynamicFactions[i][Name]);
					}
				}
				ShowPlayerDialog(playerid, DIALOG_SELECT_PHONE_COMPANY_2, DIALOG_STYLE_LIST, "Lista sieci komórkowych", string, "Poka¿ oferte", "Wróc");
			}
		}
		case DIALOG_SELECT_PHONE_COMPANY_2:
		{
			if(response)
			{
				new k = 0;
				gSelectedSlot[playerid] = listitem;
				for(new i = 0; i < sizeof(DynamicFactions); i++)
				{
					if(DynamicFactions[i][IsEnabled] && DynamicFactions[i][fType] == FACTIONT_COMPANY_PHONE)
					{
						if(k++ == listitem)
						{
							format(string, sizeof(string), "Oferta sieci %s - nazwa sieci: %s\n\n", DynamicFactions[i][Name], DynamicFactions[i][mCompanyName]);
							format(string, sizeof(string), "%sFirma oferuje $%d za podpisanie umowy na okres %d dni.\n", 
								string, DynamicFactions[i][mBizJoinCash], DynamicFactions[i][mBizJoinTime]);
							format(string, sizeof(string), "%sW przypadku wczeœniejszego zerwania umowy w³aœciciel biznesu ponosi kare w wysokoœci $%d.\n",
								string, DynamicFactions[i][mBizPenaltyValue]);
							format(string, sizeof(string), "%sW³aœciciel biznesu otrzymuje %.2f%% zysku za sprzeda¿ produktów oraz %.2f%% zysku z wykonanych po³¹czeñ przez u¿ytkowników sieci.\n",
								string, DynamicFactions[i][mBizOfferIncome], DynamicFactions[i][mBizConIncome]);
							ShowPlayerDialog(playerid, DIALOG_SELECT_PHONE_COMPANY_3, DIALOG_STYLE_MSGBOX, "Oferta sieci", string, "Podpisz", "Wróc");
							return 1;
						}
					}
				}
			}
			else
				ShowShopMenu(playerid);
		}
		case DIALOG_SELECT_PHONE_COMPANY_3:
		{
			if(response)
			{
				new k = 0;
				for(new i = 0; i < sizeof(DynamicFactions); i++)
				{
					if(DynamicFactions[i][IsEnabled] && DynamicFactions[i][fType] == FACTIONT_COMPANY_PHONE)
					{
						if(k++ == gSelectedSlot[playerid])
						{
							if(DynamicFactions[i][mBizJoinCash] > DynamicFactions[i][fBank])
							{
								printf("i = %d", i);
								ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Ta firma nie posiada obecnie wystarczaj¹cych funduszy na zaakceptowanie umowy", "Ok", "");
								return 1;
							}
							Businesses[gBuyBusinessID[playerid]][Till] += DynamicFactions[i][mBizJoinCash];
							DynamicFactions[i][fBank] -= DynamicFactions[i][mBizJoinCash];
							Businesses[gBuyBusinessID[playerid]][mFactionTimeLeft] = DynamicFactions[i][mBizJoinTime];
							Businesses[gBuyBusinessID[playerid]][mFaction] = i;
							SaveBizData(gBuyBusinessID[playerid], "Faction");
							SaveBizData(gBuyBusinessID[playerid], "Till");
							SaveBizData(gBuyBusinessID[playerid], "FactionTimeLeft");
							SaveFData(i, "Bank");
							format(string, sizeof(string), "Podpisa³eœ umowe z firm¹ %s", DynamicFactions[i][Name]);
							ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", string, "Ok", "");
						}
					}
				}
			}
			else
				ShowShopMenu(playerid);
		}
		case DIALOG_SMS:
		{
			if(response)
			{
				if(listitem == 0)
				{
					B1DIALOG_SMS:
					format(string, sizeof(string), "SELECT HIGH_PRIORITY * FROM `samp_sms` WHERE `SenderNumber` = '%d' OR `ReceiverNumber` = '%d' GROUP BY `ID` LIMIT 50",
						SlotParam2(playerid, gSelectedSlot[playerid]), SlotParam2(playerid, gSelectedSlot[playerid]));
					wp_mysql_query(string, PHONE_SMS_LIST, playerid, db_con1);
				}
				else if(listitem == 1)
				{
					B2DIALOG_SMS:
					ShowPlayerDialog(playerid, DIALOG_SMS_2_SEND, DIALOG_STYLE_LIST, "Informacja", "1. WprowadŸ numer rêcznie\n2. Wybierz numer z ksi¹¿ki telefoniczne", "Wybierz", "Wróæ");
				}
			}
			else
				goto BPHONE_ITEM_1;
		}
		case DIALOG_SMS_2_VIEW:
		{
			if(response)
			{
				gSelectedNumberID[playerid] = listitem;
				B1DIALOG_SMS_2_VIEW:
				ShowPlayerDialog(playerid, DIALOG_SMS_3_VIEW, DIALOG_STYLE_LIST, "Wiadomoœæ SMS", "1. Wyœwietl wiadomoœæ\n2. Usuñ wiadomoœæ", "Wybierz", "Anuluj");
			}
			else
				goto BPHONE_ITEM_2;
		}
		case DIALOG_SMS_3_VIEW:
		{
			if(response)
			{
				if(listitem == 0)
				{
					B1DIALOG_SMS_3_VIEW:
					format(string, sizeof(string), "Od: %d\nDo: %d\n\nTreœæ:\n%s",
						gSmsList[gSelectedNumberID[playerid]][mSmsSenderNumber],
						gSmsList[gSelectedNumberID[playerid]][mSmsReceiverNumber],
						gSmsList[gSelectedNumberID[playerid]][mSmsContent]
					);
					ShowPlayerDialog(playerid, DIALOG_SMS_4_VIEW_ANSWER, DIALOG_STYLE_MSGBOX, "Wiadomoœæ SMS", string, "Odpowiedz", "Wróæ");
				}
				else if(listitem == 1)
				{
					format(string, sizeof(string), "DELETE FROM `samp_sms` WHERE `ID` = '%d'", gSmsList[gSelectedNumberID[playerid]][mSmsId]);
					wp_mysql_query(string, SAVE, playerid, db_con1);
					ShowPlayerDialog(playerid, DIALOG_SMS_5, DIALOG_STYLE_MSGBOX, "Informacja", "SMS zosta³ usuniêty", "Wróæ", "");
				}
			}
			else
				goto B1DIALOG_SMS;
		}
		case DIALOG_SMS_4_VIEW_ANSWER:
		{
			if(response)
			{
				gSelectedNumber[playerid] = gSmsList[gSelectedNumberID[playerid]][mSmsSenderNumber];
				ShowPlayerDialog(playerid, DIALOG_SMS_4_SEND_MANU, DIALOG_STYLE_INPUT, "WprowadŸ treœæ wiadomoœci", "WprowadŸ treœæ wiadomoœci, maksymalnie 128 znaków", "Wyœlij", "Wróæ");
			}
			else
				goto B1DIALOG_SMS_2_VIEW;
		}				
		case DIALOG_SMS_2_SEND:
		{
			if(response)
			{
				if(listitem == 0)
					ShowPlayerDialog(playerid, DIALOG_SMS_3_SEND_MANU, DIALOG_STYLE_INPUT, "WprowadŸ numer odbiorcy", "Wpisz tutaj numer odbiorny w formie XXXXXXXXX", "Dalej", "Wróæ");
				else
					ShowPlayerDialog(playerid, DIALOG_SMS_3_SEND_SEL, DIALOG_STYLE_LIST,  "Lista kontaktów", "Opcja nie jest jeszcze dostêpna", "Wróæ", "");
			}
			else
				goto BPHONE_ITEM_2;
		}
		case DIALOG_SMS_3_SEND_MANU:
		{
			if(response)
			{
				if(strlen(inputtext) < 9)
				{
					ShowPlayerDialog(playerid, DIALOG_SMS_3_SEND_MANU, DIALOG_STYLE_INPUT, "WprowadŸ numer odbiorcy", "Wprowadzi³eœ niepoprawny numer, spróbuj ponownie", "Dalej", "Wróæ");
				}
				gSelectedNumber[playerid] = strval(inputtext);
				ShowPlayerDialog(playerid, DIALOG_SMS_4_SEND_MANU, DIALOG_STYLE_INPUT, "WprowadŸ treœæ wiadomoœci", "WprowadŸ treœæ wiadomoœci, maksymalnie 128 znaków", "Wyœlij", "Wróæ");
			}
			else
				goto B2DIALOG_SMS;
		}
		case DIALOG_SMS_4_SEND_MANU:
		{
			if(response)
			{
				if(strlen(inputtext) > 128)
				{
					ShowPlayerDialog(playerid, DIALOG_SMS_4_SEND_MANU, DIALOG_STYLE_INPUT, "WprowadŸ treœæ wiadomoœci", "Przekroczy³eœ limit znaków.\nWprowadŸ treœæ wiadomoœci jeszcze raz", "Wyœlij", "Wróæ");
					return 1;
				}
				if(!gPlayerVars[playerid][mPhoneDataReceived])
				{
					ShowPlayerDialog(playerid, DIALOG_SMS_4_SEND_MANU, DIALOG_STYLE_MSGBOX, "Informacja", "Twoja wiadomoœæ nie mog³a zostaæ wys³ana, spróbuj ponownie", "Wyœlij", "Wróæ");
					return 1;
				}
				gPlayerVars[playerid][mPhoneDataReceived] = 0;
				gPlayerVars[playerid][mPhoneDataTimeout] = 10;
				gSmsList[0][mSmsSenderNumber] = SlotParam2(playerid, gSelectedSlot[playerid]);
				gSmsList[0][mSmsReceiverNumber] = gSelectedNumber[playerid];
				format(gSmsList[0][mSmsSenderName], MAX_PLAYER_NAME, "%s", gPlayerData[playerid][pName]);
				format(gSmsList[0][mSmsReceiverName], MAX_PLAYER_NAME, " ");
				gSmsList[0][mSmsSenderSimId] = SlotParam4(playerid, gSelectedSlot[playerid]);
				format(gSmsList[0][mSmsContent], 256, "%s", inputtext);
				format(string, sizeof(string), "SELECT HIGH_PRIORITY * FROM `samp_phones` WHERE `Nr` = '%d' AND `SimID` = '%d' ",
					SlotParam2(playerid, gSelectedSlot[playerid]), SlotParam4(playerid, gSelectedSlot[playerid]));
				wp_mysql_query(string, SEND_SMS, playerid, db_con1);
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Wysy³anie SMSa...", "Zamknij", "");
				return 1;
			}
			else
				goto B1DIALOG_SMS_3_VIEW;
		}
		case DIALOG_SMS_5:
		{
			goto B1DIALOG_SMS;
		}
		case DIALOG_NETWORK_COMP_1:
		{
			if(response)
			{
				new fID = gPlayerData[playerid][pFaction2];
				gListItem[playerid] = listitem;
				switch(listitem)
				{
					case 0: format(string, sizeof(string), "Podaj nowy koszt aktywacji - poprzednia wartoœæ: $%d", DynamicFactions[fID][mSimActivationCost]);
					case 1: format(string, sizeof(string), "Podaj koszt abonamentu dziennego- poprzednia wartoœæ: $%d", DynamicFactions[fID][mSimDailyFee]);
					case 2: format(string, sizeof(string), "Podaj iloœæ darmowych minut w abonamencie- poprzednia wartoœæ: %d", DynamicFactions[fID][mSimFreeMins]);
					case 3: format(string, sizeof(string), "Podaj iloœæ darmowych smsów w abonamencie- poprzednia wartoœæ: %d", DynamicFactions[fID][mSimFreeSms]);
					case 4: format(string, sizeof(string), "Podaj koszt jednej minuty w abonamencie - poprzednia wartoœæ: $%d", DynamicFactions[fID][mCallCostFee]);
					case 5: format(string, sizeof(string), "Podaj koszt jednego smsa w abonamencie - poprzednia wartoœæ: $%d", DynamicFactions[fID][mSmsCostFee]);
					case 6: format(string, sizeof(string), "Podaj koszt jednej minuty w ofercie na karte - poprzednia wartoœæ: $%d", DynamicFactions[fID][mCallCostCard]);
					case 7: format(string, sizeof(string), "Podaj koszt jednego smsa w ofercie na karte - poprzednia wartoœæ: $%d", DynamicFactions[fID][mSmsCostCard]);
					case 8: format(string, sizeof(string), "Podaj wa¿noœæ karty po aktywacji - poprzednia wartoœæ: %d dni", DynamicFactions[fID][mCardValidity]);
					case 9: format(string, sizeof(string), "Podaj kwote do³adowania I - poprzednia wartoœæ: $%d", DynamicFactions[fID][mCardRenewCost1]);
					case 10: format(string, sizeof(string), "Podaj czas przed³u¿enia do³adowania I - poprzednia wartoœæ: %d", DynamicFactions[fID][mCardRenewTime1]);
					case 11: format(string, sizeof(string), "Podaj kwote do³adowania II - poprzednia wartoœæ: $%d", DynamicFactions[fID][mCardRenewCost2]);
					case 12: format(string, sizeof(string), "Podaj czas przed³u¿enia do³adowania II - poprzednia wartoœæ: %d", DynamicFactions[fID][mCardRenewTime2]);
					case 13: format(string, sizeof(string), "Podaj kwote do³adowania III - poprzednia wartoœæ: $%d", DynamicFactions[fID][mCardRenewCost3]);
					case 14: format(string, sizeof(string), "Podaj czas przed³u¿enia do³adowania III - poprzednia wartoœæ: %d", DynamicFactions[fID][mCardRenewTime3]);
					case 15: format(string, sizeof(string), "Podaj kwote do³adowania IV - poprzednia wartoœæ: $%d", DynamicFactions[fID][mCardRenewCost4]);
					case 16: format(string, sizeof(string), "Podaj czas przed³u¿enia do³adowania IV - poprzednia wartoœæ: %d", DynamicFactions[fID][mCardRenewTime4]);
					case 17: format(string, sizeof(string), "Podaj procentowy zysk z po³¹czeñ - poprzednia wartoœæ: %.2f", DynamicFactions[fID][mBizConIncome]);
					case 18: format(string, sizeof(string), "Podaj procentowy zysk ze sprzeda¿y ofert - poprzednia wartoœæ: %.2f", DynamicFactions[fID][mBizOfferIncome]);
					case 19: format(string, sizeof(string), "Podaj zysk dla biznesu za podpisaniu umowy - poprzednia wartoœæ: $%d", DynamicFactions[fID][mBizJoinCash]);
					case 20: format(string, sizeof(string), "Podaj czas na jaki podpisywana bêdzie umowa - poprzednia wartoœæ: %d dni", DynamicFactions[fID][mBizJoinTime]);
					case 21: format(string, sizeof(string), "Podaj wysokoœæ kary jak¹ poniesie biznes za przedwczesne zerwanie umowy - poprzednia wartoœæ: $%d", DynamicFactions[fID][mBizPenaltyValue]);
					case 22: format(string, sizeof(string), "Podaj now¹ nazwe sieci - poprzednia wartoœæ: %s", DynamicFactions[fID][mCompanyName]);
				}
				ShowPlayerDialog(playerid, DIALOG_NETWORK_COMP_2, DIALOG_STYLE_INPUT, "WprowadŸ now¹ wartoœæ", string, "Zapisz", "Anuluj");
			}
		}
		case DIALOG_NETWORK_COMP_2:
		{
			if(response)
			{
				if(strval(inputtext) < 0)
				{
					ShowPlayerDialog(playerid, DIALOG_NETWORK_COMP_MSG, DIALOG_STYLE_MSGBOX, "Informacja", "Wartoœci nie mog¹ byæ ujemne !", "Wróæ", "Zamknij");
					return 1;
				}
				new fID = gPlayerData[playerid][pFaction2];
				switch(gListItem[playerid])
				{
					case 0:
					{
						DynamicFactions[fID][mSimActivationCost] = strval(inputtext);
						SaveFData(fID, "SimActivationCost");
					}
					case 1:
					{
						DynamicFactions[fID][mSimDailyFee] = strval(inputtext);
						SaveFData(fID, "SimDailyFee");
					}
					case 2:
					{
						DynamicFactions[fID][mSimFreeMins] = strval(inputtext);
						SaveFData(fID, "SimFreeMins");
					}
					case 3:
					{
						DynamicFactions[fID][mSimFreeSms] = strval(inputtext);
						SaveFData(fID, "SimFreeSms");
					}
					case 4:
					{
						DynamicFactions[fID][mCallCostFee] = strval(inputtext);
						SaveFData(fID, "CallCostFee");
					}
					case 5:
					{
						DynamicFactions[fID][mSmsCostFee] = strval(inputtext);
						SaveFData(fID, "SmsCostFee");
					}
					case 6:
					{
						DynamicFactions[fID][mCallCostCard] = strval(inputtext);
						SaveFData(fID, "CallCostCard");
					}
					case 7:
					{
						DynamicFactions[fID][mSmsCostCard] = strval(inputtext);
						SaveFData(fID, "SmsCostCard");
					}
					case 8: 
					{
						DynamicFactions[fID][mCardValidity] = strval(inputtext);
						SaveFData(fID, "CardValidity");
					}
					case 9:
					{
						DynamicFactions[fID][mCardRenewCost1] = strval(inputtext);
						SaveFData(fID, "CardRenewCost1");
					}
					case 10:
					{
						DynamicFactions[fID][mCardRenewTime1] = strval(inputtext);
						SaveFData(fID, "CardRenewTime1");
					}
					case 11:
					{
						DynamicFactions[fID][mCardRenewCost2] = strval(inputtext);
						SaveFData(fID, "CardRenewCost2");
					}
					case 12:
					{
						DynamicFactions[fID][mCardRenewTime2] = strval(inputtext);
						SaveFData(fID, "mCardRenewTime2");
					}
					case 13:
					{
						DynamicFactions[fID][mCardRenewCost3] = strval(inputtext);
						SaveFData(fID, "CardRenewCost3");
					}
					case 14:
					{
						DynamicFactions[fID][mCardRenewTime3] = strval(inputtext);
						SaveFData(fID, "mCardRenewTime3");
					}
					case 15:
					{
						DynamicFactions[fID][mCardRenewCost4] = strval(inputtext);
						SaveFData(fID, "CardRenewCost4");
					}
					case 16:
					{
						DynamicFactions[fID][mCardRenewTime4] = strval(inputtext);
						SaveFData(fID, "CardRenewTime4");
					}
					case 17:
					{
						DynamicFactions[fID][mBizConIncome] = floatstr(inputtext);
						SaveFData(fID, "BizConIncome");
					}
					case 18:
					{
						DynamicFactions[fID][mBizOfferIncome] = floatstr(inputtext);
						SaveFData(fID, "BizOfferIncome");
					}
					case 19:
					{
						DynamicFactions[fID][mBizJoinCash] = strval(inputtext);
						SaveFData(fID, "BizJoinCash");
					}
					case 20:
					{
						DynamicFactions[fID][mBizJoinTime] = strval(inputtext);
						SaveFData(fID, "BizJoinTime");
					}
					case 21:
					{
						DynamicFactions[fID][mBizPenaltyValue] = strval(inputtext);
						SaveFData(fID, "BizPenaltyValue");
					}
					case 22:
					{
						format(DynamicFactions[fID][mCompanyName], 64, inputtext);
						SaveFData(fID, "CompanyName");
					}
				}
				ShowPlayerDialog(playerid, DIALOG_NETWORK_COMP_MSG, DIALOG_STYLE_MSGBOX, "Informacja", "Nowa wartoœæ zosta³a przypisana", "Wróæ", "Zamknij");
			}
			else
			{
				ShowPlayerPhoneCompany(playerid);
			}
		}
		case DIALOG_NETWORK_COMP_MSG:
		{
			if(response)
			{
				ShowPlayerPhoneCompany(playerid);
			}
		}
		case DIALOG_PHONE:
		{
			if(response)
			{
				new number, t_slot[MAX_PLAYER_ITEM_SLOT], match = 0;
				if(!gCallDataReceived[playerid])
				{
					SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Sieæ jest przeci¹¿ona, odczekaj chwile i spróbuj ponownie");
					return 1;
				}
				if(Mobile[playerid] != 255)
				{
					SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Jesteœ ju¿ po³¹czony");
					return 1;
				}
				number = strval(inputtext);
				foreach(Player, i )
				{
					if(gPlayerLogged[i] && playerid != i)
					{
						PHaveItemEx(i, 3, 3, t_slot);
						for(new j = 1; j <= MAX_PLAYER_ITEM_SLOT; j++)
						{
							if(SlotParam2(i, j) == number)
							{
								if(!SlotParam1(i, j))
								{
									SendClientMessage(playerid, COLOR_ORANGE, "[OPERATOR:] Telefon tego u¿ytkownika jest wy³¹czony lub jest poza zasiegiem sieci, prosimy spróbowaæ póŸniej");
									return 1;
								}
								gSelectedNumber[playerid] = number;
								gSelectedNumberID[playerid] = i;
								if(gSendingSMS[i])
								{
									ShowPlayerDialog(playerid,DIALOG_SMS,DIALOG_STYLE_INPUT,"Treœæ SMS","Wpisz tutaj treœæ swojego SMSa","Wyœlij","Anuluj");
									return 1;
								}
								match = 1;
								break;
							}
						}
						if(!match)
						{
							PHaveItemEx(i, 3, 4, t_slot);
							for(new j = 1; j <= MAX_PLAYER_ITEM_SLOT; j++)
							{
								if(SlotParam2(i, j) == number)
								{
									if(!SlotParam1(i, j))
									{
										SendClientMessage(playerid, COLOR_ORANGE, "[OPERATOR:] Telefon tego u¿ytkownika jest wy³¹czony lub jest poza zasiegiem sieci, prosimy spróbowaæ póŸniej");
										return 1;
									}
									gSelectedSlot[playerid] = j;
									gSelectedNumber[playerid] = number;
									gSelectedNumberID[playerid] = i;
									if(gSendingSMS[i])
									{
										ShowPlayerDialog(playerid,DIALOG_SMS,DIALOG_STYLE_INPUT,"Treœæ SMS","Wpisz tutaj treœæ swojego SMSa","Wyœlij","Anuluj");
										return 1;
									}
									match = 1;
									break;
								}
							}
						}
						else
							break;
					}
				}
				if(Mobile[gSelectedNumberID[playerid]] == 255 && !IncommingCall[gSelectedNumberID[playerid]] && match)
				{
					Mobile[playerid] = gSelectedNumberID[playerid];
					IncommingCall[gSelectedNumberID[playerid]] = 1;
					
					StartedCall[playerid] = 1;
					StartedCall[gSelectedNumberID[playerid]] = 0;					
					
					gCalledCompany[playerid] = SlotParam3(playerid, gSelectedSlot[playerid]);
					
					gCallDataReceived[playerid] = 0;
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "£¹czenie...");
					format(string, sizeof(string), "SELECT HIGH_PRIORITY * FROM `samp_phones` WHERE `Nr` = '%d' AND `SimID` = '%d'",
						SlotParam2(playerid, gSelectedSlot[playerid]), SlotParam4(playerid, gSelectedSlot[playerid]));
					wp_mysql_query(string, CHECK_PHONE_TYPE_CALL, playerid, db_con3);
					
					gPlayerVars[playerid][mPhoneNr] = SlotParam2(playerid, gSelectedSlot[playerid]);

					if(!IsPlayerInAnyVehicle(playerid))
					{
						SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
						SetPlayerAttachedObject(playerid, 1, 330, 6);
					}
					return 1;
				}
				SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Linia jest zajêta");
			}
		}
		case DIALOG_PHONE2:
		{
			// NOTE: WTF is this ?
			if(response)
			{
				new number;
				switch(listitem)
				{
					case 0: { if(gPhoneBookNumber[playerid][ln1] == 0) { return 1; } else { number = gPhoneBookNumber[playerid][ln1]; } }
					case 1:	{ if(gPhoneBookNumber[playerid][ln2] == 0) { return 1; } else { number = gPhoneBookNumber[playerid][ln2]; } }
					case 2:	{ if(gPhoneBookNumber[playerid][ln3] == 0) { return 1; } else {	number = gPhoneBookNumber[playerid][ln3]; } }
					case 3:	{ if(gPhoneBookNumber[playerid][ln4] == 0) { return 1; } else { number = gPhoneBookNumber[playerid][ln4]; } }
					case 4:	{ if(gPhoneBookNumber[playerid][ln5] == 0) { return 1; } else { number = gPhoneBookNumber[playerid][ln5]; } }
					case 5:	{ if(gPhoneBookNumber[playerid][ln6] == 0) { return 1; } else { number = gPhoneBookNumber[playerid][ln6]; } }
					case 6:	{ if(gPhoneBookNumber[playerid][ln7] == 0) { return 1; } else { number = gPhoneBookNumber[playerid][ln7]; } }
					case 7:	{ if(gPhoneBookNumber[playerid][ln8] == 0) { return 1; } else { number = gPhoneBookNumber[playerid][ln8]; } }
					case 8:	{ if(gPhoneBookNumber[playerid][ln9] == 0) { return 1; } else { number = gPhoneBookNumber[playerid][ln9]; } }
					case 9:	{ if(gPhoneBookNumber[playerid][ln10] == 0) { return 1; } else { number = gPhoneBookNumber[playerid][ln10]; } }
				}
				format(string, sizeof(string), "[INFO:] Numer telefonu: %d", number);
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
		}
		case DIALOG_PHONE_BOOK:
		{
			if(response)
			{
				new giveplayerid = strval(inputtext);
				if(!IsPlayerConnected(giveplayerid) || giveplayerid == INVALID_PLAYER_ID)
				{
					SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Niew³aœciwe ID/nazwa gracza.");
					return 1;
				}
				if(!gPlayerLogged[giveplayerid])
				{
					SendClientMessage(playerid, COLOR_LIGHTGREEN, "[INFO:] Ten gracz nie jest zalogowany");
					return 1;
				}
				if(!gPlayerData[giveplayerid][pListNumber])
				{
					SendClientMessage(playerid, COLOR_RED, "[INFO:] Ta osoba zastrzeg³a swoje numery");
					return 1;
				}
				new p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25;
				gSelectedNumberID[playerid] = giveplayerid;
				if(gPlayerData[giveplayerid][pItem1type] == 3 && (gPlayerData[giveplayerid][pItem1] == 3 || gPlayerData[giveplayerid][pItem1] == 4)) { p1 = gPlayerData[giveplayerid][pItem1param2]; }
				if(gPlayerData[giveplayerid][pItem2type] == 3 && (gPlayerData[giveplayerid][pItem2] == 3 || gPlayerData[giveplayerid][pItem2] == 4)) { p2 = gPlayerData[giveplayerid][pItem2param2]; }
				if(gPlayerData[giveplayerid][pItem3type] == 3 && (gPlayerData[giveplayerid][pItem3] == 3 || gPlayerData[giveplayerid][pItem3] == 4)) { p3 = gPlayerData[giveplayerid][pItem3param2]; }
				if(gPlayerData[giveplayerid][pItem4type] == 3 && (gPlayerData[giveplayerid][pItem4] == 3 || gPlayerData[giveplayerid][pItem4] == 4)) { p4 = gPlayerData[giveplayerid][pItem4param2]; }
				if(gPlayerData[giveplayerid][pItem5type] == 3 && (gPlayerData[giveplayerid][pItem5] == 3 || gPlayerData[giveplayerid][pItem5] == 4)) { p5 = gPlayerData[giveplayerid][pItem5param2]; }
				if(PHaveExpandItem(giveplayerid) || gPlayerData[giveplayerid][pVipItem] > 0)
				{
					if(gPlayerData[giveplayerid][pItem6type] == 3 && (gPlayerData[giveplayerid][pItem6] == 3 || gPlayerData[giveplayerid][pItem6] == 4)) { p6 = gPlayerData[giveplayerid][pItem6param2]; }
					if(gPlayerData[giveplayerid][pItem7type] == 3 && (gPlayerData[giveplayerid][pItem7] == 3 || gPlayerData[giveplayerid][pItem7] == 4)) { p7 = gPlayerData[giveplayerid][pItem7param2]; }
					if(gPlayerData[giveplayerid][pItem8type] == 3 && (gPlayerData[giveplayerid][pItem8] == 3 || gPlayerData[giveplayerid][pItem8] == 4)) { p8 = gPlayerData[giveplayerid][pItem8param2]; }
					if(gPlayerData[giveplayerid][pItem9type] == 3 && (gPlayerData[giveplayerid][pItem9] == 3 || gPlayerData[giveplayerid][pItem9] == 4)) { p9 = gPlayerData[giveplayerid][pItem9param2]; }
					if(gPlayerData[giveplayerid][pItem10type] == 3 && (gPlayerData[giveplayerid][pItem10] == 3 || gPlayerData[giveplayerid][pItem10] == 4)) { p10 = gPlayerData[giveplayerid][pItem10param2]; }
					if(gPlayerData[giveplayerid][pItem11type] == 3 && (gPlayerData[giveplayerid][pItem11] == 3 || gPlayerData[giveplayerid][pItem11] == 4)) { p11 = gPlayerData[giveplayerid][pItem11param2]; }
					if(gPlayerData[giveplayerid][pItem12type] == 3 && (gPlayerData[giveplayerid][pItem12] == 3 || gPlayerData[giveplayerid][pItem12] == 4)) { p12 = gPlayerData[giveplayerid][pItem12param2]; }
					if(gPlayerData[giveplayerid][pItem13type] == 3 && (gPlayerData[giveplayerid][pItem13] == 3 || gPlayerData[giveplayerid][pItem13] == 4)) { p13 = gPlayerData[giveplayerid][pItem13param2]; }
					if(gPlayerData[giveplayerid][pItem14type] == 3 && (gPlayerData[giveplayerid][pItem14] == 3 || gPlayerData[giveplayerid][pItem14] == 4)) { p14 = gPlayerData[giveplayerid][pItem14param2]; }
					if(gPlayerData[giveplayerid][pItem15type] == 3 && (gPlayerData[giveplayerid][pItem15] == 3 || gPlayerData[giveplayerid][pItem15] == 4)) { p15 = gPlayerData[giveplayerid][pItem15param2]; }
					if(gPlayerData[giveplayerid][pVipItem] > 0)
					{
						if(gPlayerData[giveplayerid][pItem16type] == 3 && (gPlayerData[giveplayerid][pItem16] == 3 || gPlayerData[giveplayerid][pItem16] == 4)) { p16 = gPlayerData[giveplayerid][pItem16param2]; }
						if(gPlayerData[giveplayerid][pItem17type] == 3 && (gPlayerData[giveplayerid][pItem17] == 3 || gPlayerData[giveplayerid][pItem17] == 4)) { p17 = gPlayerData[giveplayerid][pItem17param2]; }
						if(gPlayerData[giveplayerid][pItem18type] == 3 && (gPlayerData[giveplayerid][pItem18] == 3 || gPlayerData[giveplayerid][pItem18] == 4)) { p18 = gPlayerData[giveplayerid][pItem18param2]; }
						if(gPlayerData[giveplayerid][pItem19type] == 3 && (gPlayerData[giveplayerid][pItem19] == 3 || gPlayerData[giveplayerid][pItem19] == 4)) { p19 = gPlayerData[giveplayerid][pItem19param2]; }
						if(gPlayerData[giveplayerid][pItem20type] == 3 && (gPlayerData[giveplayerid][pItem20] == 3 || gPlayerData[giveplayerid][pItem20] == 4)) { p20 = gPlayerData[giveplayerid][pItem20param2]; }
						if(gPlayerData[giveplayerid][pItem21type] == 3 && (gPlayerData[giveplayerid][pItem21] == 3 || gPlayerData[giveplayerid][pItem21] == 4)) { p21 = gPlayerData[giveplayerid][pItem21param2]; }
						if(gPlayerData[giveplayerid][pItem22type] == 3 && (gPlayerData[giveplayerid][pItem22] == 3 || gPlayerData[giveplayerid][pItem22] == 4)) { p22 = gPlayerData[giveplayerid][pItem22param2]; }
						if(gPlayerData[giveplayerid][pItem23type] == 3 && (gPlayerData[giveplayerid][pItem23] == 3 || gPlayerData[giveplayerid][pItem23] == 4)) { p23 = gPlayerData[giveplayerid][pItem23param2]; }
						if(gPlayerData[giveplayerid][pItem24type] == 3 && (gPlayerData[giveplayerid][pItem24] == 3 || gPlayerData[giveplayerid][pItem24] == 4)) { p24 = gPlayerData[giveplayerid][pItem24param2]; }
						if(gPlayerData[giveplayerid][pItem25type] == 3 && (gPlayerData[giveplayerid][pItem25] == 3 || gPlayerData[giveplayerid][pItem25] == 4)) { p25 = gPlayerData[giveplayerid][pItem25param2]; }
						format(string, sizeof(string), "%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d",
							p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25);
					}
					else
						format(string, sizeof(string), "%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d\n%d", p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15);
				}
				else
					format(string, sizeof(string), "%d\n%d\n%d\n%d\n%d", p1, p2, p3, p4, p5);

				ShowPlayerDialog(playerid,DIALOG_PHONE,DIALOG_STYLE_LIST,"Nr telefonów",string,"Po³¹cz","Anuluj");
				PlayerActionMessage(playerid, 15.0, "przegl¹da ksi¹¿ke telefoniczn¹");
				return 1;
			}
		}
		case DIALOG_PHONE_ALARMS:
		{
			if(response)
			{
				if(gPlayerData[playerid][pCharacterDying] > 0)
				{
					ShowPlayerDialog( playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Twoja postaæ jest nieprzytomna, nie mo¿esz u¿yæ telefonu !", "Zamknij", "" );
					return 1;
				}
				if(gPlayerData[playerid][pJailed] != 0)
				{
					SendClientMessage(playerid, COLOR_RED, "[INFO:] Twój telefon zosta³ skonfiskowany ! Odzyskasz go po wyjœciu z wiêzienia");
					return 1;
				}
				new number;
				switch(listitem)
				{
					case 0: number = 999;
					case 1: number = 997;
					case 2: number = 555;
					case 3: number = 444;
				}
				new slot[MAX_PLAYER_ITEM_SLOT];
				if(number == 444)
				{
					new anyone = 0;
					defer DisconnectPhone(playerid);
					foreach(Player, i)
					{
						if(gPlayerLogged[i])
						{
							if(gPlayerData[i][pFaction] != 255)
							{
								if(DynamicFactions[gPlayerData[i][pFaction]][fType] == 6)
									anyone = 1;
							}
						}
					}
					if(!anyone)
					{
						SendClientMessage(playerid, COLOR_ORANGE, "[TELEFON:] Witamy, centrum TAXI, w tej chwili nie ma wolnych taksówke, prosimy spróbowaæ póŸniej");
						return 1;
					}
					SendClientMessage(playerid, COLOR_GREEN, "[TELEFON:] Witamy, centrum TAXI, zg³oszenie przyjête, prosimy o cierpliwoœæ");
					new location[MAX_ZONE_NAME];
					GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
					
					format(string, sizeof(string), "[RADIO:] Osoba potrzebuje taksówki - Lokacja: %s", location);
					SendFactionTypeMessage(6, COLOR_GREEN, string);
				
					new Float:x,Float:y,Float:z;
					
					GetPlayerPos(playerid,x,y,z);
					
					PhoneAnimation(playerid);
					
					foreach(Player, i)
					{
						if(gPlayerLogged[i])
						{
							if(gPlayerData[i][pFaction] != 255)
							{
								if(DynamicFactions[gPlayerData[i][pFaction]][fType] == 6)
								{
									PHaveItemEx(i, 3, 12, slot);
									for(new j = 0; j < MAX_PLAYER_ITEM_SLOT; j++)
									{
										if(slot[j] && SlotParam1(i, j+1))
										{
											SetPlayerCheckpoint(i, x, y, z, 10.0);
											defer ClearCheckpointsForPlayer(i);
										}
									}
								}
							}
						}
					}
					return 1;
				}
				if(number == 555)
				{
					new anyone = 0;
					defer DisconnectPhone(playerid);
					
					foreach(Player, i)
					{
						if(gPlayerLogged[i])
						{
							if(gPlayerData[i][pJob] == 17)
								anyone = 1;
						}
					}
					if(!anyone)
					{
						SendClientMessage(playerid, COLOR_ORANGE, "[TELEFON:] Witamy, Warsztat Samochodowy, w tej chwili nie ma wolnych mechaników, prosimy spróbowaæ póŸniej");
						return 1;
					}
					
					SendClientMessage(playerid, COLOR_GREEN, "[TELEFON:] Witamy, Warsztat Samochodowy, zg³oszenie przyjête, prosimy o cierpliwoœæ");
					new location[MAX_ZONE_NAME];
					GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
					format(string, sizeof(string), "[RADIO:] Osoba potrzebuje pomocy mechanika - Lokacja: %s.", location);
					SendJobMessage(17, 0xFFFF00AA,string);
					new Float:x,Float:y,Float:z;
					GetPlayerPos(playerid,x,y,z);
					PhoneAnimation(playerid);
					foreach(Player, i)
					{
						if(gPlayerLogged[i])
						{
							if(gPlayerData[i][pJob] == 17)
							{
								PHaveItemEx(i, 3, 12, slot);
								for(new j = 0; j < MAX_PLAYER_ITEM_SLOT; j++)
								{
									if(slot[j] && SlotParam1(i, j+1))
									{
										if(gPlayerVars[playerid][mAtHouseID] != -1)
											SetPlayerCheckpoint(i, Houses[gPlayerVars[playerid][mAtHouseID]][EnterX], Houses[gPlayerVars[playerid][mAtHouseID]][EnterY], Houses[gPlayerVars[playerid][mAtHouseID]][EnterZ], 10.0);
										else if(gPlayerVars[playerid][mAtBuildingId] != -1)
											SetPlayerCheckpoint(i, Building[gPlayerVars[playerid][mAtBuildingId]][EnterX], Building[gPlayerVars[playerid][mAtBuildingId]][EnterY], Building[gPlayerVars[playerid][mAtBuildingId]][EnterZ], 10.0);
										else if(gPlayerVars[playerid][mAtBizID] != -1)
											SetPlayerCheckpoint(i, Businesses[gPlayerVars[playerid][mAtBizID]][EnterX], Businesses[gPlayerVars[playerid][mAtBizID]][EnterY], Businesses[gPlayerVars[playerid][mAtBizID]][EnterZ], 10.0);
										else
											SetPlayerCheckpoint(i, x, y, z,10.0);
										defer ClearCheckpointsForPlayer(i);
										break;
									}
								}
							}
						}
					}
					return 1;
				}
				else if(number == 997)
				{
					new Float:x, Float:y, Float:z, anyone = 0;
					new location[MAX_ZONE_NAME];
					GetPlayerPos(playerid, x, y, z);
					defer DisconnectPhone(playerid);
					
					foreach(Player, i)
					{
						if(!gPlayerLogged[i])
						{
							continue;
						}
						
						if(gPlayerData[i][pFaction] == 255)
						{
							continue;
						}
						
						if(DynamicFactions[gPlayerData[i][pFaction]][fType] == FACTIONT_POLICE)
						{
							anyone = 1;
						}
					}
					
					if(!anyone)
					{
						SendClientMessage(playerid, COLOR_ORANGE, "[TELEFON:] Komisariat policji, w tej chwili wszystkie jednostki s¹ zajête, prosze spróbowaæ póŸniej");
						return 1;
					}
					
					SendClientMessage(playerid, COLOR_GREEN, "[TELEFON:] Komisariat policji, zg³oszenie przyjête, prosze pozostaæ na miejscu do przybycia patrolu");
					
					GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
					
					format(string, sizeof(string), "Otrzymano nowe zg³oszenie - osoba potrzebuj¹cej pomocy przy %s", location);
					SendCBMessage(41, string);
					
					for(new i = 0; i < 11; i++)
					{
						if(DynamicFactions[i][fType] != FACTIONT_POLICE)
						{
							continue;
						}
						
						if(!DynamicFactions[i][fNotification1])
						{
							DynamicFactions[i][fNotification1] = 5;
							DynamicFactions[i][fNotification1ID] = playerid;
						}
						else if(!DynamicFactions[i][fNotification2])
						{
							DynamicFactions[i][fNotification2] = 5;
							DynamicFactions[i][fNotification2ID] = playerid;
						}
						else if(!DynamicFactions[i][fNotification3])
						{
							DynamicFactions[i][fNotification3] = 5;
							DynamicFactions[i][fNotification3ID] = playerid;
						}
						else if(!DynamicFactions[i][fNotification4])
						{
							DynamicFactions[i][fNotification4] = 5;
							DynamicFactions[i][fNotification4ID] = playerid;
						}
						else if(!DynamicFactions[i][fNotification5])
						{
							DynamicFactions[i][fNotification5] = 5;
							DynamicFactions[i][fNotification5ID] = playerid;
						}
					}
					
					foreach(Player, i)
					{
						if(!gPlayerLogged[i])
						{
							continue;
						}
						
						if(gPlayerData[i][pFaction] == 255)
						{								
							continue;
						}
						
						if(DynamicFactions[i][fType] != FACTIONT_POLICE)
						{
							continue;
						}
							
						PHaveItemEx(i, 3, 12, slot);
						for(new j = 0; j < MAX_PLAYER_ITEM_SLOT; j++)
						{
							if(slot[j] && SlotParam1(i, j+1))
							{
								if(gPlayerVars[playerid][mAtHouseID] != -1)
								{
									SetPlayerCheckpoint(i, Houses[gPlayerVars[playerid][mAtHouseID]][EnterX], Houses[gPlayerVars[playerid][mAtHouseID]][EnterY], Houses[gPlayerVars[playerid][mAtHouseID]][EnterZ], 10.0);
								}
								else if(gPlayerVars[playerid][mAtBuildingId] != -1)
								{	
									SetPlayerCheckpoint(i, Building[gPlayerVars[playerid][mAtBuildingId]][EnterX], Building[gPlayerVars[playerid][mAtBuildingId]][EnterY], Building[gPlayerVars[playerid][mAtBuildingId]][EnterZ], 10.0);
								}
								else if(gPlayerVars[playerid][mAtBizID] != -1)
								{	
									SetPlayerCheckpoint(i, Businesses[gPlayerVars[playerid][mAtBizID]][EnterX], Businesses[gPlayerVars[playerid][mAtBizID]][EnterY], Businesses[gPlayerVars[playerid][mAtBizID]][EnterZ], 10.0);
								}
								else
								{
									SetPlayerCheckpoint(i, x, y, z, 10.0);
								}
								
								defer ClearCheckpointsForPlayer(i);
								
								break;
							}
						}
					}
					
					return 1;
				}
				else if(number == 999)
				{
					new Float:x, Float:y, Float:z, anyone = 0;
					new location[MAX_ZONE_NAME];
					defer DisconnectPhone(playerid);
					
					foreach(Player, i)
					{
						if(!gPlayerLogged[i])
						{
							continue;
						}
						
						if(gPlayerData[i][pFaction] == FACTIONID_MEDICS)
						{
							anyone = 1;
						}
					}
					
					if(!anyone)
					{
						SendClientMessage(playerid, COLOR_ORANGE, "[TELEFON:] Pogotowie ratunkowe, w tej chwili wszystkie jednostki s¹ zajête, prosze spróbowaæ póŸniej");
						return 1;
					}
					
					SendClientMessage(playerid, COLOR_GREEN, "[TELEFON:] Pogotowie ratunkowe, zg³oszenie przyjête, prosze pozostaæ na miejscu do przybycia patrolu");
					GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
					format(string, sizeof(string), "Otrzymano nowe zg³oszenie - osoba potrzebuj¹cej pomocy przy %s", location);
					SendCBMessage(42, string);
					GetPlayerPos(playerid, x, y, z);
					
					if(!DynamicFactions[FACTIONID_MEDICS][fNotification1])
					{
						DynamicFactions[FACTIONID_MEDICS][fNotification1] = 5;
						DynamicFactions[FACTIONID_MEDICS][fNotification1ID] = playerid;
					}
					else if(!DynamicFactions[FACTIONID_MEDICS][fNotification2])
					{
						DynamicFactions[FACTIONID_MEDICS][fNotification2] = 5;
						DynamicFactions[FACTIONID_MEDICS][fNotification2ID] = playerid;
					}
					else if(!DynamicFactions[FACTIONID_MEDICS][fNotification3])
					{
						DynamicFactions[FACTIONID_MEDICS][fNotification3] = 5;
						DynamicFactions[FACTIONID_MEDICS][fNotification3ID] = playerid;
					}
					else if(!DynamicFactions[FACTIONID_MEDICS][fNotification4])
					{
						DynamicFactions[FACTIONID_MEDICS][fNotification4] = 5;
						DynamicFactions[FACTIONID_MEDICS][fNotification4ID] = playerid;
					}
					else if(!DynamicFactions[FACTIONID_MEDICS][fNotification5])
					{
						DynamicFactions[FACTIONID_MEDICS][fNotification5] = 5;
						DynamicFactions[FACTIONID_MEDICS][fNotification5ID] = playerid;
					}
					
					foreach(Player, i)
					{
						if(gPlayerLogged[i])
						{
							if(gPlayerData[i][pFaction] == FACTIONID_MEDICS)
							{								
								PHaveItemEx(i, 3, 12, slot);
								for(new j = 0; j < MAX_PLAYER_ITEM_SLOT; j++)
								{
									if(slot[j] && SlotParam1(i, j+1))
									{
										if(gPlayerVars[playerid][mAtHouseID] != -1)
											SetPlayerCheckpoint(i, Houses[gPlayerVars[playerid][mAtHouseID]][EnterX], Houses[gPlayerVars[playerid][mAtHouseID]][EnterY], Houses[gPlayerVars[playerid][mAtHouseID]][EnterZ], 10.0);
										else if(gPlayerVars[playerid][mAtBuildingId] != -1)
											SetPlayerCheckpoint(i, Building[gPlayerVars[playerid][mAtBuildingId]][EnterX], Building[gPlayerVars[playerid][mAtBuildingId]][EnterY], Building[gPlayerVars[playerid][mAtBuildingId]][EnterZ], 10.0);
										else if(gPlayerVars[playerid][mAtBizID] != -1)
											SetPlayerCheckpoint(i, Businesses[gPlayerVars[playerid][mAtBizID]][EnterX], Businesses[gPlayerVars[playerid][mAtBizID]][EnterY], Businesses[gPlayerVars[playerid][mAtBizID]][EnterZ], 10.0);
										else
											SetPlayerCheckpoint(i, x, y, z, 10.0);
										defer ClearCheckpointsForPlayer(i);
										break;
									}
								}
							}
						}
					}
					return 1;
				}
			}
		}
		case DIALOG_WANTED:
		{
			if(response)
			{
				format(string, sizeof(string), "SELECT HIGH_PRIORITY * FROM `samp_wanted` WHERE `PlayerName` = '%s'", inputtext);
				wp_mysql_query(string, SHOW_WANTED_LIST, playerid, db_con2);
				SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Wyszukiwanie...");
			}
		}
		case DIALOG_LOGIN:
		{
			if(response)
			{
				if(gLoginOn)
					OnPlayerLogin(playerid, inputtext);
				else
				{
					SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Logowanie zosta³o wy³¹czone przez administratora, wróæ póŸniej !");
					return 1;
				}
			}
			else
			{
				strcat( string, "{FFFFFF}Witaj na serwerze WParty !\n\n" );
				strcat( string, "Aby siê zalogowaæ wpisz swoje has³o do postaci.\n\n\n" );
				strcat( string, "{F52222}Jeœli nie posiadasz jeszcze postaci musisz wpierw zarejestrowaæ swoje konto\nna forum WParty.eu a nastêpnie utworzyæ postaæ\npostêpuj¹æ wed³ug podanych tam wskazówek.\n\n" );
				strcat( string, "{FAEC25}Jeœli zapomnia³eœ has³a do postaci mo¿esz je zmieniæ loguj¹c siê na forum\na nastêpnie przechodz¹c do panelu zarz¹dzania postaciami.\n\n\n" );
				strcat( string, "{FFFFFF}Wpisz has³o:" );
				ShowPlayerDialog(playerid, DIALOG_LOGIN, DIALOG_STYLE_PASSWORD, ""#COLOR_TITLE"Logowanie", string, "Zaloguj", "");
			}
		}
		// Fireworks
		/*case FWCPM:
		{
			if(response == 0) return SendClientMessage(playerid, WHITE, "[NotimeBot]: You closed the Fire Work Control Panel");
			if(response == 1)
			{
				switch (listitem)
				{
					case 0: //DrawDistance
					{
						ShowPlayerDialog(playerid, FWCPDD, DIALOG_STYLE_LIST, "FireWork Control Panel > -Draw Distance Setting-", "Low\nMedium\nHigh", "Select", "Back");
						return 1;
					}
					case 1://Firecracker
					{
						ShowPlayerDialog(playerid, FWCPFC, DIALOG_STYLE_LIST, "FireWork Control Panel > -FireCracker Usable for:-", "Usable for all players\nUsable for Rcon Admins only", "Select", "Back");
						return 1;
					}
					case 2://Firerocket1
					{
						ShowPlayerDialog(playerid, FWCPFR1, DIALOG_STYLE_LIST, "FireWork Control Panel > -FireRocket1 Usable for:-", "Usable for all players\nUsable for Rcon Admins only", "Select", "Back");
						return 1;
					}
					case 3://Firerocket2
					{
						ShowPlayerDialog(playerid, FWCPFR2, DIALOG_STYLE_LIST, "FireWork Control Panel > -FireRocket2 Usable for:-", "Usable for all players\nUsable for Rcon Admins only", "Select", "Back");
						return 1;
					}
					case 4://Crackerroll
					{
						ShowPlayerDialog(playerid, FWCPCR, DIALOG_STYLE_LIST, "FireWork Control Panel > -CrackerRoll Usable for:-", "Usable for all players\nUsable for Rcon Admins only", "Select", "Back");
						return 1;
					}
					case 5://Fountain1
					{
						ShowPlayerDialog(playerid, FWCPFT1, DIALOG_STYLE_LIST, "FireWork Control Panel > -Fountain1 Usable for:-", "Usable for all players\nUsable for Rcon Admins only", "Select", "Back");
						return 1;
					}
					case 6://Fountain2
					{
						ShowPlayerDialog(playerid, FWCPFT2, DIALOG_STYLE_LIST, "FireWork Control Panel > -Fountain2 Usable for:-", "Usable for all players\nUsable for Rcon Admins only", "Select", "Back");
						return 1;
					}
					case 7://Fountain3
					{
						ShowPlayerDialog(playerid, FWCPFT3, DIALOG_STYLE_LIST, "FireWork Control Panel > -Fountain3 Usable for:-", "Usable for all players\nUsable for Rcon Admins only", "Select", "Back");
						return 1;
					}
					case 8://RocketBox
					{
						ShowPlayerDialog(playerid, FWCPRB, DIALOG_STYLE_LIST, "FireWork Control Panel > -RocketBox Usable for:-", "Usable for all players\nUsable for Rcon Admins only", "Select", "Back");
						return 1;
					}
				}
				return 1;
			}
			return 1;
		}
		case FWCPDD:
		{
			if(response == 0)
			{
				format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
				DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
				ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
				return 1;
			}
			if(response == 1)
			{
				switch (listitem)
				{
					case 0: //Low DrawDistance
					{
						SendClientMessage(playerid, WHITE, "[FWCP]: Draw distance set to low.");
						AllowedFirework[FWNDrawDistance] = 0;
						format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
						DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
						ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
						SaveFireWorkInfo();
						return 1;
					}
					case 1://Medium DrawDistance
					{
						SendClientMessage(playerid, WHITE, "[FWCP]: Draw distance set to medium.");
						AllowedFirework[FWNDrawDistance] = 1;
						format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
						DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
						ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
						SaveFireWorkInfo();
						return 1;
					}
					case 2://High DrawDistance
					{
						SendClientMessage(playerid, WHITE, "[FWCP]: Draw distance set to High.");
						AllowedFirework[FWNDrawDistance] = 2;
						format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
						DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
						ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
						SaveFireWorkInfo();
						return 1;
					}
				}
				return 1;
			}
			return 1;
		}
		case FWCPFC:
		{
			if(response == 0)
			{
				format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
				DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
				ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
				return 1;
			}
			if(response == 1)
			{
				switch (listitem)
				{
					case 0: //FireCracker usable for all
					{
						SendClientMessage(playerid, WHITE, "[FWCP]: The Firecracker is now enabled for all players.");
						AllowedFirework[FireCracker] = 0;
						format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
						DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
						ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
						SaveFireWorkInfo();
						return 1;
					}
					case 1://FireCracker usable for rcon only
					{
						SendClientMessage(playerid, WHITE, "[FWCP]: The Firecracker is now enabled for Rcon Admins only.");
						AllowedFirework[FireCracker] = 1;
						format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
						DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
						ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
						SaveFireWorkInfo();
						return 1;
					}
				}
				return 1;
			}
			return 1;
		}
		case FWCPFR1:
		{
			if(response == 0)
			{
				format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
				DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
				ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
				return 1;
			}
			if(response == 1)
			{
				switch (listitem)
				{
					case 0: //FireRocket1 usable for all
					{
						SendClientMessage(playerid, WHITE, "[FWCP]: The FireRocket 1 is now enabled for all players.");
						AllowedFirework[Firerocket1] = 0;
						format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
						DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
						ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
						SaveFireWorkInfo();
						return 1;
					}
					case 1://FireRocket1 usable for rcon only
					{
						SendClientMessage(playerid, WHITE, "[FWCP]: The FireRocket 1 is now enabled for Rcon Admins only.");
						AllowedFirework[Firerocket1] = 1;
						format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
						DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
						ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
						SaveFireWorkInfo();
						return 1;
					}
				}
				return 1;
			}
			return 1;
		}
 		case FWCPFR2:
		{
			if(response == 0)
			{
				format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
				DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
				ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
				return 1;
			}
			if(response == 1)
			{
				switch (listitem)
				{
					case 0: //FireRocket2 usable for all
					{
						SendClientMessage(playerid, WHITE, "[FWCP]: The FireRocket 2 is now enabled for all players.");
						AllowedFirework[Firerocket2] = 0;
						format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
						DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
						ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
						SaveFireWorkInfo();
						return 1;
					}
					case 1://FireRocket2 usable for rcon only
					{
						SendClientMessage(playerid, WHITE, "[FWCP]: The FireRocket 2 is now enabled for Rcon Admins only.");
						AllowedFirework[Firerocket2] = 1;
						format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
						DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
						ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
						SaveFireWorkInfo();
						return 1;
					}
				}
				return 1;
			}
			return 1;
		}
		case FWCPCR:
		{
			if(response == 0)
			{
				format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
				DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
				ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
				return 1;
			}
			if(response == 1)
			{
				switch (listitem)
				{
					case 0: //CrackerRoll usable for all
					{
						SendClientMessage(playerid, WHITE, "[FWCP]: The CrackerRoll is now enabled for all players.");
						AllowedFirework[Crackerroll] = 0;
						format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
						DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
						ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
						SaveFireWorkInfo();
						return 1;
					}
					case 1://CrackerRoll usable for rcon only
					{
						SendClientMessage(playerid, WHITE, "[FWCP]: The CrackerRoll is now enabled for Rcon Admins only.");
						AllowedFirework[Crackerroll] = 1;
						format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
						DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
						ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
						SaveFireWorkInfo();
						return 1;
					}
				}
				return 1;
			}
			return 1;
		}
		case FWCPFT1:
		{
			if(response == 0)
			{
				format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
				DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
				ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
				return 1;
			}
			if(response == 1)
			{
				switch (listitem)
				{
					case 0: //Fountain1 usable for all
					{
						SendClientMessage(playerid, WHITE, "[FWCP]: The Fountain 1 is now enabled for all players.");
						AllowedFirework[Fountain1] = 0;
						format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
						DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
						ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
						SaveFireWorkInfo();
						return 1;
					}
					case 1://Fountain1 usable for rcon only
					{
						SendClientMessage(playerid, WHITE, "[FWCP]: The Fountain 1 is now enabled for Rcon Admins only.");
						AllowedFirework[Fountain1] = 1;
						format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
						DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
						ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
						SaveFireWorkInfo();
						return 1;
					}
				}
				return 1;
			}
			return 1;
		}
		case FWCPFT2:
		{
			if(response == 0)
			{
				format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
				DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
				ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
				return 1;
			}
			if(response == 1)
			{
				switch (listitem)
				{
					case 0: //Fountain2 usable for all
					{
						SendClientMessage(playerid, WHITE, "[FWCP]: The Fountain 2 is now enabled for all players.");
						AllowedFirework[Fountain2] = 0;
						format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
						DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
						ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
						SaveFireWorkInfo();
						return 1;
					}
					case 1://Fountain2 usable for rcon only
					{
						SendClientMessage(playerid, WHITE, "[FWCP]: The Fountain 2 is now enabled for Rcon Admins only.");
						AllowedFirework[Fountain2] = 1;
						format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
						DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
						ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
						SaveFireWorkInfo();
						return 1;
					}
				}
				return 1;
			}
			return 1;
		}
		case FWCPFT3:
		{
			if(response == 0)
			{
				format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
				DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
				ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
				return 1;
			}
			if(response == 1)
			{
				switch (listitem)
				{
					case 0: //Fountain3 usable for all
					{
						SendClientMessage(playerid, WHITE, "[FWCP]: The Fountain 3 is now enabled for all players.");
						AllowedFirework[Fountain3] = 0;
						format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
						DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
						ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
						SaveFireWorkInfo();
						return 1;
					}
					case 1://Fountain3 usable for rcon only
					{
						SendClientMessage(playerid, WHITE, "[FWCP]: The Fountain 3 is now enabled for Rcon Admins only.");
						AllowedFirework[Fountain3] = 1;
						format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
						DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
						ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
						SaveFireWorkInfo();
						return 1;
					}
				}
				return 1;
			}
			return 1;
		}
		case FWCPRB:
		{
			if(response == 0)
			{
				format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
				DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
				ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
				return 1;
			}
			if(response == 1)
			{
				switch (listitem)
				{
					case 0: //RocketBox usable for all
					{
						SendClientMessage(playerid, WHITE, "[FWCP]: The RocketBox is now enabled for all players.");
						AllowedFirework[RocketB] = 0;
						format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
						DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
						ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
						SaveFireWorkInfo();
						return 1;
					}
					case 1://RocketBox usable for rcon only
					{
						SendClientMessage(playerid, WHITE, "[FWCP]: The RocketBox is now enabled for Rcon Admins only.");
						AllowedFirework[RocketB] = 1;
						format(string2, sizeof(string2), "DrawDistance: %s\nFire Cracker: %s\nFirerocket1: %s\nFirerocket2: %s\nCrackerRoll: %s\nFountain1: %s\nFountain2: %s\nFountain3: %s\nRocketBox: %s",
						DrawDistanceWord[AllowedFirework[FWNDrawDistance]], UsageFW[AllowedFirework[FireCracker]], UsageFW[AllowedFirework[Firerocket1]], UsageFW[AllowedFirework[Firerocket2]], UsageFW[AllowedFirework[Crackerroll]], UsageFW[AllowedFirework[Fountain1]], UsageFW[AllowedFirework[Fountain2]], UsageFW[AllowedFirework[Fountain3]], UsageFW[AllowedFirework[RocketB]]);
						ShowPlayerDialog(playerid, FWCPM,2,"FireWork Control Panel", string2,"Select", "Close");
						SaveFireWorkInfo();
						return 1;
					}
				}
				return 1;
			}
			return 1;
		}*/
		case DIALOG_HELP:
		{
			if(response)
			{
				switch(listitem)
				{
					// Regulamin
					case 0:
					{
						ShowPlayerDialog(playerid, DIALOG_HELP_3, DIALOG_STYLE_LIST, "WParty - regulamin", "1. Gra\n2. Frakcje\n3. Szpital\n4. Policja\n5. Cywile\n6. Gangi\n7. Mafie i szajki\n8. Urzêdnicy\n9. Kodeks drogowy\n10. Mandaty", "Wybierz", "Zamknij");
						return 1;
					}
					// Jak zacz¹æ
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOG_HELP_4, DIALOG_STYLE_LIST, #COLOR_TITLE"Pomoc - Jak zacz¹æ",
							"Podstawowe itemy\nUrz¹d Miasta - dokumenty, pierwsza praca\nPrawo jazdy\nPierwszy samochód\nWykszta³cenie\nFrakcja/Firma/Biznes\nKomendy", 
							"Wybierz", "Wróæ");
					}
					// FAQ
					case 2:
					{
                        strcat( string, "Czêste zadawane pytania.\n\n" );
                        strcat( string, "Nie widzê ikonek na mapce. Co zrobiæ ?\n" );
                        strcat( string, "Kup mapê oraz GPS. Pamiêtaj o w³¹czeniu GPS'u\n\n" );
                        strcat( string, "Gdzie jest bank?.\n" );
                        strcat( string, "Bank jest oznaczony zielonym dolarem na radarze. \n\n" );
                        strcat( string, "Gdzie kupiê telefon?.\n" );	
                        strcat( string, "Telefon kupisz w sklepie ogólnym, który oznaczony jest czerwonym znakiem S na mapce.\n\n" );
                        strcat( string, "Kiedy mogê odebraæ wyp³atê/zasi³ek?\n" );
                        strcat( string, "Wyp³ata automatycznie wp³ywa na Twoje konto oko³o 6-7 nad ranem czasu rzeczywistego, pod warunkiem ¿e przegra³eœ jedn¹ godzinê dziennie w frakcji/firmie .\n\n" );
                        strcat( string, "Gdzie mogê kupiæ/wypo¿yczyæ auto/motor? \n" );
                        strcat( string, "Pojazdy mo¿esz kupowaæ w salonie samochodowym, jest on zaznaczony bia³¹ liter¹ S na mapce.\n Cennik pojazdów znajdziesz pod komend¹: /samochody1-12.\n\n" );
                        strcat( string, "Jak zmieniæ skin?\n" );
                        strcat( string, "Wygl¹d naszej postaci mo¿emy zmieniæ w ciucholandzie.\nWszystkie takie sklepy s¹ oznaczone 'bluzk¹' na radarze.\n\n" );
                        strcat( string, "Jak i gdzie wyrobiæ prawo jazdy?\n" );
                        strcat( string, "Prawo jazdy mo¿esz wyrobiæ w Urzêdzie Miasta, które jest oznaczone ¿ó³tym kó³kiem na mapce.\nDo pozytywnego zdania prawa jazdy trzeba zdaæ test teoretyczny i praktyczny w Oœrodku Szkolenia Kierowców.\nWiêcej informacji znajdziesz w dziale /pomoc > WORD lub na forum: www.wparty.eu\n\n" );
                        strcat( string, "Gdzie znajdê jak¹œ pracê dorywcz¹?\n" );
                        strcat( string, "Wszystkie legalne prace s¹ dostêpne w Urzêdzie Miasta, pozosta³e s¹ obok miejsca pracy albo lokalizacjê ich znaj¹ tylko przestêpcy \n\n" );
                        strcat( string, "Jak zatrudniæ siê w frakcji/biznesie?\n" );
                        strcat( string, "Aby znaleŸæ pracê w frakcji, najpierw polecam zapoznaæ siê z wymogami rekrutacji danej frakcji/biznesu.\nKa¿da frakcja/biznes tworzy odpowiednie tematy, w których s¹ informacje potrzebne do zdobycia pracy.\nAdres forum: www.wparty.eu\n\n" );
                        strcat( string, "Mam 'BW', co robiæ?\n" );
                        strcat( string, "Musisz czekaæ na pomoc - je¿eli siê jej doczekasz Twoja pamiêæ zostaje zachowana.\nW przypadku up³yniêcia czasu, bez uzyskania pomocy zapominamy o tym kto nas pobi³ i budzimy siê.\n\n" );
                        strcat( string, "Krêci' mi siê w g³owie, co zrobiæ?\n" );
                        strcat( string, "Musisz udaæ siê do szpitala na konsultacje z lekarzem.\nJest on oznaczony czerwonym krzy¿em na mapce.\n\n" );
                        ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Czêste zadawane pytania", string, "Wróæ", "");
					}
					// Licencje
					case 3:
					{
						strcat( string, "Dostêpne licencje:\n\n" );
						strcat( string, "PRAWO JAZDY\nWymagane jest do ró¿ne rodzaju pojazdów oraz jest podzielone na 3 kategorie (A, B, C+E).\n" );
						strcat( string, "Aby zdaæ na prawo jazdy trzeba przejœæ trzy etapowy proces - teoria, plac oraz jazdê po mieœcie.\n\n" );
						strcat( string, "LICENCJA NA £ODZIE\nUmo¿liwia sterowanie ³odziami. Wymagane jest zaliczenie egzaminu polegaj¹cego na przep³yniêciu wyznaczonego odcinka.\n\n" );
						strcat( string, "LICENCJA PILOTA SAMLOTU\nUmo¿liwia legalne korzystanie z samolotów. Tylko zakup.\n\n" );
						strcat( string, "LICENCJA PILOTA ŒMIG£OWCA\nUmo¿liwia legalne korzystanie z helikopterów. Tylko zakup.\n\n" );
						strcat( string, "LICENCJA NA BROÑ\nUmo¿liwia legalne posiadanie broni palnej. Tylko zakup.\n" );
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Licencje", string, "Wróæ", "" );
					}
					// Animacje
					case 4:
					{
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Animacje", "Animacje znajdziesz pod komend¹ /animacje(2)", "Wróæ", "" );
					}
					// Pojazdy
					case 5:
					{
						strcat( string, "Pojazdy.\n\n" );
						strcat( string, "Istnieje mo¿liwoœæ kupienia pojazdu nowego, u¿ywanego lub wypo¿yczyæ pojazd.\n\n" );
						strcat( string, "POJAZDY NOWE\nZostaj¹ importowane przez w³aœcicieli salonów samochodowych.\n" );
						strcat( string, "którzy ustawiaj¹ niezbedne parametry w pojeŸdzie.\n" );
						strcat( string, "Kupuj¹c pojazd z salonu mamy pewnoœæ ¿e nie posiada on ¿adnych wad fabrycznych.\n\n" );
						strcat( string, "POJAZDY U¯YWANE\nWystawiane s¹ na sprzeda¿ w ró¿nej konfiguracji i o ró¿nych przebiegach przez swoich w³aœcicieli" );
						strcat( string, "Taki pojazd mo¿e wygl¹daæ dobrze ale mo¿e posiadaæ ukryte wady\n\n" );
						strcat( string, "Wypo¿yczenie pojazdów\n Wystarczy znajleœæ pojazd z napisem \"Ten pojazd jest na wynajem\"\n" );
						strcat( string, "Wpisaæ komendê /wynajmnijpojazd i mo¿esz siê cieszyæ pojazdem.\n" );
						strcat( string, "Wynajêty samochód nale¿y zwróciæ pod salon samochodowy z którego pochodzi.\n\n" );
						strcat( string, "LICENCJE\nAby legalnie prowadziæ samochód lub motor wymagane jest PRAWO JAZDY.\nW przypadku samolotów czy te¿ helikopterów jest to licencja pilota.\n\n" );
						strcat( string, "KOMENDY\n/komendypojazdow\n\n" );
						strcat( string, "Aby zamkn¹æ pojazd skorzystaj z kluczyka - przejdŸ do /mi, nastêpnie wybierz kluczyk o odpowiednio przypisanej rejestracji a nastêpnie wybierz \"u¿yj\"." );
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Pojazd", string, "Wróæ", "");
					}
					// Prace
					case 6:
					{
						strcat(string, "Do wyboru jest wiele ró¿nego typu prac, jednak¿e niektóre maj¹ pewne wymagania na które napotkasz próbuj¹c podj¹æ siê danej pracy.\n\n");
						strcat(string, "Pierwsz¹ prace naj³atwiej dostaæ w Urzêdzie Miasta który jest oznaczony ¿ó³t¹ kropk¹ na Twoje mapie.\n");
						strcat(string, "Aby zatrudniæ siê nale¿y wpisaæ /wezprace\n\n" );
						strcat(string, "Aby dowiedzieæ siê wiêcej o danej pracy po jej wyborze nale¿y wpisaæ komendê /komendypracy\n");
						strcat(string, "Aby zrezygnowaæ z pracy nale¿y tak¿e udaæ siê do Urzêdu Miasta.");
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Praca", string, "Wróæ", "");
					}
					// Paski zdrowia - opis
					case 7:
					{
						strcat( string, "W œwiece WParty istnieje 9 stanów postaci :\n" );
						strcat( string, " - energia - ¿ó³ty pasek, najwa¿niejszy pasek zaraz po ¿yciu Twojego bohatera, odpowiada samopoczucie Twojego bohatera, nigdy nie miej go PUSTEGO, \n spowoduje to spadanie Twoich punktów zdrowia. Zregenerowaæ mo¿esz go poprzez zjedzenie np kebaba z frytkami.\n \n" );
						strcat( string, " - g³ód - czerwony pasek, wskazuje jak bardzo jest g³odny Twój bohater, g³odny bohater spala wiêcej energii, szybciej siê odwadnia. Uzupe³nia siê go poprzez spo¿ywanie posi³ków \n \n" );
						strcat( string, " - pragnienie - niebieski pasek, wskazuje jak bardzo Twojemu bohaterowi chce siê piæ, bardzo spragniony bohater wiêcej spala energii, szybciej robi siê g³odny, \n Uzupe³nia siê go poprzez picie wody lub napoi\n \n" );
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Paski zdrowia - opis", string, "Wróæ", "");
					}
					// Paski zdrowia - FAQ
					case 8:
					{
						strcat( string, " Jak utrzymaæ optymalny poziom zdrowia Twojego bohatera \n \n" );
						strcat( string, " - nie jed¿ ci¹gle tego samego kilka razy pod rz¹d, jed¿ pierwsze danie (kurczak), przek¹skê(czekoladê, surówkê) oraz wypij wodê/sok \n \n " );
						strcat( string, " - utrzymuj kontakt z lekarzem, w razie k³opotów pomo¿e w wyborze leku odpowiedniego dla Twojego bohatera\n \n" );
						strcat( string, " - pamiêtaj o jedzeniu warzyw i owoców, one utrzymaj¹ odpowiedni poziom witamin w organizmie\n \n" );
						strcat( string, " - energia (¿ó³ty pasek) regeneruje siê równie¿ w domu \n \n " );
						strcat( string, " - na Wparty Wikipedia zn¹jduj¹ siê tabele przedstawiaj¹ca dok³adnie co który produkt czego daje, dziêki temu zoptymalizujesz swoj¹ dietê \n \n " ); 
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Paski zdrowia - FAQ", string, "Wróæ", "");
					}
					// Czaty
					case 9:
					{
						strcat( string, "Dostêpne czaty w grze:\n\n" );
						strcat( string, "OOC - czat globalny - /o\n" );
						strcat( string, "LOOC - czat lokalny - /b\n" );
						strcat( string, "POOC - czat prywatny (PW) - /pw\n" );
						strcat( string, "W wypadku chatu globalnego OOC dostêpne s¹ 4 kana³y gdzie mo¿na rozmawiaæ z innymi osobami - /kanalooc" );
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Czaty", string, "Wróæ", "");// TODO: To ktoœ musi skoñczyæ.
					}
					// Ikony na mapie
					case 10: 
					{
						strcat(string, "Na WParty spotkasz wiele ró¿norodnych ikonek na mapie. O to ich objaœnienia : \n");
						strcat(string, "- ¿ó³te kó³eczko - urz¹d, taxi\n");
						strcat(string, "- broñ - sklep z broni¹ lub fabryka broni\n");
						strcat(string, "- krzy¿yk czerwony - szpital, przychodnia\n");
						strcat(string, "- spychacz - MZGK\n");
						strcat(string, "- hamburger, napój, g³owa kurczaka, widelce itd. - restauracje, bary\n");
						strcat(string, "- ciê¿arówka - hurtownia\n");
						strcat(string, "- znak $ - banki\n");
						strcat(string, "- puchar - ewenty lub wyœcigi\n");
						strcat(string, "- bia³a litera S - San News\n");
						strcat(string, "- domek - osiedle, dom, motel\n");
						strcat(string, "- klucz czerwony - warsztat samochodowy\n");
						strcat(string, "- kogut policyjny - policja\n");
						strcat(string, "- czerwone S - sklepy 24/7, og³oszeniowe, CPN'y, komórkowe\n");
						strcat(string, "- niebieski wóz - WORD, salon samochodowy\n");						
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Ikony na mapie", string, "Wróæ", "");
					}
					// Problemy/bugi
					case 11:
					{
						strcat(string, "Jeœli napotka³eœ na powa¿ny problem zg³oœ go administratorowi na s³u¿bie, jeœli go nie ma, \n zostaw wiadomoœæ przez cmd /zglosproblem lub napisz na forum w odpowiednim dziale. \n\n Pamiêtaj Czekaj na swoj¹ kolej !!! \n \n \n");
						strcat(string, "W sprawie bugów nalegamy zostawiaæ wiadomoœci poprzez cmd /zglosproblem lub zrobienie tematu na forum w odpowiednim dziale. \n Spamowanie do adminów na czacie tylko denerwuje administracje oraz robi straszny noobowski spam.");
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Problemy, bugi", string, "Wróæ", "");
					}
					// Narkotyki
					case 12:
					{
						strcat(string, "Narkotyki na WParty dziel¹ siê na 3 rodzaje : \n");
						strcat(string, "- joint zwiêkszaj¹cy hp\n");
						strcat(string, "- joint zwiêkszaj¹cy odpornoœæ na ból \n");
						strcat(string, "- joint zmniejsza odczucie g³odu \n \n");
						strcat(string, "Zdobycie narkotyku jest bardzo proste, wystarczy znaleŸæ dzik¹ rosn¹ca roœlinkê gdzieœ poœrodku lasu, zerwaæ roœlinkê. \n Otrzymasz wtedy liœæ narkotyku oraz nasionko (oczywiœcie jest szansa na otrzymanie nasionka). \n Nasionko zasadziæ w dogodnym miejscu, liœæ zwin¹æ i zapaliæ jointa. \n \n");
						strcat(string, "Trzymanie przy sobie narkotyków jest zabroniona. Funkcjonariusze Prawa zabior¹ narkotyki, pacjenta wsadz¹ do wiêzienia oraz dadz¹ mandat. Proszê siê pilnowaæ !!!");
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Narkotyki", string, "Wróæ", "");
					}
					// Hurtownie
					case 13:
					{
						strcat(string, "Hurtownie odgrywaj¹ bardzo wa¿na role w œwiecie WParty. \n");
						strcat(string, "Hurtownie sa budynkami w których spo³eczeñstwo WParty zaopatruje siê w przedmioty codziennego u¿ytku. \n");
						strcat(string, "Hurtownie znajdziesz za pomoc¹ gps - znaczek ciê¿arówki, s¹ one w BB, LV, oraz niedaleko LS \n");
						strcat(string, "W ka¿dej hurtowni jest po kilka cheakpointów w których s¹ przedmioty do kupienia. \n");
						strcat(string, "Ka¿da hurtownia posiada inne ceny, towary, czasy odnowienia itd. Warto sprawdzaæ czy nie ma promocji w danym dniu na jakiœ przedmiot. \n \n");
						strcat(string, "Aby kupiæ przedmiot nale¿y wzi¹æ pracê sprzedawcy, kupiæ sobie jak najwiêkszy samochód (ka¿dy samochód ma okreœlona iloœæ slotów itemów) , pojechaæ do cp hurtowni i kupiæ przedmiot. \n \n");
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Hurtownie", string, "Wróæ", "");
					}
					// Wyœcigi
					case 14:
					{
						strcat(string, "Po ca³ym œwiecie WParty rozrzucone s¹ wyœcigi uliczne. Oznaczone s¹ one pickup'ami w kszta³cie nitra. \n");
						strcat(string, "System wyœcigów jest bardzo prosty, wchodzisz w pickup wyœcigu, wpisujesz /menuwyœcigu, dalej zgodnie z instrukcjami pokazanymi na ekranie. \n");
						strcat(string, "Najwiêcej wyœcigów jest w MG, BB, PC, DM. W pozosta³ych miastach ciê¿ej jest znaleŸæ samemu.\n");
						strcat(string, "Zaproœ jak najwiêcej kolegów, œcigaj siê za pieni¹dze , poprawiaj czasy, BADZ NAJLEPSZY !!! \n\n");
						strcat(string, "Pamiêtaj o policji, nie daj siê z³apaæ !!! \n");
						strcat(string, "PS : Wyœcigów z dnia na dzieñ przybywa !!!");
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Wyœcigi", string, "Wróæ", "");
					}
					// Prawko
					case 15:
					{
						strcat(string, "Wiejskie/Wojewódzkie oœrodki ruchu drogowego rozlokowane s¹ w najwiêkszych wsiach/miastach \n");
						strcat(string, "Oœrodki znajdziesz za pomoc¹ GPS, ikonka na mapie samochód niebieski. \n \n");
						strcat(string, "Aby zdaæ prawo jazdy nale¿y : \n \n");
						strcat(string, "- posiadaæ dowód osobisty \n");
						strcat(string, "- zdaæ egzamin teoretyczny : baza pytañ 45, test 5 pytañ po 3 odpowiedzi, 1 prawid³owa, 1 b³¹d maks. \n");
						strcat(string, "- zdaæ egzamin praktyczny : plac, jazda po mieœcie.\n \n \n");
						strcat(string, "Baza pytañ \n \n");
						strcat(string, "Pytania s¹ bardzo proste, wiêkszoœci wystarczy czytaæ uwa¿nie oraz w ostatecznoœci poczytaæ ksi¹¿kê do nauki zasad ruchu drogowego, s¹ tam wszystkie pytania oraz odpowiedzi.\n");
						strcat(string, "Pytania s¹ wziête z prawdziwego testu na prawo jazdy tylko odpowiedzi negatywne zosta³y zmienione na bardziej prostsze.\n \n \n");
						strcat(string, "Cena za egzamin : \n \n");
						strcat(string, "Pierwsze podejœcie \n");
						format(string, sizeof(string), "%s- A cena \n", string, gDrivingTestPosition[mPriceA]);
						format(string, sizeof(string), "%s- B cena \n", string, gDrivingTestPosition[mPriceB]);
						format(string, sizeof(string), "%s- C+E cena \n", string, gDrivingTestPosition[mPriceLowCE]);
						strcat(string, "Ka¿de kolejne : \n");
						format(string, sizeof(string), "%s- A cena \n", string, gDrivingTestPosition[mPriceLowA]);
						format(string, sizeof(string), "%s- B cena \n", string, gDrivingTestPosition[mPriceLowB]);
						format(string, sizeof(string), "%s- C+E cena \n", string, gDrivingTestPosition[mPriceLowCE]);
						strcat(string, "Wskazówki : \n \n");
						strcat(string, "Przed egzaminem poæwicz plac, nie za³ój kilku z³ na naukê, nawet komuœ zap³aæ aby poduczy³ pokaza³. Egzaminatorzy rzadko kiedy maj¹ czas na naukê.\n");
						strcat(string, "Pod uczy siê pytañ, zaoszczêdzisz pieniêdzy, czasu i nerwów.\n");
						strcat(string, "Pamiêtaj o podstawowych zasadach RP podczas egzaminu.\n");
						strcat(string, "Oraz ostatnia wskazówka PAMIETAJ TO JEST EGZAMIN TU SIE WYMAGA !!! przygotuj sie sumiennie, egzaminatorzy czekaj¹ tylko aby Ciê OBLAÆ !!! \n \n");
						strcat(string, "Wiêcej informacji na forum WParty. \n \n");
						strcat(string, "Wszelkie problemy oraz bugi prosimy pisaæ na forum lub /zglosproblem");
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "WORD", string, "Wróæ", "");
					}
					// Domy
					case 16:
					{
						strcat(string, "W WParty rozró¿niamy 4 rodzaje domów : \n");
						strcat(string, "- domy z meblami\n");
						strcat(string, "- domy puste\n");
						strcat(string, "- domy do wynajêcia\n");
						strcat(string, "- dom mobilny (kamper)\n");
						strcat(string, "Wolne domy znajdziesz za pomoc¹ pickup'a : zielonego domku. Do wynajêcia : ¿ó³ty domek z opisem \"do wynajêcia\". \n");
						strcat(string, "Dom umeblowany a pusty rozró¿nisz po opisie domu.\n");
						strcat(string, "Cena domów jest bardzo ró¿norodna, zale¿y ona od wielkoœci mieszkania, wyposarzenia, umiejscowienia.\n");
						strcat(string, "W ka¿dym domu mo¿na przechowywaæ 5 przedmiotów, 100k pieniêdzy.\n");
						strcat(string, "Kiedy jesteœ w domu, Twoja energia wzrasta. Pamiêtaj o tym !!!\n");
						strcat(string, "Do domu mo¿esz zamontowaæ nowy zamek, alarm, postawiæ radio i wiele innych rzeczy.\n");
						strcat(string, "Komendy domu : \n");
						strcat(string, "/wejdz - /wyjdz - /kupdom - /sprzedajdom - /zmienczynsz - /czynsz  - /otworzdom - /wyplaczdomu - /wplacdodomu\n");
						strcat(string, "/wynajmijdom - /zrezygnujzwynajmu - /zamknijdom - /mojeitemywdomu - /wezitemzdomu\n");
						strcat(string, "/wlozitemdodomu - /radiod - /radiodv - /radiodoff - /radiozabierz - /ktowynajmuje\n");
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Domy", string, "Wróæ", "");
					}
					// Biznesy
					case 17:
					{						
						strcat(string, "W WParty znajdziesz biznesy : \n \n");
						strcat(string, "- 24/7 - do 10 slotów, przeró¿nych przedmiotów \n");
						strcat(string, "- bary - do 10 slotów, g³ównie alkohole \n");
						strcat(string, "- studia reklamowe - rozsy³anie wiadomoœci, kupowanie ikonek na mapie do innych biznesów \n");
						strcat(string, "- salony samochodowe \n");
						strcat(string, "- CPN'y \n");
						strcat(string, "- sieæ komórkowa \n");
						strcat(string, "- ciucholand \n");
						strcat(string, "- sklep z broni¹ \n  \n");
						strcat(string, "Ka¿dy biznes ro¿ni s¹ wnêtrzem oraz mo¿liwoœciami. \n");
						strcat(string, "Biznesy znaleŸæ mo¿esz dziêki GPS'u, po niebieskich ikonkach(nie kupione), po opisach ikonki \"i\". \n");
						strcat(string, "Cena biznesu zale¿y od miejscowoœci, ulicy, rodzaju, iloœci ju¿ postawionych takich samych biznesów. \n  \n");
						strcat(string, "Zarz¹dzanie biznesem :  \n \n");
						strcat(string, "Wiêkszoœæ biznesów posiada sloty tzw. miejsca na Twoje produkty. \n");
						strcat(string, "Produkty kupisz od sprzedawców lub bezpoœrednio z hurtowni. \n");
						strcat(string, "Produkty ustawiasz za pomoc¹ prostego menu GUI, gdzie po kolei wszystko ³adnie pokazuje. \n");
						strcat(string, "Pamiêtaj przy ustawianiu cen aby ich za bardzo nie za wy¿yæ, Panowie z Urzêdu Miasta/Gminy mog¹ zamkn¹æ interes !!! \n");
						strcat(string, "Pamiêtaj te¿ ¿eby daæ zarobiæ sprzedawcy, inaczej nie bêdzie chcia³ zaopatrywaæ w produkty Twojego biznesu !!!");
						strcat(string, "Komendy biznesu : \n");
						strcat(string, "/kupbiznes - /sprzedajbiznes - /statystykibiznesu - /infobiznesu - /wejsciowka - /nazwabiznesu - /otworzbiznes - /zamknijbiznes\n");
						strcat(string, "/wplacdobiznesu - /wyplaczbiznesu - /radiob - /radiobv - /radioboff - /radiozabierz\n");
						strcat(string, "/salon - /stacjapaliw\n");
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Biznesy", string, "Wróæ", "");
					}
				}
			}
			return 1;
		}
		case DIALOG_HELP_2:
		{
			ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Pomoc", DIALOG_HELP_MAIN_TXT, "Akceptuj", "Wstecz");
			return 1;
		}
		// Regulamin
		case DIALOG_HELP_3:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						strcat(string, "1. Rozpoczynaj¹c rozgrywkê na serwerze akceptujesz jego regulamin oraz zobowi¹zujesz siê go przestrzegaæ. \nNieznajomoœæ regulaminu b¹dŸ któregoœ z jego punktów nie zwalania z jego przestrzegania, owym czyn nie bêdzie usprawiedliwiony. \n");
						strcat(string, "2. Na serwerze obowi¹zuje rozgrywka zgodnie z zasadami Role-Play. Ich nieznajomoœæ nie zwalnia z przestrzegania. \nW przypadku braku znajomoœci podstaw gry, nale¿y zwróciæ siê do poradników lub któregoœ z doœwiadczonych graczy.\n");
						strcat(string, "3. Nie wolno reklamowaæ serwera na innych forach ³ami¹c ich zasady (np. Nie wolno spamowaæ reklam¹ na innym serwerze). \n");
						strcat(string, "4. Kategorycznie zakazane jest u¿ywanie z wszelkich programów trzecich wspomagaj¹cych grê lub przeszkadzaj¹cych grê innych graczy. \nKar¹ jest permanentna banicja bez mo¿liwoœci apelacji.\n");
						strcat(string, "5. Zakazane jest korzystanie z jakichkolwiek b³êdów gry dla w³asnej korzyœci. Kar¹ jest reset konta/ ban.\n");
						strcat(string, "6. Na serwerze porz¹dku pilnuj¹ administratorzy i moderatorzy. \nStaraj¹ siê pomagaæ, tak wiêc natarczywe kierowanie siê do nich bêdzie ukarane.\n");
						strcat(string, "7. Zakazuje siê ¿ebractwa (za wyj¹tkiem tak odgrywanej postaci) i feed'owania innych graczy (dawanie wiêkszych kwot nowym graczom, \nni¿sze ceny produktów/ samochodów).\n");
						strcat(string, "8. Oszukiwanie administratora i moderatora jest zabronione.\n");
						strcat(string, "9. Natarczywe kierowanie siê do administracji z proœb¹ o podniesie rangi konta na supportera lub admina jest zabronione. \nKara: wykluczenie z u¿ytkowników serwera.\n");
						strcat(string, "10. Administracja nie bierze odpowiedzialnoœci za stan konta gracza ani treœci w nim zawarte.\n");
						strcat(string, "11. Wszelkie zmiany, b³êdy s¹ zg³aszane na forum lub za pomoc¹ cmd /zglosproblem\n");
						strcat(string, "12. Wszelkie raporty powinny byæ jak najdok³adniejsze. Treœci niezrozumia³e, b¹dŸ spam skoñczy siê kar¹.\n");
						strcat(string, "13. Jeœli podejrzewasz ¿e ktoœ móg³ w³amaæ siê na Twoje konto prosimy o natychmiastowe zg³oszenie siê do administracji wraz z dowodami potwierdzaj¹cymi podejrzenia.\n");
						strcat(string, "14. Konta WParty VIP nie s¹ zwolnione z ¿adnego punktu w regulaminie. \nDostaj¹c bana trac¹ postaæ ic, nie ma mo¿liwoœci oddania VIP itema, neonów itd.\n");
						strcat(string, "15. Obelgi OOC, oszustwa w stronê innych graczy bêd¹ koñczyæ siê banem.\n");
						strcat(string, "16. Zmuszanie innych osób do odgrywania jakiejkolwiek akcji jest zabronione. (PG)\n");
						strcat(string, "17. Ci¹g³e, lub d³ugie bieganie (truchtanie równie¿) bez istniej¹cego powodu, w celu szybszego dotarcia do celu (co In Character by³oby nie mo¿liwe) jest zabronione.\n");
						strcat(string, "18. Zabijanie, bicie bez powodu jest zabronione. Dotyczy to innych graczy jak i przedmiotów nieo¿ywionych (np. bicie s³upa) \n");
						strcat(string, "19. Podszywanie siê pod administracjê jest zakazane.\n");
						strcat(string, "20. BW mo¿e byæ uniewa¿nione przez administratorów w przypadku gdy akcja poprzedzaj¹ca fakt uzyskania BW zosta³a rozegrana w sposób non-rp b¹dŸ \nBW zosta³o uzyskane w wyniku bug'a. Jakiekolwiek inne BW musi byæ odgrywane.\n");
						strcat(string, "21. Wydarzenia drogowe - wypadki, potr¹cenia i tak dalej musz¹ zostaæ odegrane w nale¿yty sposób, nic nie ma na to wp³ywu (czyt. lagi).\n");
						strcat(string, "22. /opis s³u¿y do opisywania wygl¹du, stanu lub opisu danej postaci lub jej bliskiego otoczenia. Wszelkie wulgaryzmy lub odniesienia OOC s¹ zakazane.\n");
						strcat(string, "23. Postaæ nie mo¿e byæ nijaka, to oznacza, ¿e jeœli raz wybra³a organizacje przestêpcze to jest kreowana w ich kierunku. Wszelkie \"skakanie\" po frakcjach koñczy siê banem postaci.\n");
						strcat(string, "24. Zmienianie podstawowych cech postaci (kolor skóry, narodowoœæ) jest zakazana.\n");
						strcat(string, "25. Wszelkie \"odwalanie\" „trolololowanie” zostanie ukarane.\n");
						strcat(string, "26. Kategorycznie zakazane jest przelewanie miêdzy postaciami jednego konta swojego maj¹tku.\n");
						strcat(string, "27. Zakazane jest oddawanie postaci.\n");
						strcat(string, "28. Zak³adaj¹c postaæ, pamiêtaj aby mia³a nick Role-Play np. Patryk Wiœniewski. \nNie mog¹ one mieæ równie¿ powi¹zañ z osobami z prawdziwego œwiata, gier. (Nie mo¿na siê nazwaæ Barrack Orama, czy Luke Skyfalker) \n");
						strcat(string, "29. Kategorycznie zakazane jest topienie lub niszczenie pojazdów graczy bez bardzo silnego powodu RP.\n");
						strcat(string, "30. Wymuszone uœmiercenie postaci (FCK) bez ¿adnego powodu nie mo¿e zostaæ wykonane (Wyj¹tkiem jest wynikaj¹ca z tego akcja RP)\n");
						strcat(string, "31. Zakazane jest wyjmowanie broni ze \"scrolla\" bez uprzedniej akcji RP.\n");
						strcat(string, "32. Nie bêd¹c pewien czy nale¿y zrobiæ akcjê RP najlepiej j¹ wykonaæ dok³adnie i rozbudowanie. Pomaga to poprawiæ je i podnosi szacunek innych graczy.\n");
						strcat(string, "33. Nim cokolwiek zrobisz, zastanów siê czy zrobi³byœ to w rzeczywistoœci.\n");
						strcat(string, "34. Do³¹czaj¹c do Projektu Organizacji Przestêpczej, a póŸniej do Organizacji Przestêpczej w pe³ni zgadzasz siê na CK.\n");
						strcat(string, "35. Pierwotna nazwa organizacji przestêpczej (i kolor w przypadku gangów) nie mo¿e zostaæ zmieniony.\n");
						ShowPlayerDialog(playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Regulamin - gra", string, "Wróæ", "");
						return 1;
					}
					case 1:
					{
						strcat(string, "1. Nale¿y dbaæ o pojazdy frakcyjne.\n");
						strcat(string, "2. Postacie bêd¹ce w s³u¿bach porz¹dkowych s¹ upowa¿nione do wykorzystywania powergamingu, aczkolwiek nie nadu¿ywaj¹c go.\n");
						strcat(string, "3. Wszelk¹ odpowiedzialnoœæ za zniszczenia pojazdów odpowiada osoba kieruj¹ca, wyj¹tkiem jest wydarzenie drogowe lub strzelanina.\n");
						strcat(string, "4. Wszelkie aplikacje na nowy rodzaj frakcji/ organizacji ma byæ z³o¿ony na forum. org. przestepcze w Organizacje Przestêpcze -> Aplikacje a inne organizacje w Organizacje Prywatne -> Aplikacje\n");
						strcat(string, "5. Lider frakcji ma obowi¹zek wystawienia listy pracowników w swoim dziale. Odpowiada on równie¿ za zaopatrzenie frakcji i za pracowników!\n");
						strcat(string, "6. Lider frakcji sta³ych (S³u¿by pogotowia, porz¹dkowe, Urz¹d, Rafineria) przed odejœciem ma za zadanie przekazanie lidera innej osobie. \n");
						strcat(string, "7. Pojazdy u¿ytku publicznego (autobusy, kombajny) wykorzystywane do innych celów ni¿ zarabianie pieniêdzy jest zakazane \n(Nie wolno u¿ywaæ ich jako prywatnego transportu).\n");
						strcat(string, "8. Korzystanie z pojazdów frakcyjnych w celach prywatnych jest zakazane.\n");
						strcat(string, "9. Ka¿dy lider ma mo¿liwoœæ modyfikacji regulaminu (O ile wystêpuje dla danej frakcji i nie mo¿e byæ on niezgodny z podstawowym) \nlub obowi¹zek stworzenia w³asnego nie ³ami¹cego podstawowych zasad.\n");
						strcat(string, "10. Liderom frakcji nie posiadaj¹cych broni (Rafineria, Szpital, Taxi, Urz¹d) kategorycznie zakazuje siê ich zamawiania. \n");
						strcat(string, "11. Nie wolno wprowadzaæ ¿adnych modyfikacji do pojazdów frakcyjnych.\n");
						strcat(string, "12. Lider rekrutuje cz³onków do frakcji wed³ug w³asnych kryteriów.\n");
						ShowPlayerDialog(playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Regulamin - frakcje", string, "Wróæ", "");
						return 1;
					}
					case 2:
					{
						strcat(string, "1. Lekarze niezale¿nie od sytuacji prywatnej (IC) s¹ dostêpni na s³u¿bie i w razie wezwania pomocy maj¹ obowi¹zek stawiæ siê na nie, \nwyj¹tkiem jest sytuacja nie pozwalaj¹ca na dzia³anie (porwanie, BW, napad)\n");
						strcat(string, "2. Ka¿de dzia³anie musi byæ poprzedzone akcj¹ RP (w³asn¹, rozwiniêt¹).\n");
						strcat(string, "3. Reanimacja jest za darmo, jednak inne us³ugi ju¿ nie. Osoba p³aci za to zgodnie z cennikiem wyznaczonym przez Ordynatora szpitala. \n");
						strcat(string, "4. Lekarze maj¹ obowi¹zek wspó³pracowaæ z innymi s³u¿bami.\n");
						strcat(string, "5. Lekarze maj¹ obowi¹zek zg³aszaæ siê na ka¿de wezwanie.\n");
						strcat(string, "6. Szpital jako frakcja ma obowi¹zek przestrzegaæ regulaminu frakcji !!!\n");
						ShowPlayerDialog(playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Regulamin - szpital", string, "Wróæ", "");
						return 1;
					}
					case 3:
					{
						strcat(string, "1. Funkcjonariuszom nie wolno sprintowaæ, maj¹c na sobie kamizelkê kuloodporn¹.\n");
						strcat(string, "2. Wszelkie pojazdy specjalne wykorzystywane przez policje nie mog¹ byæ u¿ywane bez zezwolenia odpowiedniej osoby.\n");
						strcat(string, "3. Funkcjonariusze maj¹ prawo korzystaæ z PG, jednak nie mog¹ tego nadu¿ywaæ. \nMaj¹ prawo Ciê wyrzuciæ z pojazdu na Enter, jeœli wczeœniej zrobili akcjê RP\n");
						strcat(string, "4. Wszelki DM ze strony Policji jest kategorycznie zabroniony.\n");
						strcat(string, "5. Funkcjonariusz nie ma prawa zachowywaæ siê nie kulturalnie wobec innych osób (wyj¹tek- jeœli jest sprowokowana).\n");
						strcat(string, "6. Ka¿dy funkcjonariusz musi znaæ kodeks prawny i karny oraz posiadaæ dowód osobisty, licencjê na broñ i prawo jazdy.\n");
						strcat(string, "7. Po s³u¿bie funkcjonariusz ma karygodny zakaz korzystania z broni s³u¿bowej.\n");
						strcat(string, "8. Funkcjonariusz ma za zadanie przyjechaæ na zg³oszenie jakiekolwiek by nie by³o.\n");
						strcat(string, "9. Mandaty oraz kary pozbawienia wolnoœci s¹ opisane w kodeksie drogowym i karnym.\n");
						strcat(string, "10. Funkcjonariusz posiadaj¹cy inn¹ broñ ni¿ wyznaczon¹ podczas s³u¿by, ma prawo byæ zaskar¿onym przez cywila.\n");
						ShowPlayerDialog(playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Regulamin - policja", string, "Wróæ", "");
						return 1;
					}
					case 4:
					{
						strcat(string, "1. Absolutny zakaz organizowania akcji IC typu gwa³t na graczach p³ci piêknej, jeœli te nie wyra¿¹ na to wyraŸniej zgody.\n");
						strcat(string, "2. O d³ugoœci pobytu gracza w szpitalu decyduje lekarz przeprowadzaj¹cy dan¹ akcjê. \nW wypadku kiedy gracz opuœci przedwczeœnie placówkê, mo¿e zostaæ wy³¹czony z rozgrywki na czas okreœlony przez medyka.\n");
						strcat(string, "3. Cywile nie mog¹ dokonywaæ takich aktów jak napady, porwania czy morderstwa. Dozwolone s¹ wszelkie bójki, \nbijatyki, aczkolwiek nie 'ustawiane'. Bycie mieszkañcem organizacji przestêpczej nie upowa¿nia do w/w aktów.\n");
						strcat(string, "4. Drive By mo¿e wykonywaæ tylko organizacja przestêpcza, która ma do tego odpowiednie powody, ponadto broni u¿yæ mog¹ tylko pasa¿erowie pojazdów, \na DB robione przez cywilów s¹ zakazane, oraz srogo karane. \n");
						strcat(string, "5. Cywil mo¿e posiadaæ narkotyki oraz owe rozprowadzaæ, aczkolwiek jedynie w wypadku, \nkiedy robi to w pe³ni Role Play. Wszelkie 'pseudo' dealowanie bêdzie karane.\n");
						strcat(string, "6. Organizacje przestêpcze mog¹ posiadaæ wszelkie bronie, które zdobêd¹ w wyniku akcji In Character.\nHandel broniami oraz narkotykami dozwolony jest przez cz³onków organizacji, zakazany jest handel broni¹ przez mieszkañców organizacji przestêpczych.\n");
						strcat(string, "7. Ka¿dy gracz po s³u¿bie jest cywilem. (Nie dotyczy organizacji przestêpczych i lekarzy)\n");
						ShowPlayerDialog(playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Regulamin - cywile", string, "Wróæ", "");
						return 1;
					}
					case 5:
					{
						strcat(string, "1. Gangi mog¹ przeprowadzaæ Gang Bangi w dowolnej formie (Rush, ustawka), aczkolwiek w iloœci jednego na dwa dni.\n");
						strcat(string, "Stawiamy na kreatywnoœæ liderów frakcji. Organizacja zaatakowana mo¿e odpowiedzieæ tym samym w owym dniu na atakuj¹cych tylko i wy³¹cznie w wypadku,\ngdy w swojej ekipie maj¹ osoby, które nie bra³y udzia³u w akcie - s¹ na si³ach. \nNiedozwolone tak zwane dobijanie cz³onków (FCK) podczas tego typu akcji. \nNale¿y pamiêtaæ, i¿ akcja ma byæ w miarê szybka, bez zbêdnego ganiania za wrogimi osobami\n");
						strcat(string, "2. Gang mo¿e nadaæ CK cz³onkowi wrogiej organizacji, je¿eli ten wkroczy³ w pojedynkê próbuj¹c ich w jakiœ sposób prowokowaæ i tym podobne. \nW innych wypadkach dozwolona jest kradzie¿ wszelkich przedmiotów oraz pojazdu, jeœli takowym przyjecha³\n");
						strcat(string, "3. Gang mo¿e nadaæ CK cywilowi lub policjantowi tylko je¿eli maj¹ bardzo silny powód IC. Akcja musi byæ udokumentowana SS'ami.\n");
						strcat(string, "4. Ka¿dy cz³onek gangu ma obowi¹zek odegrania ran dopiero po akcjach!\n");
						strcat(string, "5. Gangi mog¹ miêdzy sob¹ zawieraæ sojusze, handlowaæ - na zasadzie zawieszenia broni\n");
						strcat(string, "6. Zakazane jest zawieranie sojuszy z mafiami lub szajkami, natomiast dozwolony jest handel z owym na ró¿nych zasadach. \nWszelkie wspólne akcje na wrog¹ grupê s¹ niedozwolone\n");
						strcat(string, "7. Gangi maj¹ prawo ³¹czyæ siê w wiêksze grupy w celu tymczasowej pomocy (np. przeciwko Policji) \n");
						strcat(string, "8. Gangi odpowiadaj¹ za w³asne Housing Project'y, jednak nie za ich graczy (nie dotyczy Outsider'ów).\n");
						strcat(string, "9. Podczas akcji na inny gang (Rush, GangBang) zakazane s¹ kradzie¿e przez gang atakuj¹cy na nieprzytomnych cz³onkach gangu broni¹cego siê.\n");
						strcat(string, "10. Na rdzennym terenie gangu ka¿dy inny gang nie powinien zachowywaæ siê swobodnie. IC znajduj¹ siê tam gangsterzy danego gangu, \nmimo ¿e jest ich ma³o/ nie ma ich obecnie na serwerze. Zakazywane s¹ tak¿e d³u¿sze akcje tam.\n");
						strcat(string, "11. Gangbangi w dowolnej formie jeœli nie s¹ ustawione, musz¹ byæ szybkie i nie trwaæ wiêcej ni¿ kilka minut. \n");
						strcat(string, "12. Ka¿dy gang zobowi¹zany jest do ogrywania setu, a nie ca³ego gangu. \n");
						strcat(string, "13. Zabijanie cywilów bez wyraŸnego powodu bêdzie karane usuniêciem gangu.\n");
						strcat(string, "14. Napadów mo¿na dokonywaæ tylko i wy³¹cznie na w³asnych terenach i w miejscach, w których nie ma kamer.\n");
						strcat(string, "15. Gangi rekrutuj¹ w sposób stworzenia Housing Project'u, w którym to gracze ucz¹ siê gry w danym gangu i powoli siê wcielaj¹ do hierarchii.\n");
						strcat(string, "16. Gang ma mo¿liwoœæ stworzenia rangi \"Outsider\" (Wannabe), który mo¿e uczestniczyæ w ustawkach i rushach (Wszystkim, co nie dotyczy broni palnej).\n");
						strcat(string, "17. W gangu mo¿e znajdowaæ siê 5 (+obecna liczba gangów) osób, 3 (+obecna liczba gangów) Wannabe/ Outsider'ów i nieograniczona liczba mieszkañców.\n");
						strcat(string, "18. Gangi maj¹ prawo strzelaæ broni¹ z okien (tylko pasa¿erowie) w celu zniszczenia pojazdu innego gangu. Zakazane jest zabijanie i korzystanie z Desert Eagle'a.\n");
						strcat(string, "19. Gangi s¹ rekrutowane poprzez wczeœniejszy Projekt IC lub Aplikacjê\n");
						strcat(string, "20. Starcia o terytorium s¹ wczeœniej uzgadniane miêdzy liderami i obaj liderzy musz¹ siê stawiæ na miejsce.\n");
						strcat(string, "21. Nowo powsta³e gangi objête s¹ piêcio-dniow¹ protekcj¹ (nie mog¹ atakowaæ innych gangów oraz nie mog¹ byæ atakowane)\n");
						strcat(string, "22. Strzelaniny miêdzy Org. Przestêpczymi trwaj¹ do tzw. BW (podczas otwartej strzelaniny miêdzy organizacjami nie bêdzie karane tzw. terminatorstwo, \no ile zostan¹ zachowane zasady RP- Chowanie siê za obiektami itd.)\n");
						strcat(string, "23. Zakazane jest tzw. Ciche zabijanie przy u¿yciu no¿a podczas walk typu Brawl lub Ustawki.\n");
						strcat(string, "24. Zakazuje siê biegania i strzelania z broni typu Uzi, 9mm, Tec9, mo¿na z nich strzelaæ tylko i wy³¹cznie z miejsca lub z przytrzymaniem klawisza ALT (chodzenie). \n");
						strcat(string, "25. Ciê¿kie i drogie bronie typu M4, AK47, Country Rifle, Snajperka s¹ dozwolone tylko na specjalne i wczeœniej ustalane akcje.\n");
						strcat(string, "26. Podczas walki (ustawionej lub spontanicznej) Gang broni¹cy musi u¿ywaæ tego samego rodzaju broni, co gang atakuj¹cy (bia³a lub palna).\n");
						ShowPlayerDialog(playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Regulamin - gangi", string, "Wróæ", "");
						return 1;
					}
					case 6:
					{
						strcat(string, "1. Nale¿y pamiêtaæ, ¿e bêd¹c w mafii jesteœmy zale¿ni od lidera organizacji. To on decyduje w wiêkszej mierze o naszych poczynaniach, czy te¿ losach.\nOczywiœcie poza przyjêciem kogoœ w swoje szeregi, ma te¿ prawo usuniêcia owego bez wiêkszego t³umaczenia. Wchodz¹c do organizacji jesteœmy w pe³ni œwiadomi ewentualnego CK.\n");
						strcat(string, "2. Mafie maj¹ prawo posiadania szajki przestêpczej lub projektu IC pod sob¹ z wspólnymi korzyœciami (np. handlowanie narkotykami)\n");
						strcat(string, "3. Mafie i Szajki posiadaj¹ mo¿liwoœæ porwania osoby postronnej, w celach maj¹tkowych tylko w przypadku, gdy porwanie by³ ówczeœnie zaplanowane.\n");
						strcat(string, "4. Jeœli na serwerze s¹ dwie mafie to maj¹ prawo walki miêdzy sob¹ (Mafie maj¹ w³asne tereny)\n");
						strcat(string, "5. Mafie maj¹ takie same uprawnienia i zakazy jak gangi.\n");
						strcat(string, "6. Szajki przestêpcze maj¹ zakaz posiadania broni ciê¿kich (Snajperek, AK, M4 i Country rifle.)\n");
						strcat(string, "7. Szajki przestêpcze maj¹ zakaz posiadania w³asnych terenów oraz walki o nich (Gangi nie mog¹ wyganiaæ szajek i vice versa)\n");
						strcat(string, "8. Szajki przestêpcze typu motocykliœci maj¹ prawo do palenia budynków za zleceniem, b¹dŸ jako zemstê (musi to wyjaœniaæ powód IC)\n");
						strcat(string, "9. Zakazuje siê staræ miêdzy ró¿nymi typami org. przestêpczych (Mafia nie mo¿e zaatakowaæ gangu, ani szajki i na odwrót), \njednak wyj¹tkowe sytuacje s¹ dozwolone (uzgodnione z adminem).\n");
						strcat(string, "10. Mafie maj¹ ca³kowite prawo do pobierania haraczy z lokali znajduj¹cych siê na ustalonych terytoriach. \nW przypadku odmowy uiszczenia op³aty, organizacje te maj¹ prawo do zastraszania, demolowania lokalu b¹dŸ te¿ ca³kowitego jego zniszczenia.\n");
						strcat(string, "11. Szajki typu Œciganci zamiast FCK maj¹ mo¿liwoœæ FCJ (Zabrania wozu; tylko wobec swoich ludzi). FCK jest dozwolone tylko w wyj¹tkowych sytuacjach.\n");
						strcat(string, "12. Kilka tych samych organizacji przestêpczych nie mo¿e pobieraæ nale¿noœci od tej samej dzia³alnoœci. \nWymagane jest, aby w prywatnym dziale zosta³a umieszczona lista z biznesami od których pobierane s¹ dane op³aty.\n");
						ShowPlayerDialog(playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Regulamin - mafie i szajki", string, "Wróæ", "");
						return 1;
					}
					case 7:
					{
						strcat(string, "1. Wykorzystuje Swoj¹ \"moc\" jedynie w dobrych celach.\n");
						strcat(string, "2. Wydawanie odpowiedniej iloœci pozwoleñ na dzieñ - 7.\n");
						strcat(string, "3. Sprawdzanie stanu biznesów oraz domów kupionych.\n");
						strcat(string, "4. Sprawdzanie cen przedmiotów, paliwa itd. w biznesach.\n");
						strcat(string, "5. Dbanie o biznesy urzêdowe - sprawdzanie czy s¹ produkty, zmiana ich, ustawianie sprawiedliwych cen skupu (skup mo¿e byæ +-20 max od ceny w fabryce !!!).\n");
						strcat(string, "6. Wszelkie lenistwo ze strony Urzêdników bêdzie karane .\n");
						ShowPlayerDialog(playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Regulamin - urzêdnicy", string, "Wróæ", "");
						return 1;
					}
					case 8:
					{
						strcat(string, "1. Stosowanie sie polskiego prawa o ruchu drogowym z wyj¹tkami podanymi poni¿ej.\n");
						strcat(string, "2. Prêdkoœæ w terenie zabudowanym 60 km/h, poza zabudowanym 100 k/h, autostrady oraz drogi ekspresowe 140 km/h\n");
						ShowPlayerDialog(playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Regulamin - kodeks drogowy", string, "Wróæ", "");
						return 1;
					}
					case 9:
					{
						strcat(string, "Mandaty : \n");
						strcat(string, "Talifikator zale¿ny jest aktualnego Szefa Policji, który wzraz z urzêdem ustawia wartoœci mandatów.\n");
						ShowPlayerDialog(playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Regulamin - mandaty", string, "Wróæ", "");
						return 1;
					}
					case 10:
					{
						strcat( string, "Podstawowe itemy.\n\n" );
						strcat( string, "Wszystkie podstawe itemy kupisz w Market LS.\n" );
						strcat( string, "Do Market LS dojechaæ mo¿esz taxi, autobusem lub na w³asn¹ rêkê.\n" );
						strcat( string, "Lokalizcje znajdziesz poprzez /mi > item mapa > lokalizacje.\n" );
						strcat( string, "Plecak, zwiêksza iloœæ slotów w ekwipunku - sklep ogólny.\n" );
						strcat( string, "GPS, pokazuje lokalizacje biznesów na mapie, posiada wbudowane podstawowe lokalizacje - sklep ogólny.\n" );
						strcat( string, "Karta SIM - Salon sieci komórkowej.\n" );
						strcat( string, "Komórka - sklep ogólny\n" );
						
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Podstawowe itemy", string, "Wróæ", "");
					}
					case 11:
					{
						strcat( string, "Urz¹d Miasta - Dokumenty, pierwsza praca.\n\n" );
						strcat( string, "W urzêdzie wyrobisz wszystkie niezbêdne dokumenty od dowodu osobistego po ubezpieczenie.\n" );
						strcat( string, "Urz¹d Miasta znajdziesz poprzez /mi > item mapa > lokalizacje.\n" );
						strcat( string, "Do urzêdu mo¿esz udaæ siê: taksówk¹, autobusem, lub wypo¿yczonym samochodem\n" );
						strcat( string, "Bêd¹c w urzedzie nie zapomnij sprawdziæ dostêpnych prac.\n" );
						strcat( string, "Na pocz¹tek polecamy pracê \"sweepera\", wymaga tylko dowodu osobistego.\n" );
						strcat( string, "Miejsca w których znajduj¹ sie sweepery znajdziesz przez mapê > lokalizacje > MZGK.\n" );					
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Urz¹d Miasta - Dokumenty, pierwsza praca", string, "Wróæ", "");
					}
					case 12:
					{
						strcat( string, "Prawo Jazdy.\n\n" );
						strcat( string, "Lokalizacjê WORD znajdziesz poprzez /mi > item mapa > lokalizacje > WORD.\n" );
						strcat( string, "Do WORD mo¿esz udaæ siê: taksówk¹, autobusem, lub wypo¿yczonym samochodem\n" );
						strcat( string, "Wszelkie informacje jak zdobyæ prawko znajdziesz pod komend¹ /pomoc > Prawo Jazdy.\n" );	
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Prawo Jazdy", string, "Wróæ", "");
					}
					case 13:
					{
						strcat( string, "Pierwszy samochód.\n\n" );
						strcat( string, "Aby zdobyæ pierwszy samochud udaj siê do salonu samochodowego.\n" );
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Prawo Jazdy", string, "Wróæ", "");
					}
					case 14:
					{
						strcat( string, "Wykszta³cenie.\n\n" );
						strcat( string, "Wykszta³cenie potrzebne jest do podjêcia bardziej zaawansowancych prac w Wparty.\n" );
						strcat( string, "Dla przyk³adu: mechanik wymaga licencjatu z nauk technicznych, prawnik licencjatu z nauhk matematycznych i prawniczy. \n" );
						strcat( string, "Punkty wykszta³cenie s¹ doœæ tanie, ale mo¿na naraz kupiæ tylko 20 punktów wykszta³cenia.\n" );	
						strcat( string, "Czyli uzyskanie szko³y œredniej zajmnie Ci 4 dni. \n" );
						strcat( string, "Punkty wyszkszta³cenia znajdziesz poprzez /mi > mapa > lokalizacje > Biblioteka. \n" );
						strcat( string, "Do Biblioteki mo¿esz udaæ siê: taksówk¹, autobusem, lub wypo¿yczonym samochodem\n" );
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Wykszta³cenie", string, "Wróæ", "");
					}
					case 15:
					{
						strcat( string, "Frakcja/Firma/Biznes.\n\n" );
                        strcat( string, "Od Ciebie nale¿y ostatni krok, czy wybierzesz wpierw dostanie siê do obecnej frakcji.\n" );
                        strcat( string, "czy mo¿e za³o¿ysz w³asn¹ firmê albo kupisz biznes. \n" );
                        strcat( string, "Oczywiœcie, ¿e mo¿esz z czasem posiadaæ wszystkie rzeczy, nie ma problemu.\n" );	
                        strcat( string, "Do frakcji dostaniesz siê poprzez aplikacjê na forum www.wparty.eu. \n" );
                        strcat( string, "W³asn¹ frakcjê równie¿ mo¿esz stworzyæ- trzeba wpierw spe³niæ kilka wymagañ opisanych na forum \n" );
                        strcat( string, "Firmê za³o¿yæ mo¿esz poprzez komendê /utworzfrakcje > wybieraj¹c odpowiedni dla Ciebie wybór firmy\n" );
                        strcat( string, "Biznes, kupiæ mo¿esz poprzez dogadanie siê z urzêdnikiem miasta, który pokieruje Ciê dalej \n" );
                        ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Frakcja/Firma/Biznes", string, "Wróæ", "");
					}
					case 16:
					{
						strcat( string, "Komendy\n\n" );
						strcat( string, "wyswietlisz gui od /komendy\n" );
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Komendy", string, "Wróæ", "");
					}
				}
			}
		}
		case DIALOG_HELP_4:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						strcat( string, "Podstawowe itemy.\n\n" );
						strcat( string, "Wszystkie podstawe itemy kupisz w Market LS.\n" );
						strcat( string, "Do Market LS dojechaæ mo¿esz taxi, autobusem lub na w³asn¹ rêkê.\n" );
						strcat( string, "Lokalizcje znajdziesz poprzez /mi > item mapa > lokalizacje.\n" );
						strcat( string, "Plecak, zwiêksza iloœæ slotów w ekwipunku - sklep ogólny.\n" );
						strcat( string, "GPS, pokazuje lokalizacje biznesów na mapie, posiada wbudowane podstawowe lokalizacje - sklep ogólny.\n" );
						strcat( string, "Karta SIM - Salon sieci komórkowej.\n" );
						strcat( string, "Komórka - sklep ogólny\n" );
						
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Podstawowe itemy", string, "Wróæ", "");
					}
					case 1:
					{
						strcat( string, "Urz¹d Miasta - Dokumenty, pierwsza praca.\n\n" );
						strcat( string, "W urzêdzie wyrobisz wszystkie niezbêdne dokumenty od dowodu osobistego po ubezpieczenie.\n" );
						strcat( string, "Urz¹d Miasta znajdziesz poprzez /mi > item mapa > lokalizacje.\n" );
						strcat( string, "Do urzêdu mo¿esz udaæ siê: taksówk¹, autobusem, lub wypo¿yczonym samochodem\n" );
						strcat( string, "Bêd¹c w urzedzie nie zapomnij sprawdziæ dostêpnych prac.\n" );
						strcat( string, "Na pocz¹tek polecamy pracê \"sweepera\", wymaga tylko dowodu osobistego.\n" );
						strcat( string, "Miejsca w których znajduj¹ sie sweepery znajdziesz przez mapê > lokalizacje > MZGK.\n" );					
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Urz¹d Miasta - Dokumenty, pierwsza praca", string, "Wróæ", "");
					}
					case 2:
					{
						strcat( string, "Prawo Jazdy.\n\n" );
						strcat( string, "Lokalizacjê WORD znajdziesz poprzez /mi > item mapa > lokalizacje > WORD.\n" );
						strcat( string, "Do WORD mo¿esz udaæ siê: taksówk¹, autobusem, lub wypo¿yczonym samochodem\n" );
						strcat( string, "Wszelkie informacje jak zdobyæ prawko znajdziesz pod komend¹ /pomoc > Prawo Jazdy.\n" );	
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Prawo Jazdy", string, "Wróæ", "");
					}
					case 3:
					{
						strcat( string, "Pierwszy samochód.\n\n" );
						strcat( string, "Aby zdobyæ pierwszy samochud udaj siê do salonu samochodowego.\n" );
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Prawo Jazdy", string, "Wróæ", "");
					}
					case 4:
					{
						strcat( string, "Wykszta³cenie.\n\n" );
						strcat( string, "Wykszta³cenie potrzebne jest do podjêcia bardziej zaawansowancych prac w Wparty.\n" );
						strcat( string, "Dla przyk³adu: mechanik wymaga licencjatu z nauk technicznych, prawnik licencjatu z nauhk matematycznych i prawniczy. \n" );
						strcat( string, "Punkty wykszta³cenie s¹ doœæ tanie, ale mo¿na naraz kupiæ tylko 20 punktów wykszta³cenia.\n" );	
						strcat( string, "Czyli uzyskanie szko³y œredniej zajmnie Ci 4 dni. \n" );
						strcat( string, "Punkty wyszkszta³cenia znajdziesz poprzez /mi > mapa > lokalizacje > Biblioteka. \n" );
						strcat( string, "Do Biblioteki mo¿esz udaæ siê: taksówk¹, autobusem, lub wypo¿yczonym samochodem\n" );
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Wykszta³cenie", string, "Wróæ", "");
					}
					case 5:
					{
						strcat( string, "Frakcja/Firma/Biznes.\n\n" );
						strcat( string, "Od Ciebie nale¿y ostatni krok, czy wybierzesz wpierw dostanie siê do obecnej frakcji.\n" );
						strcat( string, "czy mo¿e za³o¿ysz w³asn¹ firmê albo kupisz biznes. \n" );
						strcat( string, "Oczywiœcie, ¿e mo¿esz z czasem posiadaæ wszystkie rzeczy, nie ma problemu.\n" );	
						strcat( string, "Do frakcji dostaniesz siê poprzez aplikacjê na forum www.wparty.eu. \n" );
						strcat( string, "Mo¿esz rownie¿ stworzyæ w³asn¹ frakcjê - trzeba wpierw spe³niæ kilka wymagañ opisanych na forum \n" );
						strcat( string, "Firme za³o¿yæ mo¿esz poprzez komendê /utworzfrakcje > wybieraj¹c odpowiedni dla Ciebie wybór firmy\n" );
						strcat( string, "Biznes, kupiæ mo¿esz poprzez dogadanie siê z urzêdnikiem miasta, który pokieruje Ciê dalej \n" );
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Wykszta³cenie", string, "Wróæ", "");
					}
					case 6:
					{
						strcat( string, "Komendy\n\n" );
						strcat( string, "Aby wyœwietliæ wszystkie komendy u¿yj /komendy\n" );
						ShowPlayerDialog( playerid, DIALOG_HELP_2, DIALOG_STYLE_MSGBOX, "Komendy", string, "Wróæ", "");
					}
				}
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_HELP, DIALOG_STYLE_LIST, "Pomoc", DIALOG_HELP_MAIN_TXT, "Wybierz", "WyjdŸ");
			}
		}
		case DIALOG_POLICE_COMPUTER_1:
		{
			if(response)
			{
				mainPoliceComputer:
				if(gListItem[playerid] == -1)
					gListItem[playerid] = listitem;
				switch(gListItem[playerid])
				{
					case 0:
					{
						ShowPlayerDialog(playerid, DIALOG_POLICE_COMPUTER_2A, DIALOG_STYLE_INPUT, "Komputer policyjny", "Podaj rejestracje pojazdu który chcesz sprawdziæ", "Dalej", "Wróæ");
						return 1;
					}
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOG_POLICE_COMPUTER_3A, DIALOG_STYLE_INPUT, "Komputer policyjny", "Podaj imie i nazwisko podejrzanego w formacie Imie_Nazwisko", "Dalej", "Wróæ");
						return 1;
					}
					case 2:
					{
						ShowPlayerDialog(playerid, DIALOG_POLICE_COMPUTER_4A, DIALOG_STYLE_INPUT, "Komputer policyjny", "Podaj id gracza na którego chcesz na³o¿yæ punkty karne", "Dalej", "Wróæ");
						return 1;
					}
					case 3:
					{
						ShowPlayerDialog(playerid, DIALOG_POLICE_COMPUTER_5A, DIALOG_STYLE_INPUT, "Komputer policyjny", "Podaj imie i nazwisko podejrzanego w formacie Imie_Nazwisko", "Dalej", "Wróæ");
						return 1;
					}
				}
			}
			return 1;
		}
		case DIALOG_POLICE_COMPUTER_2A:
		{
			if(response)
			{
				PlayerActionMessage(playerid, 15.0, "sprawdza dane w kompuetrze");
				for(new i = 0; i < sizeof(gVehData); i++)
				{
					if(gVehData[i][CarSerial] == strval(inputtext))
					{
						if(strcmp(gVehData[i][Owner], "none", true, sizeof(gVehData)) == 0)
						{
							if(gVehData[i][mVehFaction] != 255)
								format(string, sizeof(string), "Dane dla pojazdu o rejestracji: %d\n\nModel: %s\nW³aœciciel: %s", gVehData[i][CarSerial], GetVehicleName(i+1), DynamicFactions[gVehData[i][mVehFaction]][Name]);
							else
								format(string, sizeof(string), "Dane dla pojazdu o rejestracji: %d\n\nModel: %s\nW³aœcicie: brak", gVehData[i][CarSerial], GetVehicleName(i+1));
						}
						else
							format(string, sizeof(string), "Dane dla pojazdu o rejestracji: %d\n\nModel: %s\nW³aœciciel: %s", gVehData[i][CarSerial], GetVehicleName(i+1), GetRealName(gVehData[i][Owner]));
						if(gVehData[i][VConfiscated])
							strcat(string, "\nSkonfiskowany: tak");
						else
							strcat(string, "\nSkonfiskowany: nie");
						ShowPlayerDialog(playerid, DIALOG_POLICE_COMPUTER_2B, DIALOG_STYLE_MSGBOX, "Komputer policyjny", string, "Wróæ", "Zamknij");
						return 1;
					}
				}
				ShowPlayerDialog(playerid, DIALOG_POLICE_COMPUTER_2B, DIALOG_STYLE_MSGBOX, "Komputer policyjny", "Pojazd o takiej rejestracji nie jest zarejestrowany w bazie", "Wróæ", "Zamknij");
				return 1;
			}
			else
				ShowPoliceComputer(playerid);
			return 1;
		}
		case DIALOG_POLICE_COMPUTER_2B:
		{
			if(response)
				goto mainPoliceComputer;
			return 1;
		}
		case DIALOG_POLICE_COMPUTER_3A:
		{
			if(response)
			{
				format(gPlayerVars[playerid][lPoliceComputerPName], MAX_PLAYER_NAME, "%s", inputtext);
				wantedList:
				PlayerActionMessage(playerid, 15.0, "sprawdza dane w kompuetrze");
				format(string, sizeof(string), "SELECT HIGH_PRIORITY * FROM `samp_wanted` WHERE `PlayerName` = '%s' ORDER BY `ID` ASC", gPlayerVars[playerid][lPoliceComputerPName]);
				wp_mysql_query(string, SHOW_WANTED_LIST, playerid, db_con1);
				SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Wyszukiwanie...");
			}
			else
				ShowPoliceComputer(playerid);
			return 1;
		}
		case DIALOG_POLICE_COMPUTER_3B:
		{
			if(response)
			{
				gPlayerVars[playerid][lPoliceComputerPID] = listitem;
				ShowPlayerDialog(playerid, DIALOG_POLICE_COMPUTER_3C, DIALOG_STYLE_LIST, "Komputer policyjny", "Wyœwietl wpis\nUsuñ wpis", "Wybierz", "Wróæ");
				return 1;
			}
			else
				goto mainPoliceComputer;
			return 1;
		}
		case DIALOG_POLICE_COMPUTER_3C:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						format(string, sizeof(string), "SELECT HIGH_PRIORITY * FROM `samp_wanted` WHERE `PlayerName` = '%s' ORDER BY `ID` ASC",
							gPlayerVars[playerid][lPoliceComputerPName]);
						wp_mysql_query(string, SHOW_SWANTED_LIST, playerid, db_con1);
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Wyszukiwanie...");
						return 1;
					}
					case 1:
					{
						format(string, sizeof(string), "SELECT HIGH_PRIORITY * FROM `samp_wanted` WHERE `PlayerName` = '%s' ORDER BY `ID` ASC",
							gPlayerVars[playerid][lPoliceComputerPName]);
						wp_mysql_query(string, SHOW_DWANTED_LIST, playerid, db_con1);
						// ShowPlayerDialog(playerid, DIALOG_POLICE_COMPUTER_3D, DIALOG_STYLE_MSGBOX, "Komputer policyjny", "Wpis zosta³ usuniêty", "Wróæ", "Zamknij");
						SendClientMessage(playerid, COLOR_LIGHTYELLOW2, "[INFO:] Operacja w toku...");
						return 1;
					}
				}
			}
		}
		case DIALOG_POLICE_COMPUTER_3D:
		{
			if(response)
				goto wantedList;
			return 1;
		}
		case DIALOG_POLICE_COMPUTER_4A:
		{
			if(response)
			{
				PlayerActionMessage(playerid, 15.0, "sprawdza dane w kompuetrze");
				gPlayerVars[playerid][lPoliceComputerPID] = strval(inputtext);
				if(!IsPlayerConnected(gPlayerVars[playerid][lPoliceComputerPID]))
				{
					ShowPlayerDialog(playerid, DIALOG_POLICE_COMPUTER_4A, DIALOG_STYLE_INPUT, "Komputer policyjny", "Ta osoba nie jest w grze\nWprowadŸ ponownie ID osoby której chcesz nadaæ punkty karne", "Dalej", "Wróæ");
					return 1;
				}
				if(!gPlayerLogged[gPlayerVars[playerid][lPoliceComputerPID]])
				{
					ShowPlayerDialog(playerid, DIALOG_POLICE_COMPUTER_4A, DIALOG_STYLE_INPUT, "Komputer policyjny", "Ta osoba nie jest zalogowana\nWprowadŸ ponownie ID osoby której chcesz nadaæ punkty karne", "Dalej", "Wróæ");
					return 1;
				}
				ShowPlayerDialog(playerid, DIALOG_POLICE_COMPUTER_4B, DIALOG_STYLE_INPUT, "Komputer policyjny", "Podaj kategorie do której maj¹ zostaæ naliczone punkty\nWpisz cyfre 1, 2 lub 3 gdzie: 1 - kat. a, 2 - kat. b, 3 - kat. c+e", "Dalej", "Wróæ");
				return 1;
			}
			else
				ShowPoliceComputer(playerid);
			return 1;
		}
		case DIALOG_POLICE_COMPUTER_4B:
		{
			if(response)
			{
				PlayerActionMessage(playerid, 15.0, "sprawdza dane w kompuetrze");
				gPlayerVars[playerid][lPoliceComputerPCat] = strval(inputtext);
				if(gPlayerVars[playerid][lPoliceComputerPCat] <= 0 || gPlayerVars[playerid][lPoliceComputerPCat] > 3)
				{
					ShowPlayerDialog(playerid, DIALOG_POLICE_COMPUTER_4B, DIALOG_STYLE_INPUT, "Komputer policyjny", "Poda³eœ b³êdn¹ kategorie\nPodaj ponownie kategorie do której maj¹ zostaæ naliczone punkty\nWpisz cyfre 1, 2 lub 3 gdzie: 1 - kat. a, 2 - kat. b, 3 - kat. c+e", "Dalej", "Wróæ");
					return 1;
				}
				new slot[MAX_PLAYER_ITEM_SLOT], match = 0;
				PHaveItemEx(gPlayerVars[playerid][lPoliceComputerPID], 3, 6, slot);
				for(new j = 1; j <= MAX_PLAYER_ITEM_SLOT; j++)
				{
					if(gPlayerVars[playerid][lPoliceComputerPCat] == 1)
					{
						SlotParam5(gPlayerVars[playerid][lPoliceComputerPID], j);
						if(slot[j-1] && SlotParam1(gPlayerVars[playerid][lPoliceComputerPID], j) && strcmp(gDSelectedItemP5[gPlayerVars[playerid][lPoliceComputerPID]], gPlayerData[gPlayerVars[playerid][lPoliceComputerPID]][pName], false, strlen(gPlayerData[gPlayerVars[playerid][lPoliceComputerPID]][pName])) == 0)
							match = 1;
					}
					if(gPlayerVars[playerid][lPoliceComputerPCat] == 2)
					{
						SlotParam5(gPlayerVars[playerid][lPoliceComputerPID], j);
						if(slot[j-1] && SlotParam2(gPlayerVars[playerid][lPoliceComputerPID], j) && strcmp(gDSelectedItemP5[gPlayerVars[playerid][lPoliceComputerPID]], gPlayerData[gPlayerVars[playerid][lPoliceComputerPID]][pName], false, strlen(gPlayerData[gPlayerVars[playerid][lPoliceComputerPID]][pName])) == 0)
							match = 1;
					}
					if(gPlayerVars[playerid][lPoliceComputerPCat] == 3)
					{
						SlotParam5(gPlayerVars[playerid][lPoliceComputerPID], j);
						if(slot[j-1] && SlotParam3(gPlayerVars[playerid][lPoliceComputerPID], j) && strcmp(gDSelectedItemP5[gPlayerVars[playerid][lPoliceComputerPID]], gPlayerData[gPlayerVars[playerid][lPoliceComputerPID]][pName], false, strlen(gPlayerData[gPlayerVars[playerid][lPoliceComputerPID]][pName])) == 0)
							match = 1;
					}
				}
				if(match)
					ShowPlayerDialog(playerid, DIALOG_POLICE_COMPUTER_4C, DIALOG_STYLE_INPUT, "Komputer policyjny", "WprowadŸ liczbe punktów jaka ma zostaæ nadana", "Dalej", "Wróæ");
				else
					ShowPlayerDialog(playerid, DIALOG_POLICE_COMPUTER_4B, DIALOG_STYLE_INPUT, "Komputer policyjny", "Ta osoba nie posiada prawa jazdy lub nie posiada tej kategorii\nPodaj ponownie kategorie do której maj¹ zostaæ naliczone punkty\nWpisz cyfre 1, 2 lub 3 gdzie: 1 - kat. a, 2 - kat. b, 3 - kat. c+e", "Dalej", "Wróæ");
				return 1;
			}
			else
				ShowPoliceComputer(playerid);
			return 1;
		}
		case DIALOG_POLICE_COMPUTER_4C:
		{
			if(response)
			{
				new points = strval(inputtext);
				if(points <= 0 || points > 21)
				{
					ShowPlayerDialog(playerid, DIALOG_POLICE_COMPUTER_4C, DIALOG_STYLE_INPUT, "Komputer policyjny", "Poda³eœ niepoprawn¹ liczbê punktów\nWprowadŸ ponownie liczbe punktów jaka ma zostaæ nadana", "Dalej", "Wróæ");
					return 1;
				}
				if(gPlayerVars[playerid][lPoliceComputerPCat] == 1)
				{
					gPlayerData[gPlayerVars[playerid][lPoliceComputerPID]][pPenaltyPointsA] += points;
					SavePlayerData(gPlayerVars[playerid][lPoliceComputerPID], "PenaltyPointsA");
					if(gPlayerData[gPlayerVars[playerid][lPoliceComputerPID]][pPenaltyPointsA] >= MAX_PENALTY_POINTS)
						format(string, sizeof(string), "Ta osoba przekroczy³a limit punktów (%d/%d) ! Prawo jazdy musi zostaæ skonfiskowane\n\nAby skonfiskowaæ prawo jazdy wpisz /skonfiskuj prawko", gPlayerData[gPlayerVars[playerid][lPoliceComputerPID]][pPenaltyPointsA], MAX_PENALTY_POINTS);
					else
						format(string, sizeof(string), "Nadano punkty karne");
				}
				else if(gPlayerVars[playerid][lPoliceComputerPCat] == 2)
				{
					gPlayerData[gPlayerVars[playerid][lPoliceComputerPID]][pPenaltyPointsB] += points;
					SavePlayerData(gPlayerVars[playerid][lPoliceComputerPID], "PenaltyPointsB");
					if(gPlayerData[gPlayerVars[playerid][lPoliceComputerPID]][pPenaltyPointsB] >= MAX_PENALTY_POINTS)
						format(string, sizeof(string), "Ta osoba przekroczy³a limit punktów (%d/%d) ! Prawo jazdy musi zostaæ skonfiskowane\n\nAby skonfiskowaæ prawo jazdy wpisz /skonfiskuj prawko", gPlayerData[gPlayerVars[playerid][lPoliceComputerPID]][pPenaltyPointsB], MAX_PENALTY_POINTS);
					else
						format(string, sizeof(string), "Nadano punkty karne");
				}
				else if(gPlayerVars[playerid][lPoliceComputerPCat] == 3)
				{
					gPlayerData[gPlayerVars[playerid][lPoliceComputerPID]][pPenaltyPointsCE] += points;
					SavePlayerData(gPlayerVars[playerid][lPoliceComputerPID], "PenaltyPointsCE");
					if(gPlayerData[gPlayerVars[playerid][lPoliceComputerPID]][pPenaltyPointsCE] >= MAX_PENALTY_POINTS)
						format(string, sizeof(string), "Ta osoba przekroczy³a limit punktów (%d/%d) ! Prawo jazdy musi zostaæ skonfiskowane\n\nAby skonfiskowaæ prawo jazdy wpisz /skonfiskuj prawko", gPlayerData[gPlayerVars[playerid][lPoliceComputerPID]][pPenaltyPointsCE], MAX_PENALTY_POINTS);
					else
						format(string, sizeof(string), "Nadano punkty karne");
				}
				ShowPlayerDialog(playerid, DIALOG_POLICE_COMPUTER_4D, DIALOG_STYLE_MSGBOX, "Komputer policyjny", string, "Wróæ", "Zamknij");
				return 1;
			}
			else
				goto mainPoliceComputer;
			return 1;
		}
		case DIALOG_POLICE_COMPUTER_4D:
		{
			if(response)
				goto mainPoliceComputer;
			return 1;
		}
		case DIALOG_POLICE_COMPUTER_5A:
		{
			if(response)
			{
				format(gPlayerVars[playerid][lPoliceComputerPName], MAX_PLAYER_NAME, "%s", inputtext);
				ShowPlayerDialog(playerid, DIALOG_POLICE_COMPUTER_5B, DIALOG_STYLE_INPUT, "Komputer policyjny", "Podaj treœæ wpisu", "Dalej", "Wróc");
				return 1;
			}
			else
				ShowPoliceComputer(playerid);
			return 1;
		}
		case DIALOG_POLICE_COMPUTER_5B:
		{
			if(response)
			{
				if(strlen(inputtext) == 0)
				{
					ShowPlayerDialog(playerid, DIALOG_POLICE_COMPUTER_5B, DIALOG_STYLE_INPUT, "Komputer policyjny", "Nie poda³eœ treœci\nPodaj ponownie treœæ wpisu", "Dalej", "Wróc");
					return 1;
				}
				new Year, Month, Day;
				getdate(Year, Month, Day);
				format(string, sizeof(string), "INSERT INTO `samp_wanted` (`PlayerName` , `Description` , `CommitedDay` , `CommitedMonth` , `CommitedYear`) VALUES ('%s' , '%s' , '%d' , '%d' , '%d')", gPlayerVars[playerid][lPoliceComputerPName], inputtext, Day, Month, Year);
				wp_mysql_query(string, SAVE, playerid, db_con2);
				ShowPlayerDialog(playerid, DIALOG_POLICE_COMPUTER_5C, DIALOG_STYLE_MSGBOX, "Komputer policyjny", "Wprowadzono nowy wpis", "Wróæ", "Zamknij");
				return 1;
			}
			else
				ShowPoliceComputer(playerid);
			return 1;
		}
		case DIALOG_POLICE_COMPUTER_5C:
		{
			if(response)
				goto mainPoliceComputer;
			return 1;
		}
		case DIALOG_HEAL_ASK:
		{
			if(response)
			{
				if(gPlayerData[playerid][pBank] < DynamicFactions[FACTIONID_MEDICS][fHealPrice])
				{
					ShowPlayerDialog(gPlayerVars[playerid][mHealID], DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Leczenie", "Osoba nie ma wystarczaj¹cej iloœci pieniêdzy", "Zamknij", "");
					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Leczenie", "Nie masz wystarczaj¹cej iloœci pieniêdzy na leczenie", "Zamknij", "");
					return 1;
				}
				PlayerPlayerActionMessage(gPlayerVars[playerid][mHealID], playerid, 15.0, "opatruje rany");
				SetPlayerHealth(playerid, 100.0);
				gPlayerData[playerid][pHP] = 100.0;
				// save on exit
				SendClientMessage(playerid, COLOR_GREEN, "[INFO:] Zosta³eœ uleczony !");
				SetPlayerDrunkLevelEx(playerid, 2000);
				gPlayerData[playerid][pBank] -= DynamicFactions[FACTIONID_MEDICS][fHealPrice];
				DynamicFactions[FACTIONID_MEDICS][fBank] -= ((DynamicFactions[FACTIONID_MEDICS][fHealCost]+floatround(DynamicFactions[FACTIONID_MEDICS][fHealCost]*DynamicTaxes[VatTaxMin]))-DynamicFactions[FACTIONID_MEDICS][fHealPrice]);
				SaveFData(FACTIONID_MEDICS, "Bank");
				return 1;
			}
			else
			{
				ShowPlayerDialog(gPlayerVars[playerid][mHealID], DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Leczenie", "Osoba odrzuci³a propozycje uleczenia", "Zamknij", "");
				return 1;
			}
		}
		case DIALOG_HEAL_ASK_BOT:
		{
			if(response)
			{
				if(gPlayerData[playerid][pBank] < DynamicFactions[FACTIONID_MEDICS][fHealPrice])
				{
					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Leczenie", "Nie masz wystarczaj¹cej iloœci pieniêdzy na leczenie", "Zamknij", "");
					return 1;
				}
				SetPlayerHealth(playerid, 100.0);
				gPlayerData[playerid][pHP] = 100.0;
				SendClientMessage(playerid, COLOR_GREEN, "[INFO:] Zosta³eœ uleczony !");
				SetPlayerDrunkLevelEx(playerid, 2000);
				gPlayerData[playerid][pBank] -= DynamicFactions[FACTIONID_MEDICS][fHealPrice];
				DynamicFactions[FACTIONID_MEDICS][fBank] -= ((DynamicFactions[FACTIONID_MEDICS][fHealCost]+floatround(DynamicFactions[FACTIONID_MEDICS][fHealCost]*DynamicTaxes[VatTaxMin]))-DynamicFactions[FACTIONID_MEDICS][fHealPrice]);
				SaveFData(FACTIONID_MEDICS, "Bank");
				return 1;
			}
		}
		case DIALOG_EXAMINE_ASK:
		{
			if(response)
			{
				if(gPlayerData[playerid][pBank] < DynamicFactions[FACTIONID_MEDICS][fHealPrice])
				{
					ShowPlayerDialog(gPlayerVars[playerid][mExamineID], DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Badanie", "Osoba nie ma wystarczaj¹cej iloœci pieniêdzy", "Zamknij", "");
					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Badanie", "Nie masz wystarczaj¹cej iloœci pieniêdzy na badanie", "Zamknij", "");
					return 1;
				}
				format(string, sizeof(string), "Pacjent: %s\n", GetPlayerNameEx(playerid));
				if(gPlayerData[playerid][pVitamins] >= 0.0 && gPlayerData[playerid][pVitamins] < 20.0)
					strcat(string, "- awitaminoza\n");
				else if(gPlayerData[playerid][pVitamins] > 80.0 && gPlayerData[playerid][pVitamins] < 100.0)
					strcat(string, "- hiperwitaminoza");
				if(gPlayerData[playerid][pPoison] >= 20.0 && gPlayerData[playerid][pPoison] < 40.0)
					strcat(string, "- lekkie podtrucie");
				else if(gPlayerData[playerid][pPoison] >= 40.0 && gPlayerData[playerid][pPoison] < 60.0)
					strcat(string, "- podtrucie");
				else if(gPlayerData[playerid][pPoison] >= 60.0 && gPlayerData[playerid][pPoison] < 80.0)
					strcat(string, "- zatrucie");
				else if(gPlayerData[playerid][pPoison] >= 80.0 && gPlayerData[playerid][pPoison] <= 100.0)
					strcat(string, "- ciê¿kie zatrucie");
				if(gPlayerData[playerid][pFat] >= 0.0 && gPlayerData[playerid][pPoison] < 30.0)
					strcat(string, "- niedobór cholesterolu");
				else if(gPlayerData[playerid][pFat] >= 60.0 && gPlayerData[playerid][pPoison] <= 100.0)
					strcat(string, "- nadmiar cholesterolu");
				ShowPlayerDialog(gPlayerVars[playerid][mExamineID], DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Status pacjenta", string, "Zamknij", "");
				format(string, sizeof(string), "bada pacjenta %s", GetPlayerNameEx(playerid));
				PlayerActionMessage(gPlayerVars[playerid][mExamineID], 15.0, string);
				gPlayerData[playerid][pBank] -= DynamicFactions[FACTIONID_MEDICS][fExamineCost];
				DynamicFactions[FACTIONID_MEDICS][fBank] -= ((DynamicFactions[FACTIONID_MEDICS][fExamineCost]+floatround(DynamicFactions[FACTIONID_MEDICS][fExamineCost]*DynamicTaxes[VatTaxMin]))-DynamicFactions[FACTIONID_MEDICS][fExaminePrice]);
				SaveFData(FACTIONID_MEDICS, "Bank");
				return 1;
			}
			else
			{
				ShowPlayerDialog(gPlayerVars[playerid][mExamineID], DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Badanie", "Osoba odrzuci³a propozycje uleczenia", "Zamknij", "");
				return 1;
			}
		}
		case DIALOG_STEAL_FROM_PLAYER:
		{
			if(response)
			{
				if(!PlayerFreeSlotCount(playerid))
				{
					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Nie masz ju¿ miejsca !", "Zamknij", "");
					return 1;
				}
				new giveplayerid = gSendingPlayer[playerid];
				
				gSelectedSlot[playerid] = listitem+1;
				
				SlotParam5(giveplayerid, gSelectedSlot[playerid]);
				InsertPlayerItemEx(playerid, PSlotItemType(giveplayerid, gSelectedSlot[playerid]), ShowSlotItem(giveplayerid, gSelectedSlot[playerid]), SlotParam1(giveplayerid, gSelectedSlot[playerid]), SlotParam2(giveplayerid, gSelectedSlot[playerid]), SlotParam3(giveplayerid, gSelectedSlot[playerid]), SlotParam4(giveplayerid, gSelectedSlot[playerid]), gDSelectedItemP5[giveplayerid], SlotParam6(giveplayerid, gSelectedSlot[playerid]));
				
				RemovePlayerItemExUsed(giveplayerid, gSelectedSlot[playerid], SlotParam6(giveplayerid, gSelectedSlot[playerid]));
				
				CharInZoneStealTimeLeftSave(playerid, CHAR_STEAL_COOLDOWN);
				
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Ukrad³eœ item !", "Zamknij", "");
				return 1;
			}
		}
		case DIALOG_RACE:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0: // Make a race
					{
						if(gPlayerData[playerid][pPlayingHours] < 10)
						{
							ShowPlayerDialog(playerid, DIALOG_RACE_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Musisz przegraæ co najmniej 10 godzi aby móc stworzyæ w³asny wyœcig.", "Wróæ", "");
							return 1;
						}
						if(IsPlayerInAnyRace(playerid))
						{
							ShowPlayerDialog(playerid, DIALOG_RACE_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Bierzesz ju¿ udzia³ w wyœcigu !", "Wróæ", "");
							return 1;
						}
						for(new i = 0; i < MAX_RACES; i++)
						{
							if(gRaceStatus[i][mRaceState] != RACE_STATE_NONE && DEFAULT_TIME_BEFORE_RACE_START - gRaceStatus[i][mRaceTimeToStart] > 60)
							{
								ShowPlayerDialog(playerid, DIALOG_RACE_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Nie mo¿esz teraz utworzyæ wyœcigu.\nZa mniej ni¿ minute rozpocznie siê inny wyœcig.", "Wróæ", "");
								return 1;
							}
						}
						ShowPlayerDialog(playerid, DIALOG_RACE_MAKE_1, DIALOG_STYLE_INPUT, "Informacja", "Podaj liczbe okr¹¿eñ.\n\nWpisz 0 lub 1 aby zorganizowaæ sprint.\n\nMaksymalna liczba okr¹¿eñ to 20.", "Dalej", "Wróæ");
						return 1;
					}
					case 1: // Join a race
					{
						if(gPlayerData[playerid][pPlayingHours] < 3)
						{
							ShowPlayerDialog(playerid, DIALOG_RACE_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Musisz przegraæ co najmniej 3 godziny aby móc do³¹czyæ do wyœcigu.", "Wróæ", "");
							return 1;
						}
						if(IsPlayerInAnyRace(playerid))
						{
							ShowPlayerDialog(playerid, DIALOG_RACE_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Bierzesz ju¿ udzia³ w wyœcigu !", "Wróæ", "");
							return 1;
						}
						new raceCount = 0;
						for(new i = 0; i < MAX_RACES; i++)
						{
							if(gRaceStatus[i][mRaceState] != RACE_STATE_JOINING)
								continue;
							if(gRaceStatus[i][mRaceId] != gPlayerVars[playerid][mSelectedRace])
								continue;
							gPlayerVars[playerid][mSelectedRaceList][raceCount] = i;
							raceCount++;							
							strdel(string, 0, sizeof(string));
							if(gRaceStatus[i][mRaceLaps] > 1)
								format(string, sizeof(string), "%s%d. Liczba zawodników: %d/%d - okr¹¿eñ: %d\n", string, raceCount, gRaceStatus[i][mRaceRacersCount], gRaceTrackStartPosCount[gRaceStatus[i][mRaceId]], gRaceStatus[i][mRaceLaps]);
							else
								format(string, sizeof(string), "%s%d. Liczba zawodników: %d/%d - sprint\n", string, raceCount, gRaceStatus[i][mRaceRacersCount], gRaceTrackStartPosCount[gRaceStatus[i][mRaceId]]);
						}
						if(!raceCount)
						{
							format(string, sizeof(string), "Brak aktywnych wyœcigów.");
							ShowPlayerDialog(playerid, DIALOG_RACE_INFO, DIALOG_STYLE_MSGBOX, "Informacja", string, "Wróæ", "");
							return 1;
						}
						ShowPlayerDialog(playerid, DIALOG_RACE_SELECT, DIALOG_STYLE_LIST, "Lista dostêpnych wyœcigów", string, "Do³¹cz", "Wróæ");
						return 1;
					}
					case 2: // stats menu
					{
						ShowPlayerDialog(playerid, DIALOG_RACE_STATS, DIALOG_STYLE_LIST, "Menu statystyk", "1. Twoje statystyki na tej trasie\n2. Najlepszy czas", "Wybierz", "Wróæ");
						return 1;
					}
				}
			}
		}
		case DIALOG_RACE_MAKE_1:
		{
			if(response)
			{
				if(strval(inputtext) < 0 || strval(inputtext) > 20)
				{
					ShowPlayerDialog(playerid, DIALOG_RACE_MAKE_1, DIALOG_STYLE_INPUT, "Informacja", "Poda³eœ nieprawid³ow¹ liczbe okr¹¿eñ !\n\nWpisz 0 lub 1 aby zorganizowaæ sprint.\n\nMaksymalna liczba okr¹¿eñ to 20.", "Dalej", "Wróæ");
					return 1;
				}
				for(new i = 0; i < MAX_RACES; i++)
				{
					if(gRaceStatus[i][mRaceState] != RACE_STATE_NONE)
						continue;
					gRaceStatus[i][mRaceLaps] = strval(inputtext);
					gRaceStatus[i][mRaceId] = gPlayerVars[playerid][mSelectedRace];
					gRaceStatus[i][mRaceState] = RACE_STATE_JOINING;
					gRaceStatus[i][mRaceTimeToStart] = DEFAULT_TIME_BEFORE_RACE_START;
					JoinPlayerToRace(playerid, i);
					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Stworzy³eœ wyœcig.\n\nDostêpne komendy:\n/rozpocznijwyscig\n/przerwijwyscig\n/wyrzuczwyscigu", "Zamknij", "");
					return 1;
				}
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_RACE_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Przerwa³eœ organizowanie wyœcigu", "Zamknij", "");
				return 1;
			}
		}
		case DIALOG_RACE_SELECT:
		{
			if(response)
			{
				if(gRaceStatus[gPlayerVars[playerid][mSelectedRaceList][listitem]][mRaceTimeToStart] < 60)
				{
					ShowPlayerDialog(playerid, DIALOG_RACE_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Nie mo¿esz do³¹czyæ do tego wyœcigu poniewa¿ za chwile siê on rozpocznie.", "Wróæ", "Zamknij");
					return 1;
				}
				if(gRaceStatus[gPlayerVars[playerid][mSelectedRaceList][listitem]][mRaceState] != RACE_STATE_JOINING)
				{
					ShowPlayerDialog(playerid, DIALOG_RACE_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Nie mo¿esz do³¹czyæ do tego wyœcigu poniewa¿ ten wyœcig ju¿ siê rozpocz¹³.", "Wróæ", "Zamknij");
					return 1;
				}
				if(JoinPlayerToRace(playerid, gPlayerVars[playerid][mSelectedRaceList][listitem]))
				{
					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Do³¹czy³eœ do wyœcigu.", "Zamknij", "");
					return 1;
				}
				else
				{
					ShowPlayerDialog(playerid, DIALOG_RACE_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Nie mo¿esz do³¹czyæ do tego wyœcigu poniewa¿ nie ma ju¿ wolnych miejsc startowych.", "Wróæ", "WyjdŸ");
					return 1;
				}
			}
		}
		case DIALOG_RACE_STATS:
		{
			if(response)
			{
				if(listitem == 0)
				{
					format(string, sizeof(string), "SELECT HIGH_PRIORITY * FROM `samp_races_tracks_hotlaps` WHERE `RaceId` = '%d' AND `Name` = '%s'",
						gPlayerVars[playerid][mSelectedRace], gPlayerData[playerid][pName]);
					wp_mysql_query(string, LOAD_RACER_STATS, playerid, db_con2);
				}
				else
				{
					format(string, sizeof(string), "SELECT HIGH_PRIORITY * FROM `samp_races_tracks_hotlaps` WHERE `RaceId` = '%d' ORDER BY `Time` ASC LIMIT 1",
						gPlayerVars[playerid][mSelectedRace]);
					wp_mysql_query(string, LOAD_RACER_STATS_BEST, playerid, db_con2);
				}
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "£adowanie danych...", "Zamknij", "");
				return 1;
			}
		}
		case DIALOG_RACE_INFO:
		{
			if(response)
			{
				format(string, sizeof(string), "1. Zorganizuj wyœcig\n2. Do³¹cz do istniej¹cego wyœcigu\n3. Zobacz statystyki tego wyœcigu");
				ShowPlayerDialog(playerid, DIALOG_RACE, DIALOG_STYLE_LIST, "Wyœcig", string, "Wybierz", "Zamknij");
				return 1;
			}
		}
		case DIALOG_MAKE_FACTION:
		{
			if(response)
			{
				switch(listitem)
				{
					case 0:
					{
						gListItem[playerid] = 0;
						format(string, sizeof(string), "Wybra³eœ typ frakcji: GANG\n\nGang jest frakcj¹ czerpi¹c¹ zyski z kradzierzy oraz napadów.\nIm wiêkszy teren frakcja kontroluje tym wiêksze przychody mo¿e osi¹gn¹æ.\n");
						strcat(string, "Specjaln¹ funkcj¹ tej frakcji jest fabryka broni w której cz³onkowie gangu mog¹ sk³adaæ nielegaln¹ broñ");
						strcat(string, "\n\nCzy napewno chcesz stworzyæ t¹ frakcje ?");
						ShowPlayerDialog(playerid, DIALOG_MAKE_FACTION_2, DIALOG_STYLE_MSGBOX, "Opis frakcji", string, "Tak", "Zamknij");
						return 1;
					}
					case 1:
					{
						gListItem[playerid] = 1;
						format(string, sizeof(string), "Wybra³eœ typ frakcji: KORPORACJA TAKSÓWKARSKA\nKoszt za³o¿enia 15 000$\n\nKorporacja taksówkarska jest frakcj¹ czerpi¹c¹ zyski z przewo¿enia pasa¿erów autami nale¿¹cymi do frakcji.\n");
						strcat(string, "Za³o¿ycie korporacji ustala koszty przejazdu taksówek (koszt wejœcia do taksówki a tak¿e cene za 1km).\n");
						strcat(string, "Taksówk¹ mo¿e byæ praktycznie ka¿dy pojazd. Wystarczy, do niego dokupiæ listwe informuj¹c¹ ¿e jest to pojazd TAXI.\n");
						strcat(string, "\nCzy napewno chcesz stworzyæ t¹ frakcje ?");
						ShowPlayerDialog(playerid, DIALOG_MAKE_FACTION_2, DIALOG_STYLE_MSGBOX, "Opis frakcji", string, "Tak", "Zamknij");
						return 1;
					}
					case 2:
					{
						gListItem[playerid] = 2;
						format(string, sizeof(string), "Wybra³eœ FIRMÊ TELEKOMUNIKACYJN¥\nKoszt za³o¿enia: 40 000$\n\nFirma telekomunikacyjna czerpie zyski ze sprzeda¿y telefonów oraz us³ug telekomunikacyjnych.\n");
						strcat(string, "Firma telekomunikacyjna do prosperowania wymaga salonu w którym mo¿e oferowaæ swoje us³ugi.\n");
						strcat(string, "W³aœciciel firmy ustala koszty po³¹czeñ, ceny za SMSy, etc.");
						strcat(string, "\n\nCzy napewno chcesz za³o¿yæ firme telekomunikacyjn¹ ?");						
						ShowPlayerDialog(playerid, DIALOG_MAKE_FACTION_2, DIALOG_STYLE_MSGBOX, "Opis frakcji", string, "Tak", "Zamknij");
					}
					case 3:
					{
						gListItem[playerid] = 3;
						format(string, sizeof(string), "Wybra³eœ FIRMÊ - SIEÆ OBIEKTÓW US£UGOWYCH\nKoszt za³o¿enia 25 000$\n\nSama firma nie jest w stanie w ¿aden sposób generowaæ zysków.\n");
						strcat(string, "Dziêki firmie, w³aœciciel mo¿e posiadaæ sieæ biznesów, z którymi mo¿e podpisaæ umowy i zarabiaæ na ich zyskach.\n");
						strcat(string, "Oprócz tego mo¿liwe jest te¿ wykupienie budynku, który mo¿na przeznaczyæ na magazyn lub warsztat samochodowy.\n");
						strcat(string, "Za³o¿yciel mo¿e tak¿e zatrudniaæ pracowników (w tej chwili g³ównie mechaników, którzy mogliby pracowaæ w warsztacie).\n");
						strcat(string, "\n\nCzy napewno chcesz za³o¿yæ firme tego typu ?");						
						ShowPlayerDialog(playerid, DIALOG_MAKE_FACTION_2, DIALOG_STYLE_MSGBOX, "Opis frakcji", string, "Tak", "Zamknij");
					}
				}
			}
		}
		case DIALOG_MAKE_FACTION_2:
		{
			if(response)
			{
				switch(gListItem[playerid])
				{
					case 0..1:
					{
						if(gPlayerData[playerid][pFaction] != 255)
						{
							ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Nale¿ysz ju¿ do jednej frakcji.\nNie mo¿esz przynale¿eæ do drugiej.", "WyjdŸ", "");
							return 1;
						}
						ShowPlayerDialog(playerid, DIALOG_MAKE_FACTION_3, DIALOG_STYLE_INPUT, "Tworzenie frakcji", "Podaj nazwe frakcji", "Dalej", "Zamknij");
						return 1;
					}
					case 2:
					{
						if(gPlayerData[playerid][pFaction2] != 255)
						{
							ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Posiadasz ju¿ firme.\nNie mo¿esz za³o¿yæ drugiej.", "WyjdŸ", "");
							return 1;
						}
						if(gPlayerData[playerid][pCash] < 40000)
						{
							ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Nie posiadasz omawianej kwoty (40 000$) na za³o¿enie firmy.", "WyjdŸ", "");
							return 1;
						}
						ShowPlayerDialog(playerid, DIALOG_MAKE_FACTION_3, DIALOG_STYLE_INPUT, "Tworzenie frakcji", "Podaj nazwe firmy", "Dalej", "Zamknij");
						return 1;
					}
					case 3:
					{
						if(gPlayerData[playerid][pFaction2] != 255)
						{
							ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Posiadasz ju¿ firme.\nNie mo¿esz za³o¿yæ drugiej.", "WyjdŸ", "");
							return 1;
						}
						if(gPlayerData[playerid][pCash] < 25000)
						{
							ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Nie posiadasz omawianej kwoty (25 000$) na za³o¿enie firmy.", "WyjdŸ", "");
							return 1;
						}
						ShowPlayerDialog(playerid, DIALOG_MAKE_FACTION_3, DIALOG_STYLE_INPUT, "Tworzenie frakcji", "Podaj nazwe firmy", "Dalej", "Zamknij");
						return 1;
					}
				}
			}
		}
		case DIALOG_MAKE_FACTION_3:
		{
			if(response)
			{
				if(strlen(inputtext) < 3)
				{
					ShowPlayerDialog(playerid, DIALOG_MAKE_FACTION_3, DIALOG_STYLE_INPUT, "Tworzenie frakcji", "Poda³eœ zbyt krótk¹ lub niepoprawn¹ nazwe.\nSpróbuj ponownie.", "Dalej", "WyjdŸ");
					return 1;
				}
				switch(gListItem[playerid])
				{
					case 0:
					{
						for(new i = 14; i < sizeof(DynamicFactions); i++)
						{
							if(i == 255)
								continue;
							if(DynamicFactions[i][IsEnabled])
								continue;
							DynamicFactions[i][IsEnabled] = 1;
							DynamicFactions[i][fType] = 3;
							strdel(DynamicFactions[i][Name], 0, 49);
							strins(DynamicFactions[i][Name], inputtext, 0, 49);
							SaveFData(i, "Name");
							SaveFData(i, "IsEnabled");
							SaveFData(i, "Type");
							gPlayerData[playerid][pRank] = 1;
							gPlayerData[playerid][pFaction] = i;
							SavePlayerData(playerid, "Rank");
							SavePlayerData(playerid, "Faction");
							ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Utworzy³eœ gang.\nAby zarz¹dzaæ frakcj¹, wpisz /komendyfrakcji.", "Zamknij", "");
							return 1;
						}
						ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Brak mo¿liwoœci utworzenia frakcji w tej chwili", "Zamknij", "");
						return 1;
					}
					case 1:
					{
						for(new i = 14; i < sizeof(DynamicFactions); i++)
						{
							if(i == 255)
								continue;
							if(DynamicFactions[i][IsEnabled])
								continue;
							DynamicFactions[i][IsEnabled] = 1;
							DynamicFactions[i][fType] = 6;
							strdel(DynamicFactions[i][Name], 0, 49);
							strins(DynamicFactions[i][Name], inputtext, 0, 49);
							SaveFData(i, "Name");
							SaveFData(i, "IsEnabled");
							SaveFData(i, "Type");
							gPlayerData[playerid][pRank] = 1;
							gPlayerData[playerid][pFaction] = i;
							SavePlayerData(playerid, "Rank");
							SavePlayerData(playerid, "Faction");
							GivePlayerCash(playerid, -15000);
							ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Utworzy³eœ korporacje taksówkarsk¹.\nAby zarz¹dzaæ frakcj¹, wpisz /komendyfrakcji.", "Zamknij", "");
							return 1;
						}
						ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Brak mo¿liwoœci utworzenia frakcji w tej chwili", "Zamknij", "");
						return 1;
					}
					case 2:
					{
						for(new i = 14; i < sizeof(DynamicFactions); i++)
						{
							if(i == 255)
								continue;
							if(DynamicFactions[i][IsEnabled])
								continue;
							DynamicFactions[i][IsEnabled] = 1;
							DynamicFactions[i][fType] = 9;
							strdel(DynamicFactions[i][Name], 0, 49);
							strins(DynamicFactions[i][Name], inputtext, 0, 49);
							SaveFData(i, "Name");
							SaveFData(i, "IsEnabled");
							SaveFData(i, "Type");
							gPlayerData[playerid][pRank2] = 1;
							gPlayerData[playerid][pFaction2] = i;
							SavePlayerData(playerid, "Rank2");
							SavePlayerData(playerid, "Faction2");
							GivePlayerCash(playerid, -40000);
							ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Utworzy³eœ firme telekomunikacyjn¹.\nAby zarz¹dzaæ firm¹ skorzystaj z komend: /komendyfrakcji oraz /komendyfirmy.", "Zamknij", "");
							return 1;
						}
						ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Brak mo¿liwoœci utworzenia frakcji w tej chwili", "Zamknij", "");
						return 1;
					}
					case 3:
					{
						for(new i = 14; i < sizeof(DynamicFactions); i++)
						{
							if(i == 255)
								continue;
							if(DynamicFactions[i][IsEnabled])
								continue;
							DynamicFactions[i][IsEnabled] = 1;
							DynamicFactions[i][fType] = 10;
							strdel(DynamicFactions[i][Name], 0, 49);
							strins(DynamicFactions[i][Name], inputtext, 0, 49);
							SaveFData(i, "Name");
							SaveFData(i, "IsEnabled");
							SaveFData(i, "Type");
							gPlayerData[playerid][pRank2] = 1;
							gPlayerData[playerid][pFaction2] = i;
							SavePlayerData(playerid, "Rank2");
							SavePlayerData(playerid, "Faction2");
							GivePlayerCash(playerid, -25000);
							ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Utworzy³eœ firme sieci us³ug.\nAby zarz¹dzaæ firm¹ skorzystaj z komend: /komendyfrakcji oraz /komendyfirmy.", "Zamknij", "");
							return 1;
						}
						ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Brak mo¿liwoœci utworzenia frakcji w tej chwili", "Zamknij", "");
						return 1;
					}
				}
			}
		}
		case DIALOG_RADIO_CHANNELS:
		{
			if(response)
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					new seat;
					
					seat = GetPlayerVehicleSeat(playerid);
					
					if(seat > 1)
					{
						SendClientMessage(playerid, COLOR_ORANGE, "[INFO:] Siedzisz za daleko od radia !");
						return 1;
					}
					
					new vehid = GetPlayerVehicleID(playerid);
					
					if(gVehData[vehid-1][RadioOn])
					{
						PlayerActionMessage(playerid, 5.0, "zmienia kana³");
					}
					else
					{
						PlayerActionMessage(playerid, 5.0, "w³¹cza radio");
					}
					
					PlayCarRadioStation(playerid, listitem+1, vehid);

					return 1;
				}
				else
				{
					SendClientMessage(playerid,COLOR_LIGHTYELLOW2,"[INFO:] Nie jesteœ w ¿adnym pojeŸdzie !");
					return 1;
				}
			}
		}
		case DIALOG_DRIVER_BOOK:
		{
			if(response)
			{
				format(string, sizeof(string), "SELECT HIGH_PRIORITY * FROM `samp_questions` WHERE `ID` = '%d'", listitem+1);
				wp_mysql_query(string, LOAD_DRIVER_BOOK_QUESTION, playerid, db_con2);
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "£adowanie danych...", "Zamknij", "");
			}
		}
		case DIALOG_DRIVER_BOOK_2:
		{
			if(response)
			{
				SelectTestQuestion(playerid);
			}
		}
		case DIALOG_REPORT_PROBLEM:
		{
			if(response)
			{
				if(strlen(inputtext) < 10)
				{
					ShowPlayerDialog(playerid, DIALOG_REPORT_PROBLEM, DIALOG_STYLE_INPUT, "Okno dialogowe zg³aszania problemów",
						"Nie poda³eœ ¿adnego opis. Opis musi sk³adaæ siê co najmniej z 10 znaków !", "Dalej", "Anuluj");
					return 1;
				}
				new Year, Month, Day;
				getdate(Year, Month, Day);
				new Hour, Minute, Second;
				gettime(Hour, Minute, Second);
				GetPlayerPos(playerid, gPlayerData[playerid][pCrashX], gPlayerData[playerid][pCrashY], gPlayerData[playerid][pCrashZ]);
				new entry[1024];
				format(entry, sizeof(entry), "------------------------------\r\n[%d/%d/%d][%d:%d.%d][Reported by: IC:%s/OOC:%s][Version: %s]\r\n%s\r\n[%f, %f, %f]\r\n",
					Day,
					Month,
					Year,
					Hour,
					Minute,
					Second,
					gPlayerData[playerid][pName],
					gPlayerData[playerid][pOOCName],
					VERSION,
					inputtext,
					gPlayerData[playerid][pCrashX],
					gPlayerData[playerid][pCrashY],
					gPlayerData[playerid][pCrashZ]
				);
				new File:hFile;
				hFile = fopen("logs/reports.log", io_append);				
				if(hFile)
				{
					fwrite(hFile, entry);
					fclose(hFile);
				}
				else
					ErrorLog("[ERROR:] Can't save reports.log");
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Dziêkujemy za zg³oszenie problemu. Postaramy siê jak najszybciej go rozwi¹zaæ", "Zamknij", "");
				gPlayerVars[playerid][mBugInfoCoolDown] = 300;
				return 1;
			}
		}
		case DIALOG_LOGIN_KP:
		{
			if(response)
			{
				if(strcmp(gPoliceComputerPassword, inputtext, false) != 0 && strlen(inputtext) == strlen(gPoliceComputerPassword))
				{					
					ShowPlayerDialog(playerid, DIALOG_LOGIN_KP, DIALOG_STYLE_INPUT, #COLOR_TITLE"Logowanie do panelu", "Poda³eœ niepoprawne has³o !\nSpróbuj jeszcze raz.", "Loguj", "WyjdŸ");
					return 1;
				}
				ShowPoliceComputer(playerid);
			}
		}
		case DIALOG_BUY_BUS_TICKET:
		{
			if(response)
			{
				new vehicleid = GetPlayerVehicleID(playerid);
				new driverId;
				
				if(vehicleid != 0)
				{
					if(vehicleid == 1998 || vehicleid == 1999)
					{
						if(IsPlayerVip(playerid))
						{
							gPlayerVars[playerid][mBusTicketBuyTime] = 0;
							
							if(vehicleid == 1999)
							{
								GivePlayerCash(playerid, -floatround(gBusTrackTicketCost[0]*BUS_TICKET_VIP_DISCOUNT));		
								DynamicFactions[FACTIONID_GOVERNMENT][fBank] += floatround(gBusTrackTicketCost[0]*BUS_TICKET_VIP_DISCOUNT);	
								format(string, sizeof(string), "Zap³aci³eœ $%d za bilet", floatround(gBusTrackTicketCost[0]*BUS_TICKET_VIP_DISCOUNT));
							}
							else if(vehicleid == 1998)
							{
								// NOTE: Non existing track
								GivePlayerCash(playerid, -floatround(20*BUS_TICKET_VIP_DISCOUNT));		
								DynamicFactions[FACTIONID_GOVERNMENT][fBank] += floatround(20*BUS_TICKET_VIP_DISCOUNT);
								format(string, sizeof(string), "Zap³aci³eœ $%d za bilet", floatround(20*BUS_TICKET_VIP_DISCOUNT));
							}
							SaveFData(FACTIONID_GOVERNMENT, "Bank");
							
							ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Kupno biletu", string, "Zamknij", "");
						}
						else
						{
							gPlayerVars[playerid][mBusTicketBuyTime] = 0;
							
							if(vehicleid == 1999)
							{
								GivePlayerCash(playerid, -(gBusTrackTicketCost[0]));		
								DynamicFactions[FACTIONID_GOVERNMENT][fBank] += gBusTrackTicketCost[0];	
								format(string, sizeof(string), "Zap³aci³eœ $%d za bilet", gBusTrackTicketCost[0]);
							}
							else if(vehicleid == 1998)
							{
								// NOTE: Non existing track
								GivePlayerCash(playerid, -20);		
								DynamicFactions[FACTIONID_GOVERNMENT][fBank] += 20;
								format(string, sizeof(string), "Zap³aci³eœ $%d za bilet", 20);
							}
							SaveFData(FACTIONID_GOVERNMENT, "Bank");
							
							ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Kupno biletu", string, "Zamknij", "");
						}
					}
					else
					{
						driverId = GetPlayerInVehicleSeat(vehicleid, 0);
						if(driverId != -1)
						{
							if(gBusDriverOnDuty[driverId])
							{
								if(IsPlayerVip(playerid))
								{
									GivePlayerCash(playerid, -floatround((gBusTrackTicketCost[gBusDriverSelectedLine[driverId]]*BUS_TICKET_VIP_DISCOUNT)));
									DynamicFactions[FACTIONID_GOVERNMENT][fBank] += floatround(gBusTrackTicketCost[gBusDriverSelectedLine[driverId]]*BUS_TICKET_VIP_DISCOUNT);
									SaveFData(FACTIONID_GOVERNMENT, "Bank");
									gPlayerVars[playerid][mBusTicketBuyTime] = 0;
									gJobProfit[driverId] += floatround(gBusTrackTicketCost[gBusDriverSelectedLine[driverId]]*0.5);
									format(string, sizeof(string), "Zap³aci³eœ $%d za bilet", floatround(gBusTrackTicketCost[gBusDriverSelectedLine[driverId]]*BUS_TICKET_VIP_DISCOUNT));
									ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Kupno biletu", string, "Zamknij", "");
									SendClientMessage(driverId, COLOR_LIGHTYELLOW2, "[INFO:] Otrzyma³eœ 50%% prowizji ze sprzeda¿y biletu");
								}
								else
								{
									GivePlayerCash(playerid, -(gBusTrackTicketCost[gBusDriverSelectedLine[driverId]]));
									DynamicFactions[FACTIONID_GOVERNMENT][fBank] += (gBusTrackTicketCost[gBusDriverSelectedLine[driverId]]);								
									SaveFData(FACTIONID_GOVERNMENT, "Bank");								
									gPlayerVars[playerid][mBusTicketBuyTime] = 0;
									gJobProfit[driverId] += floatround(gBusTrackTicketCost[gBusDriverSelectedLine[driverId]]*0.5);
									format(string, sizeof(string), "Zap³aci³eœ $%d za bilet", (gBusTrackTicketCost[gBusDriverSelectedLine[driverId]]));
									ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Kupno biletu", string, "Zamknij", "");
									SendClientMessage(driverId, COLOR_LIGHTYELLOW2, "[INFO:] Otrzyma³eœ 50%% prowizji ze sprzeda¿y biletu");
								}
							}
						}
					}
				}
			}
			else
			{
				gPlayerVars[playerid][mBusTicketBuyTime] = 0;
				RemovePlayerFromVehicle(playerid);
			}
		}
		case DIALOG_F_PAYMENT_1:
		{
			if(response)
			{
				gPlayerVars[playerid][mEditRank] = listitem+1;
				payment1Input:
				format(string, sizeof(string), "Edytujesz range nr %d", gPlayerVars[playerid][mEditRank]);
				ShowPlayerDialog(playerid, DIALOG_F_PAYMENT_2, DIALOG_STYLE_INPUT, string, "Wpisz jak wysok¹ wyp³ate ma otrzymywaæ dana ranga:", "Dalej", "Zamknij");
				return 1;
			}
		}
		case DIALOG_F_PAYMENT_2:
		{
			if(response)
			{
				if(!IsNumeric(inputtext))
				{
					ShowPlayerDialog(playerid, DIALOG_F_PAYMENT_2_MSG, DIALOG_STYLE_MSGBOX, "Informacja", "Niepoprawna wartoœæ. Spróbuj ponownie", "Wróæ", "Zamknij");
					return 1;
				}
				
				if(strval(inputtext) > 5000)
				{
					ShowPlayerDialog(playerid, DIALOG_F_PAYMENT_2_MSG, DIALOG_STYLE_MSGBOX, "Informacja", "Niepoprawna wartoœæ. Spróbuj ponownie", "Wróæ", "Zamknij");
					return 1;
				}
				
				if(strval(inputtext) <= 0)
				{
					ShowPlayerDialog(playerid, DIALOG_F_PAYMENT_2_MSG, DIALOG_STYLE_MSGBOX, "Informacja", "Niepoprawna wartoœæ. Spróbuj ponownie", "Wróæ", "Zamknij");
					return 1;
				}
				
				switch(gPlayerVars[playerid][mEditRank])
				{
					case 1: PayRank[gPlayerData[playerid][pFaction]][Rank1] = strval(inputtext);
					case 2: PayRank[gPlayerData[playerid][pFaction]][Rank2] = strval(inputtext);
					case 3: PayRank[gPlayerData[playerid][pFaction]][Rank3] = strval(inputtext);
					case 4: PayRank[gPlayerData[playerid][pFaction]][Rank4] = strval(inputtext);
					case 5: PayRank[gPlayerData[playerid][pFaction]][Rank5] = strval(inputtext);
					case 6: PayRank[gPlayerData[playerid][pFaction]][Rank6] = strval(inputtext);
					case 7: PayRank[gPlayerData[playerid][pFaction]][Rank7] = strval(inputtext);
					case 8: PayRank[gPlayerData[playerid][pFaction]][Rank8] = strval(inputtext);
					case 9: PayRank[gPlayerData[playerid][pFaction]][Rank9] = strval(inputtext);
					case 10: PayRank[gPlayerData[playerid][pFaction]][Rank10] = strval(inputtext);
				}
				
				SavePayRank();
				
				format(string, sizeof(string), "Zmieni³eœ wysokoœæ wyp³aty dla rangi %d", gPlayerVars[playerid][mEditRank]);
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", string, "Zamknij", "");
			}
		}
		case DIALOG_F_PAYMENT_2_MSG:
		{
			goto payment1Input;
		}
		case DIALOG_F2_PAYMENT_1:
		{
			if(response)
			{
				payment2Input:
				gPlayerVars[playerid][mEditRank] = listitem+1;
				format(string, sizeof(string), "Edytujesz range nr %d", gPlayerVars[playerid][mEditRank]);
				ShowPlayerDialog(playerid, DIALOG_F2_PAYMENT_2, DIALOG_STYLE_INPUT, string, "Wpisz jak wysok¹ wyp³ate ma otrzymywaæ dana ranga:", "Dalej", "Zamknij");
				return 1;
			}
		}
		case DIALOG_F2_PAYMENT_2:
		{
			if(response)
			{
				if(!IsNumeric(inputtext))
				{
					ShowPlayerDialog(playerid, DIALOG_F2_PAYMENT_2_MSG, DIALOG_STYLE_MSGBOX, "Informacja", "Niepoprawna wartoœæ. Spróbuj ponownie", "Wróæ", "Zamknij");
					return 1;
				}
				
				if(strval(inputtext) > 999)
				{
					ShowPlayerDialog(playerid, DIALOG_F2_PAYMENT_2_MSG, DIALOG_STYLE_MSGBOX, "Informacja", "Niepoprawna wartoœæ. Spróbuj ponownie", "Wróæ", "Zamknij");
					return 1;
				}
				
				if(strval(inputtext) <= 0)
				{
					ShowPlayerDialog(playerid, DIALOG_F2_PAYMENT_2_MSG, DIALOG_STYLE_MSGBOX, "Informacja", "Niepoprawna wartoœæ. Spróbuj ponownie", "Wróæ", "Zamknij");
					return 1;
				}
				
				switch(gPlayerVars[playerid][mEditRank])
				{
					case 1: PayRank[gPlayerData[playerid][pFaction2]][Rank1] = strval(inputtext);
					case 2: PayRank[gPlayerData[playerid][pFaction2]][Rank2] = strval(inputtext);
					case 3: PayRank[gPlayerData[playerid][pFaction2]][Rank3] = strval(inputtext);
					case 4: PayRank[gPlayerData[playerid][pFaction2]][Rank4] = strval(inputtext);
					case 5: PayRank[gPlayerData[playerid][pFaction2]][Rank5] = strval(inputtext);
					case 6: PayRank[gPlayerData[playerid][pFaction2]][Rank6] = strval(inputtext);
					case 7: PayRank[gPlayerData[playerid][pFaction2]][Rank7] = strval(inputtext);
					case 8: PayRank[gPlayerData[playerid][pFaction2]][Rank8] = strval(inputtext);
					case 9: PayRank[gPlayerData[playerid][pFaction2]][Rank9] = strval(inputtext);
					case 10: PayRank[gPlayerData[playerid][pFaction2]][Rank10] = strval(inputtext);
				}
				
				SavePayRank();
				
				format(string, sizeof(string), "Zmieni³eœ wysokoœæ wyp³aty dla rangi %d", gPlayerVars[playerid][mEditRank]);
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", string, "Zamknij", "");
			}
		}
		case DIALOG_F2_PAYMENT_2_MSG:
		{
			goto payment2Input;
		}
		case DIALOG_F_ARMENT_1:
		{
			if(response)
			{
				gPlayerVars[playerid][mEditRank] = listitem+1;
				format(string, sizeof(string), "Edytujesz range nr %d", gPlayerVars[playerid][mEditRank]);
				ShowPlayerDialog(playerid, DIALOG_F_ARMENT_2, DIALOG_STYLE_LIST, string, "1. Pierwsza broñ\n2. Amunicja do pierwszej broni\n3. Druga broñ", "Wybierz", "Zamknij");
				return 1;
			}
		}
		case DIALOG_F_ARMENT_2:
		{
			if(response)
			{
				
				switch(listitem)
				{
					// bron nr 1
					case 0:
					{
						format(string, sizeof(string), "Edytujesz range nr %d, wybierasz I broñ", gPlayerVars[playerid][mEditRank]);
						ShowPlayerDialog(playerid, DIALOG_F_ARMENT_W_1, DIALOG_STYLE_LIST, string,
							"1. brak\n2. pistolet\n3. pistolet z t³umikiem\n4. Desert Eagle\n5. shotgun\n6. UZI\n7. MP5\n8. AK-47\n9. M4\n10. Tec-9\n11. Snajperka",
							"Wybierz", "Zamknij");
					}
					// ammo broni 1
					case 1:
					{
						ammo1Input:
						format(string, sizeof(string), "Edytujesz range nr %d, wybierasz iloœæ amunicji do I broni", gPlayerVars[playerid][mEditRank]);						
						ShowPlayerDialog(playerid, DIALOG_F_ARMENT_A_1, DIALOG_STYLE_INPUT, string, "Wpisz ile pocisków bêdzie pobierane z frakcji przy ka¿dym pobraniu broni:", "Dalej", "Zamknij");
					}
					// bron nr 2
					case 2:
					{
						format(string, sizeof(string), "Edytujesz range nr %d, wybierasz II broñ", gPlayerVars[playerid][mEditRank]);
						ShowPlayerDialog(playerid, DIALOG_F_ARMENT_W_2, DIALOG_STYLE_LIST, string,
							"1. brak\n2. Brass Knuckles\n3. pa³ka policyjna\n4. nó¿\n5. kij bejsbolowy\n6. katana",
							"Wybierz", "Zamknij");
					}
					/*// ammo broni 2
					case 3:
					{
						format(string, sizeof(string), "Edytujesz range nr %d, wybierasz iloœæ amunicji do II broni", gPlayerVars[playerid][mEditRank]);						
						ShowPlayerDialog(playerid, DIALOG_F_ARMENT_A_1, DIALOG_STYLE_INPUT, string, "Wpisz ile pocisków bêdzie pobierane z frakcji przy ka¿dym pobraniu broni:", "Dalej", "Zamknij");
					}*/
				}
			}
		}
		case DIALOG_F_ARMENT_W_1:
		{
			if(response)
			{
				switch(listitem)
				{
					// brak
					case 0:
					{
						SetFactionRankWeapon(gPlayerData[playerid][pFaction], gPlayerVars[playerid][mEditRank], 1, 0);
					}
					// pistolet
					case 1:
					{
						SetFactionRankWeapon(gPlayerData[playerid][pFaction], gPlayerVars[playerid][mEditRank], 1, 22);
					}
					// pistolet z tlumikiem
					case 2:
					{
						SetFactionRankWeapon(gPlayerData[playerid][pFaction], gPlayerVars[playerid][mEditRank], 1, 23);
					}
					// desert eagle
					case 3:
					{
						SetFactionRankWeapon(gPlayerData[playerid][pFaction], gPlayerVars[playerid][mEditRank], 1, 24);
					}
					// shotgun
					case 4:
					{
						SetFactionRankWeapon(gPlayerData[playerid][pFaction], gPlayerVars[playerid][mEditRank], 1, 25);
					}
					// uzi
					case 5:
					{
						SetFactionRankWeapon(gPlayerData[playerid][pFaction], gPlayerVars[playerid][mEditRank], 1, 28);
					}
					// Mp5
					case 6:
					{
						SetFactionRankWeapon(gPlayerData[playerid][pFaction], gPlayerVars[playerid][mEditRank], 1, 29);
					}
					// ak47
					case 7:
					{
						SetFactionRankWeapon(gPlayerData[playerid][pFaction], gPlayerVars[playerid][mEditRank], 1, 30);
					}
					// m4
					case 8:
					{
						SetFactionRankWeapon(gPlayerData[playerid][pFaction], gPlayerVars[playerid][mEditRank], 1, 31);
					}
					// tec9
					case 9:
					{
						SetFactionRankWeapon(gPlayerData[playerid][pFaction], gPlayerVars[playerid][mEditRank], 1, 32);
					}
					// snajperka
					case 10:
					{
						SetFactionRankWeapon(gPlayerData[playerid][pFaction], gPlayerVars[playerid][mEditRank], 1, 24);
					}
				}
				
				format(string, sizeof(string), "Zmieni³eœ I broñ dla rangi %d", gPlayerVars[playerid][mEditRank]);
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", string, "Zamknij", "");
			}
		}
		case DIALOG_F_ARMENT_A_1:
		{
			if(response)
			{
				if(!IsNumeric(inputtext))
				{
					ShowPlayerDialog(playerid, DIALOG_F_ARMENT_A_1_MSG, DIALOG_STYLE_MSGBOX, "Informacja", "Niepoprawna wartoœæ. Spróbuj ponownie", "Wróæ", "Zamknij");
					return 1;
				}
				
				if(strval(inputtext) > 999)
				{
					ShowPlayerDialog(playerid, DIALOG_F_ARMENT_A_1_MSG, DIALOG_STYLE_MSGBOX, "Informacja", "Niepoprawna wartoœæ. Spróbuj ponownie", "Wróæ", "Zamknij");
					return 1;
				}
				
				if(strval(inputtext) <= 0)
				{
					ShowPlayerDialog(playerid, DIALOG_F_ARMENT_A_1_MSG, DIALOG_STYLE_MSGBOX, "Informacja", "Niepoprawna wartoœæ. Spróbuj ponownie", "Wróæ", "Zamknij");
					return 1;
				}
				
				SetFactionRankAmmo(gPlayerData[playerid][pFaction], gPlayerVars[playerid][mEditRank], 1, strval(inputtext));
				
				format(string, sizeof(string), "Zmieni³eœ iloœæ amunicji I broni dostêpnej dla rangi %d", gPlayerVars[playerid][mEditRank]);
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", string, "Zamknij", "");
			}
		}
		case DIALOG_F_ARMENT_A_1_MSG:
		{
			goto ammo1Input;
		}
		case DIALOG_F_ARMENT_W_2:
		{
			if(response)
			{
				switch(listitem)
				{
					// brak
					case 0:
					{
						SetFactionRankWeapon(gPlayerData[playerid][pFaction], gPlayerVars[playerid][mEditRank], 2, 0);
					}
					// bras knuckles
					case 1:
					{
						SetFactionRankWeapon(gPlayerData[playerid][pFaction], gPlayerVars[playerid][mEditRank], 2, 1);
					}
					// pa³ka policyjna
					case 2:
					{
						SetFactionRankWeapon(gPlayerData[playerid][pFaction], gPlayerVars[playerid][mEditRank], 2, 3);
					}
					// nó¿
					case 3:
					{
						SetFactionRankWeapon(gPlayerData[playerid][pFaction], gPlayerVars[playerid][mEditRank], 2, 4);
					}
					// kij bejsbolowy
					case 4:
					{
						SetFactionRankWeapon(gPlayerData[playerid][pFaction], gPlayerVars[playerid][mEditRank], 2, 5);
					}
					// katana
					case 5:
					{
						SetFactionRankWeapon(gPlayerData[playerid][pFaction], gPlayerVars[playerid][mEditRank], 2, 8);
					}
				}
				
				format(string, sizeof(string), "Zmieni³eœ II broñ dla rangi %d", gPlayerVars[playerid][mEditRank]);
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", string, "Zamknij", "");
			}
		}
		case DIALOG_MEDIC_1:
		{
			if(response)
			{
				format(string, sizeof(string), "Czy zgadzasz siê ponieœæ op³ate za uleczenie w wysokoœci $%d ?\nWartoœæ zostanie pobrana z twojego konta bankowego.",
					DynamicFactions[FACTIONID_MEDICS][fHealPrice]);
				ShowPlayerDialog(playerid, DIALOG_HEAL_ASK_BOT, DIALOG_STYLE_MSGBOX, "Leczenie", string, "Tak", "Nie");						
				return 1;
			}
		}
		case DIALOG_COMPANY:
		{
			if(response)
			{
				switch(listitem)
				{
					// zatrudnij pracownika
					case 0:
					{
						companyHire:
						ShowPlayerDialog(playerid, DIALOG_COMPANY_HIRE, DIALOG_STYLE_INPUT, "Panel firmy - zatrudnij", "Wpisz ID gracza, którego chcesz zatrudniæ", "Dalej", "Wróæ");
						return 1;
					}
					// zwolnij pracownika
					case 1:
					{
						companyFire:
						format(string, sizeof(string), "SELECT `PlayerName` FROM `samp_users_other` WHERE `Faction2` = '%d'", gPlayerData[playerid][pFaction2]);
						wp_mysql_query(string, COMPANY_MEMBERS_DISMISS, playerid, db_con1);
						return 1;
					}
					// wynagrodzenie
					case 2:
					{
						payments:
						ShowPlayerDialog(playerid, DIALOG_COMPANY_PAYMENT, DIALOG_STYLE_INPUT, "Firma - wynagrodzenie pracownika", "Wpisz jak wysok¹ wyp³ate ma otrzymywaæ pracownik:", "Dalej", "Zamknij");
						return 1;
					}
				}
			}
		}
		case DIALOG_FACTION:
		{
			if(response)
			{
				switch(listitem)
				{
					// zatrudnij pracownika
					case 0:
					{
						factionHire:
						ShowPlayerDialog(playerid, DIALOG_FACTION_HIRE, DIALOG_STYLE_INPUT, "Panel frakcji - zaproœ", "Wpisz ID gracza, którego chcesz zaprosiæ", "Dalej", "Wróæ");
						
						return 1;
					}
					// zwolnij pracownika
					case 1:
					{
						factionFire:
						format(string, sizeof(string), "SELECT `PlayerName` FROM `samp_users` WHERE `Faction` = '%d'", gPlayerData[playerid][pFaction]);
						wp_mysql_query(string, FACTION_MEMBERS_DISMISS, playerid, db_con1);
						
						return 1;
					}
					// zmien range
					case 2:
					{
						factionRank:
						format(string, sizeof(string), "SELECT `PlayerName` , `Rank` FROM `samp_users` WHERE `Faction` = '%d'", gPlayerData[playerid][pFaction]);
						wp_mysql_query(string, FACTION_MEMBERS_RANK, playerid, db_con1);
						
						return 1;
					}
					// zmien skin
					case 3:
					{
						factionSkin:
						
						format(string, sizeof(string), "1. %s - %d", DynamicFactions[gPlayerData[playerid][pFaction]][fRank1], DynamicFactions[gPlayerData[playerid][pFaction]][fSkin1]);
						if(DynamicFactions[gPlayerData[playerid][pFaction]][fRankAmount] >= 2)
						{
							format(string, sizeof(string), "%s\n2. %s - %d", string, DynamicFactions[gPlayerData[playerid][pFaction]][fRank2], DynamicFactions[gPlayerData[playerid][pFaction]][fSkin2]);
						}
						if(DynamicFactions[gPlayerData[playerid][pFaction]][fRankAmount] >= 3)
						{
							format(string, sizeof(string), "%s\n3. %s - %d", string, DynamicFactions[gPlayerData[playerid][pFaction]][fRank3], DynamicFactions[gPlayerData[playerid][pFaction]][fSkin3]);
						}
						if(DynamicFactions[gPlayerData[playerid][pFaction]][fRankAmount] >= 4)
						{
							format(string, sizeof(string), "%s\n4. %s - %d", string, DynamicFactions[gPlayerData[playerid][pFaction]][fRank4], DynamicFactions[gPlayerData[playerid][pFaction]][fSkin4]);
						}
						if(DynamicFactions[gPlayerData[playerid][pFaction]][fRankAmount] >= 5)
						{
							format(string, sizeof(string), "%s\n5. %s - %d", string, DynamicFactions[gPlayerData[playerid][pFaction]][fRank5], DynamicFactions[gPlayerData[playerid][pFaction]][fSkin5]);
						}
						if(DynamicFactions[gPlayerData[playerid][pFaction]][fRankAmount] >= 6)
						{
							format(string, sizeof(string), "%s\n6. %s - %d", string, DynamicFactions[gPlayerData[playerid][pFaction]][fRank6], DynamicFactions[gPlayerData[playerid][pFaction]][fSkin6]);
						}
						if(DynamicFactions[gPlayerData[playerid][pFaction]][fRankAmount] >= 7)
						{
							format(string, sizeof(string), "%s\n7. %s - %d", string, DynamicFactions[gPlayerData[playerid][pFaction]][fRank7], DynamicFactions[gPlayerData[playerid][pFaction]][fSkin7]);
						}
						if(DynamicFactions[gPlayerData[playerid][pFaction]][fRankAmount] >= 8)
						{
							format(string, sizeof(string), "%s\n8. %s - %d", string, DynamicFactions[gPlayerData[playerid][pFaction]][fRank8], DynamicFactions[gPlayerData[playerid][pFaction]][fSkin8]);
						}
						if(DynamicFactions[gPlayerData[playerid][pFaction]][fRankAmount] >= 9)
						{
							format(string, sizeof(string), "%s\n9. %s - %d", string, DynamicFactions[gPlayerData[playerid][pFaction]][fRank9], DynamicFactions[gPlayerData[playerid][pFaction]][fSkin9]);
						}
						if(DynamicFactions[gPlayerData[playerid][pFaction]][fRankAmount] >= 10)
						{
							format(string, sizeof(string), "%s\n10. %s - %d", string, DynamicFactions[gPlayerData[playerid][pFaction]][fRank10], DynamicFactions[gPlayerData[playerid][pFaction]][fSkin10]);
						}
						
						ShowPlayerDialog(playerid, DIALOG_FACTION_SKIN_SELECT, DIALOG_STYLE_LIST, "Panel frakcji - skiny", string, "Wybierz", "Zamknij");
						return 1;
					}
					// wynagrodzenie
					case 4:
					{
						factionPayments:
						new payRankId;
						new idFound = 0;
						
						for(payRankId = 0; payRankId < sizeof(PayRank); payRankId++)
						{
							if(PayRank[payRankId][FactionID] == gPlayerData[playerid][pFaction])
							{
								idFound = 1;
								break;
							}
						}
						
						if(idFound)
						{
							format(string, sizeof(string), "1. %s - %d", DynamicFactions[gPlayerData[playerid][pFaction]][fRank1], PayRank[payRankId][Rank1]);
							if(DynamicFactions[gPlayerData[playerid][pFaction]][fRankAmount] >= 2)
							{
								format(string, sizeof(string), "%s\n2. %s - %d", string, DynamicFactions[gPlayerData[playerid][pFaction]][fRank2], PayRank[payRankId][Rank2]);
							}
							if(DynamicFactions[gPlayerData[playerid][pFaction]][fRankAmount] >= 3)
							{
								format(string, sizeof(string), "%s\n3. %s - %d", string, DynamicFactions[gPlayerData[playerid][pFaction]][fRank3], PayRank[payRankId][Rank2]);
							}
							if(DynamicFactions[gPlayerData[playerid][pFaction]][fRankAmount] >= 4)
							{
								format(string, sizeof(string), "%s\n4. %s - %d", string, DynamicFactions[gPlayerData[playerid][pFaction]][fRank4], PayRank[payRankId][Rank2]);
							}
							if(DynamicFactions[gPlayerData[playerid][pFaction]][fRankAmount] >= 5)
							{
								format(string, sizeof(string), "%s\n5. %s - %d", string, DynamicFactions[gPlayerData[playerid][pFaction]][fRank5], PayRank[payRankId][Rank2]);
							}
							if(DynamicFactions[gPlayerData[playerid][pFaction]][fRankAmount] >= 6)
							{
								format(string, sizeof(string), "%s\n6. %s - %d", string, DynamicFactions[gPlayerData[playerid][pFaction]][fRank6], PayRank[payRankId][Rank2]);
							}
							if(DynamicFactions[gPlayerData[playerid][pFaction]][fRankAmount] >= 7)
							{
								format(string, sizeof(string), "%s\n7. %s - %d", string, DynamicFactions[gPlayerData[playerid][pFaction]][fRank7], PayRank[payRankId][Rank2]);
							}
							if(DynamicFactions[gPlayerData[playerid][pFaction]][fRankAmount] >= 8)
							{
								format(string, sizeof(string), "%s\n8. %s - %d", string, DynamicFactions[gPlayerData[playerid][pFaction]][fRank8], PayRank[payRankId][Rank2]);
							}
							if(DynamicFactions[gPlayerData[playerid][pFaction]][fRankAmount] >= 9)
							{
								format(string, sizeof(string), "%s\n9. %s - %d", string, DynamicFactions[gPlayerData[playerid][pFaction]][fRank9], PayRank[payRankId][Rank2]);
							}
							if(DynamicFactions[gPlayerData[playerid][pFaction]][fRankAmount] >= 10)
							{
								format(string, sizeof(string), "%s\n10. %s - %d", string, DynamicFactions[gPlayerData[playerid][pFaction]][fRank10], PayRank[payRankId][Rank2]);
							}
							
							ShowPlayerDialog(playerid, DIALOG_FACTION_PAYMENT, DIALOG_STYLE_LIST, "Panel frakcji - wynagrodzenie", string, "Wybierz", "Zamknij");
							return 1;
						}
						
						ShowPlayerDialog(playerid, DIALOG_FACTION_PAYMENT_MSG, DIALOG_STYLE_LIST, "Panel frakcji - wynagrodzenie", "Wyst¹pi³ problem - skontaktuj siê z administratorem", "Wybierz", "Zamknij");
						return 1;
					}
				}
			}
		}
		case DIALOG_FACTION_SKIN_SELECT:
		{
			if(response)
			{
				gListItem[playerid] = listitem+1;
				
				switch(gListItem[playerid])
				{
					case 1: { format(string, sizeof(string), "Wpisz ID skina który chcesz przypisaæ randze %s", DynamicFactions[gPlayerData[playerid][pFaction]][fRank1]); }
					case 2: { format(string, sizeof(string), "Wpisz ID skina który chcesz przypisaæ randze %s", DynamicFactions[gPlayerData[playerid][pFaction]][fRank1]); }
					case 3: { format(string, sizeof(string), "Wpisz ID skina który chcesz przypisaæ randze %s", DynamicFactions[gPlayerData[playerid][pFaction]][fRank1]); }
					case 4: { format(string, sizeof(string), "Wpisz ID skina który chcesz przypisaæ randze %s", DynamicFactions[gPlayerData[playerid][pFaction]][fRank1]); }
					case 5: { format(string, sizeof(string), "Wpisz ID skina który chcesz przypisaæ randze %s", DynamicFactions[gPlayerData[playerid][pFaction]][fRank1]); } 
					case 6: { format(string, sizeof(string), "Wpisz ID skina który chcesz przypisaæ randze %s", DynamicFactions[gPlayerData[playerid][pFaction]][fRank1]); }
					case 7: { format(string, sizeof(string), "Wpisz ID skina który chcesz przypisaæ randze %s", DynamicFactions[gPlayerData[playerid][pFaction]][fRank1]); }
					case 8: { format(string, sizeof(string), "Wpisz ID skina który chcesz przypisaæ randze %s", DynamicFactions[gPlayerData[playerid][pFaction]][fRank1]); }
					case 9: { format(string, sizeof(string), "Wpisz ID skina który chcesz przypisaæ randze %s", DynamicFactions[gPlayerData[playerid][pFaction]][fRank1]); }
					case 10: { format(string, sizeof(string), "Wpisz ID skina który chcesz przypisaæ randze %s", DynamicFactions[gPlayerData[playerid][pFaction]][fRank1]); }
				}
				ShowPlayerDialog(playerid, DIALOG_FACTION_SKIN_INPUT, DIALOG_STYLE_INPUT, "Panel frakcji - skiny", string, "Zatwierdz", "Wróæ");
			}
		}
		case DIALOG_FACTION_SKIN_INPUT:
		{
			if(response)
			{
				if(!IsNumeric(inputtext))
				{
					ShowPlayerDialog(playerid, DIALOG_FACTION_SKIN_INPUT, DIALOG_STYLE_INPUT, "Panel frakcji - skiny", "Niepoprawna wartoœæ.\nSpróbuj ponownie", "ZatwierdŸ", "Wróæ");
					return 1;
				}
				
				if(strval(inputtext) <= 0)
				{
					ShowPlayerDialog(playerid, DIALOG_FACTION_SKIN_INPUT, DIALOG_STYLE_INPUT, "Panel frakcji - skiny", "Niepoprawna wartoœæ.\nSpróbuj ponownie", "ZatwierdŸ", "Wróæ");
					return 1;
				}
				
				switch(gListItem[playerid])
				{
					case 1:
					{
						DynamicFactions[gPlayerData[playerid][pFaction]][fSkin1] = strval(inputtext);
						SaveFData(gPlayerData[playerid][pFaction], "Skin1");
					}
					case 2:
					{
						DynamicFactions[gPlayerData[playerid][pFaction]][fSkin2] = strval(inputtext);
						SaveFData(gPlayerData[playerid][pFaction], "Skin2");
					}
					case 3:
					{
						DynamicFactions[gPlayerData[playerid][pFaction]][fSkin3] = strval(inputtext);
						SaveFData(gPlayerData[playerid][pFaction], "Skin3");
					}
					case 4:
					{
						DynamicFactions[gPlayerData[playerid][pFaction]][fSkin4] = strval(inputtext);
						SaveFData(gPlayerData[playerid][pFaction], "Skin4");
					}
					case 5:
					{
						DynamicFactions[gPlayerData[playerid][pFaction]][fSkin5] = strval(inputtext);
						SaveFData(gPlayerData[playerid][pFaction], "Skin5");
					}
					case 6:
					{
						DynamicFactions[gPlayerData[playerid][pFaction]][fSkin6] = strval(inputtext);
						SaveFData(gPlayerData[playerid][pFaction], "Skin6");
					}
					case 7:
					{
						DynamicFactions[gPlayerData[playerid][pFaction]][fSkin7] = strval(inputtext);
						SaveFData(gPlayerData[playerid][pFaction], "Skin7");
					}
					case 8:
					{
						DynamicFactions[gPlayerData[playerid][pFaction]][fSkin8] = strval(inputtext);
						SaveFData(gPlayerData[playerid][pFaction], "Skin8");
					}
					case 9:
					{
						DynamicFactions[gPlayerData[playerid][pFaction]][fSkin9] = strval(inputtext);
						SaveFData(gPlayerData[playerid][pFaction], "Skin9");
					}
					case 10:
					{
						DynamicFactions[gPlayerData[playerid][pFaction]][fSkin10] = strval(inputtext);
						SaveFData(gPlayerData[playerid][pFaction], "Skin10");
					}
				}
				
				ShowPlayerDialog(playerid, DIALOG_FACTION_SKIN_MSG, DIALOG_STYLE_MSGBOX, "Panel frakcji - skiny", "Zmiany zosta³y zapisane", "Wróæ", "Zamknij");
				return 1;
			}
			else
			{
				goto factionSkin;
			}
		}
		case DIALOG_FACTION_SKIN_MSG:
		{
			if(response)
			{
				goto factionSkin;
			}
		}
		case DIALOG_FACTION_PAYMENT:
		{
			if(response)
			{
				gListItem[playerid] = listitem+1;
				
				ShowPlayerDialog(playerid, DIALOG_FACTION_PAYMENT_ENTER, DIALOG_STYLE_INPUT, "Panel frakcji - wynagrodzenie", "Podaj wysokoœæ wyp³aty", "ZatwierdŸ", "Zamknij");
				return 1;
			}
		}
		case DIALOG_FACTION_PAYMENT_ENTER:
		{
			if(response)
			{
				if(!IsNumeric(inputtext))
				{
					ShowPlayerDialog(playerid, DIALOG_FACTION_PAYMENT_ENTER, DIALOG_STYLE_INPUT, "Panel frakcji - wynagrodzenie", "Niepoprawna wartoœæ.\nSpróbuj ponownie:", "ZatwierdŸ", "Zamknij");
					return 1;
				}
				
				if(strval(inputtext) < 0)
				{
					ShowPlayerDialog(playerid, DIALOG_FACTION_PAYMENT_ENTER, DIALOG_STYLE_INPUT, "Panel frakcji - wynagrodzenie", "Niepoprawna wartoœæ.\nSpróbuj ponownie:", "ZatwierdŸ", "Zamknij");
					return 1;
				}
				
				new payRankId;
				new idFound = 0;
				for(payRankId = 0; payRankId < sizeof(PayRank); payRankId++)
				{
					if(PayRank[payRankId][FactionID] == gPlayerData[playerid][pFaction])
					{
						idFound = 1;
						break;
					}
				}
				if(idFound)
				{
					switch(gListItem[playerid])
					{
						case 1:
						{
							PayRank[gPlayerData[playerid][pFaction]][Rank1] = strval(inputtext);
						}
						case 2:
						{
							PayRank[gPlayerData[playerid][pFaction]][Rank2] = strval(inputtext);
						}
						case 3:
						{
							PayRank[gPlayerData[playerid][pFaction]][Rank3] = strval(inputtext);
						}
						case 4:
						{
							PayRank[gPlayerData[playerid][pFaction]][Rank4] = strval(inputtext);
						}
						case 5:
						{
							PayRank[gPlayerData[playerid][pFaction]][Rank5] = strval(inputtext);
						}
						case 6:
						{
							PayRank[gPlayerData[playerid][pFaction]][Rank6] = strval(inputtext);
						}
						case 7:
						{
							PayRank[gPlayerData[playerid][pFaction]][Rank7] = strval(inputtext);
						}
						case 8:
						{
							PayRank[gPlayerData[playerid][pFaction]][Rank8] = strval(inputtext);
						}
						case 9:
						{
							PayRank[gPlayerData[playerid][pFaction]][Rank9] = strval(inputtext);
						}
						case 10:
						{
							PayRank[gPlayerData[playerid][pFaction]][Rank10] = strval(inputtext);
						}
					}
					
					ShowPlayerDialog(playerid, DIALOG_FACTION_PAYMENT_MSG, DIALOG_STYLE_INPUT, "Panel frakcji - wynagrodzenie", "Zmieni³eœ wartoœæ wyp³aty.", "Wróæ", "Zamknij");
					return 1;
				}
				
				ShowPlayerDialog(playerid, DIALOG_FACTION_PAYMENT_MSG, DIALOG_STYLE_INPUT, "Panel frakcji - wynagrodzenie", "Wyst¹pi³ problem - skontaktuj siê z administratorem.", "Wróæ", "Zamknij");
				return 1;
			}
		}
		case DIALOG_FACTION_PAYMENT_MSG:
		{
			if(response)
			{
				goto factionPayments;
			}
		}
		case DIALOG_FACTION_HIRE:
		{
			if(response)
			{
				if(!IsNumeric(inputtext))
				{
					ShowPlayerDialog(playerid, DIALOG_FACTION_HIRE_MSG, DIALOG_STYLE_MSGBOX, "Panel frakcji - zatrudnij", "Niepoprawna wartoœæ.\nSpróbuj jeszcze raz.", "Wróæ", "");
					return 1;
				}
				
				if(strval(inputtext) < 0)
				{
					ShowPlayerDialog(playerid, DIALOG_FACTION_HIRE_MSG, DIALOG_STYLE_MSGBOX, "Panel frakcji - zatrudnij", "Niepoprawna wartoœæ.\nSpróbuj jeszcze raz.", "Wróæ", "");
					return 1;
				}
				
				if(strval(inputtext) >= CUSTOM_MAX_PLAYERS)
				{
					ShowPlayerDialog(playerid, DIALOG_FACTION_HIRE_MSG, DIALOG_STYLE_MSGBOX, "Panel frakcji - zatrudnij", "Niepoprawna wartoœæ.\nSpróbuj jeszcze raz.", "Wróæ", "");
					return 1;
				}
				
				new hiringPlayerId = strval(inputtext);
				
				if(!gPlayerLogged[hiringPlayerId])
				{
					ShowPlayerDialog(playerid, DIALOG_FACTION_HIRE_MSG, DIALOG_STYLE_MSGBOX, "Panel frakcji - zatrudnij", "Pod tym ID nie ma zalogowanego gracza.", "Wróæ", "");
					return 1;
				}
				
				FactionRequest[hiringPlayerId] = gPlayerData[playerid][pFaction];
				
				format(string, sizeof(string), "Zosta³eœ zaproszony do %s przez %s (wpisz /akceptuj frakcje) aby do³¹czyæ", DynamicFactions[gPlayerData[playerid][pFaction]][Name], GetPlayerNameEx(playerid));				
				SendClientMessage(hiringPlayerId, COLOR_LIGHTBLUE, string);
				
				format(string, sizeof(string), "Wys³a³eœ propozycje zatrudnienia do %s.", GetPlayerNameEx(hiringPlayerId));
				ShowPlayerDialog(playerid, DIALOG_FACTION_HIRE_MSG, DIALOG_STYLE_MSGBOX, "Panel firmy - zaproœ", string, "Wróæ", "");
			}
		}
		case DIALOG_FACTION_HIRE_MSG:
		{
			goto factionHire;
		}
		case DIALOG_FACTION_DISMISS:
		{
			if(response)
			{
				if(strcmp(gPlayerData[playerid][pName], gFactionMembersToFire[playerid][listitem], true) == 0)
				{
					ShowPlayerDialog(playerid, DIALOG_FACTION_DISMISS_MSG, DIALOG_STYLE_MSGBOX, "Panel frakcji - wyproœ", "Nie mo¿esz sam siebie wyprosiæ.", "Wróæ", "");
					return 1;
				}
				
				foreach(Player, i)
				{
					if(!gPlayerLogged[i])
					{
						continue;
					}
					
					if(strcmp(gPlayerData[i][pName], gFactionMembersToFire[playerid][listitem], false) == 0)
					{
						format(string,sizeof(string), "Zosta³eœ wyproszony z frakcji %s", DynamicFactions[gPlayerData[playerid][pFaction]][Name]);
						SendClientMessage(i, COLOR_ORANGE, string);
						
						gPlayerData[i][pFaction] = 255;
						gPlayerData[i][pRank] = 0;

						SavePlayerData(i, "Faction");
						SavePlayerData(i, "Rank");
						
						format(string, sizeof(string), "Wyprosi³eœ %s z frakcji.", GetPlayerNameEx(playerid));
						ShowPlayerDialog(playerid, DIALOG_FACTION_DISMISS_MSG, DIALOG_STYLE_MSGBOX, "Panel frakcji - wyproœ", string, "Wróæ", "");

						format(string, sizeof(string), "[FRAKCJA:] %s zosta³ wyproszony z frakcji przez %s.", GetPlayerNameEx(i),GetPlayerNameEx(playerid));
						SendFactionMessage(gPlayerData[playerid][pFaction], COLOR_FACTIONCHAT, string);
						
						return 1;
					}
				}
				
				UpdatePlayerDataByName(gFactionMembersToFire[playerid][listitem], "Faction", 255);
				
				format(string, sizeof(string), "Wyprosi³eœ %s z frakcji.", gFactionMembersToFire[playerid][listitem]);
				ShowPlayerDialog(playerid, DIALOG_FACTION_DISMISS_MSG, DIALOG_STYLE_MSGBOX, "Panel frakcji - wyproœ", string, "Wróæ", "");
			}
		}
		case DIALOG_FACTION_DISMISS_MSG:
		{
			goto factionFire;
		}
		case DIALOG_FACTION_RANK:
		{
			if(response)
			{
				if(strcmp(gPlayerData[playerid][pName], gFactionMembersToFire[playerid][listitem], true) == 0)
				{
					ShowPlayerDialog(playerid, DIALOG_FACTION_RANK_MSG, DIALOG_STYLE_MSGBOX, "Panel frakcji - wyproœ", "Nie mo¿esz zmieniæ swojej rangi.", "Wróæ", "");
					return 1;
				}
				
				gListItem[playerid] = listitem;
				
				format(string, sizeof(string), "1. %s", DynamicFactions[gPlayerData[playerid][pFaction]][fRank1]);
				if(DynamicFactions[gPlayerData[playerid][pFaction]][fRankAmount] >= 2)
				{
					format(string, sizeof(string), "%s\n2. %s", string, DynamicFactions[gPlayerData[playerid][pFaction]][fRank2]);
				}
				if(DynamicFactions[gPlayerData[playerid][pFaction]][fRankAmount] >= 3)
				{
					format(string, sizeof(string), "%s\n3. %s", string, DynamicFactions[gPlayerData[playerid][pFaction]][fRank3]);
				}
				if(DynamicFactions[gPlayerData[playerid][pFaction]][fRankAmount] >= 4)
				{
					format(string, sizeof(string), "%s\n4. %s", string, DynamicFactions[gPlayerData[playerid][pFaction]][fRank4]);
				}
				if(DynamicFactions[gPlayerData[playerid][pFaction]][fRankAmount] >= 5)
				{
					format(string, sizeof(string), "%s\n5. %s", string, DynamicFactions[gPlayerData[playerid][pFaction]][fRank5]);
				}
				if(DynamicFactions[gPlayerData[playerid][pFaction]][fRankAmount] >= 6)
				{
					format(string, sizeof(string), "%s\n6. %s", string, DynamicFactions[gPlayerData[playerid][pFaction]][fRank6]);
				}
				if(DynamicFactions[gPlayerData[playerid][pFaction]][fRankAmount] >= 7)
				{
					format(string, sizeof(string), "%s\n7. %s", string, DynamicFactions[gPlayerData[playerid][pFaction]][fRank7]);
				}
				if(DynamicFactions[gPlayerData[playerid][pFaction]][fRankAmount] >= 8)
				{
					format(string, sizeof(string), "%s\n8. %s", string, DynamicFactions[gPlayerData[playerid][pFaction]][fRank8]);
				}
				if(DynamicFactions[gPlayerData[playerid][pFaction]][fRankAmount] >= 9)
				{
					format(string, sizeof(string), "%s\n9. %s", string, DynamicFactions[gPlayerData[playerid][pFaction]][fRank9]);
				}
				if(DynamicFactions[gPlayerData[playerid][pFaction]][fRankAmount] >= 10)
				{
					format(string, sizeof(string), "%s\n10. %s", string, DynamicFactions[gPlayerData[playerid][pFaction]][fRank10]);
				}
				
				ShowPlayerDialog(playerid, DIALOG_FACTION_RANK_SELECT, DIALOG_STYLE_LIST, "Panel frakcji - wybierz range", string, "Wybierz", "Zamknij");
				
				return 1;
			}
		}
		case DIALOG_FACTION_RANK_SELECT:
		{
			if(response)
			{
				foreach(Player, i)
				{
					if(strcmp(gPlayerData[i][pName], gFactionMembersToFire[playerid][gListItem[playerid]], false) == 0)
					{
						new rank[35];
						switch(listitem+1)
						{
							case 1:
							{
								format(rank, sizeof(rank), DynamicFactions[gPlayerData[playerid][pFaction]][fRank1]);
							}
							case 2:
							{
								format(rank, sizeof(rank), DynamicFactions[gPlayerData[playerid][pFaction]][fRank2]);
							}
							case 3:
							{
								format(rank, sizeof(rank), DynamicFactions[gPlayerData[playerid][pFaction]][fRank3]);
							}
							case 4:
							{
								format(rank, sizeof(rank), DynamicFactions[gPlayerData[playerid][pFaction]][fRank4]);
							}
							case 5:
							{
								format(rank, sizeof(rank), DynamicFactions[gPlayerData[playerid][pFaction]][fRank5]);
							}
							case 6:
							{
								format(rank, sizeof(rank), DynamicFactions[gPlayerData[playerid][pFaction]][fRank6]);
							}
							case 7:
							{
								format(rank, sizeof(rank), DynamicFactions[gPlayerData[playerid][pFaction]][fRank7]);
							}
							case 8:
							{
								format(rank, sizeof(rank), DynamicFactions[gPlayerData[playerid][pFaction]][fRank8]);
							}
							case 9:
							{
								format(rank, sizeof(rank), DynamicFactions[gPlayerData[playerid][pFaction]][fRank9]);
							}
							case 10:
							{
								format(rank, sizeof(rank), DynamicFactions[gPlayerData[playerid][pFaction]][fRank10]);
							}
						}
							
						format(string,sizeof(string), "Zosta³a ci przydzielona nowa ranga: %s", rank);
						SendClientMessage(i, COLOR_FACTIONCHAT, string);
						
						gPlayerData[i][pRank] = listitem+1;
						SavePlayerData(i, "Rank");
						
						format(string, sizeof(string), "Zmieni³eœ range %s.", GetPlayerNameEx(i));
						ShowPlayerDialog(playerid, DIALOG_FACTION_DISMISS_MSG, DIALOG_STYLE_MSGBOX, "Panel frakcji - ranga", string, "Wróæ", "");
						
						return 1;
					}
				}
				
				UpdatePlayerDataByName(gFactionMembersToFire[playerid][gListItem[playerid]], "Rank", listitem+1);
				
				format(string, sizeof(string), "Zmieni³eœ range %s.", gFactionMembersToFire[playerid][gListItem[playerid]]);
				ShowPlayerDialog(playerid, DIALOG_FACTION_RANK_MSG, DIALOG_STYLE_MSGBOX, "Panel frakcji - ranga", string, "Wróæ", "");
			}
		}
		case DIALOG_FACTION_RANK_MSG:
		{
			goto factionRank;
		}
		case DIALOG_COMPANY_HIRE:
		{
			if(response)
			{
				if(!IsNumeric(inputtext))
				{
					ShowPlayerDialog(playerid, DIALOG_COMPANY_HIRE_MSG, DIALOG_STYLE_MSGBOX, "Panel firmy - zatrudnij", "Niepoprawna wartoœæ.\nSpróbuj jeszcze raz.", "Wróæ", "");
					return 1;
				}
				
				if(strval(inputtext) < 0)
				{
					ShowPlayerDialog(playerid, DIALOG_COMPANY_HIRE_MSG, DIALOG_STYLE_MSGBOX, "Panel firmy - zatrudnij", "Niepoprawna wartoœæ.\nSpróbuj jeszcze raz.", "Wróæ", "");
					return 1;
				}
				
				if(strval(inputtext) >= CUSTOM_MAX_PLAYERS)
				{
					ShowPlayerDialog(playerid, DIALOG_COMPANY_HIRE_MSG, DIALOG_STYLE_MSGBOX, "Panel firmy - zatrudnij", "Niepoprawna wartoœæ.\nSpróbuj jeszcze raz.", "Wróæ", "");
					return 1;
				}
				
				new hiringPlayerId = strval(inputtext);
				
				if(!gPlayerLogged[hiringPlayerId])
				{
					ShowPlayerDialog(playerid, DIALOG_COMPANY_HIRE_MSG, DIALOG_STYLE_MSGBOX, "Panel firmy - zatrudnij", "Pod tym ID nie ma zalogowanego gracza.", "Wróæ", "");
					return 1;
				}
				
				CompanyRequest[hiringPlayerId] = gPlayerData[playerid][pFaction2];
				
				format(string, sizeof(string), "Zosta³eœ zaproszony do %s przez %s (wpisz /akceptuj firme) aby do³¹czyæ", DynamicFactions[gPlayerData[playerid][pFaction2]][Name], GetPlayerNameEx(playerid));				
				SendClientMessage(hiringPlayerId, COLOR_LIGHTBLUE, string);
				
				format(string, sizeof(string), "Wys³a³eœ propozycje zatrudnienia do %s.", GetPlayerNameEx(hiringPlayerId));
				ShowPlayerDialog(playerid, DIALOG_COMPANY_HIRE_MSG, DIALOG_STYLE_MSGBOX, "Panel firmy - zatrudnij", string, "Wróæ", "");
			}
		}
		case DIALOG_COMPANY_HIRE_MSG:
		{
			goto companyHire;
		}
		case DIALOG_COMPANY_DISMISS:
		{
			if(response)
			{
				if(strcmp(gPlayerData[playerid][pName], gCompanyMembersToFire[playerid][listitem], true) == 0)
				{
					ShowPlayerDialog(playerid, DIALOG_COMPANY_DISMISS_MSG, DIALOG_STYLE_MSGBOX, "Panel firmy - zwolnij", "Nie mo¿esz sam siebie zwolniæ", "Wróæ", "");
					return 1;
				}
				
				foreach(Player, i)
				{
					if(strcmp(gPlayerData[i][pName], gCompanyMembersToFire[playerid][listitem], true) == 0)
					{
						format(string,sizeof(string), "Zosta³eœ zwolniony z firmy %s", DynamicFactions[gPlayerData[playerid][pFaction2]][Name]);
						SendClientMessage(i, COLOR_ORANGE, string);
						
						gPlayerData[i][pFaction2] = 255;
						gPlayerData[i][pRank2] = 0;

						SavePlayerData(i, "Faction2");
						SavePlayerData(i, "Rank2");
						
						format(string, sizeof(string), "Wyprosi³eœ %s z firmy", GetPlayerNameEx(playerid));
						ShowPlayerDialog(playerid, DIALOG_COMPANY_DISMISS_MSG, DIALOG_STYLE_MSGBOX, "Panel firmy - zwolnij", string, "Wróæ", "");

						format(string, sizeof(string), "[FRAKCJA:] %s zosta³ wyproszony z frakcji przez %s.",GetPlayerNameEx(i),GetPlayerNameEx(playerid));
						SendFactionMessage(gPlayerData[playerid][pFaction], COLOR_FACTIONCHAT, string);
						
						return 1;
					}
				}
					
				UpdatePlayerDataByName(gCompanyMembersToFire[playerid][listitem], "Faction2", 255);
				
				format(string, sizeof(string), "Wyprosi³eœ %s z firmy", gCompanyMembersToFire[playerid][listitem]);
				ShowPlayerDialog(playerid, DIALOG_COMPANY_DISMISS_MSG, DIALOG_STYLE_MSGBOX, "Panel firmy - zwolnij", string, "Wróæ", "");
			}
		}
		case DIALOG_COMPANY_DISMISS_MSG:
		{
			goto companyFire;
		}
		case DIALOG_COMPANY_PAYMENT_MSG:
		{
			goto payments;
		}
		case DIALOG_COMPANY_PAYMENT:
		{
			if(response)
			{
				if(!IsNumeric(inputtext))
				{
					ShowPlayerDialog(playerid, DIALOG_COMPANY_PAYMENT_MSG, DIALOG_STYLE_MSGBOX, "Informacja", "Niepoprawna wartoœæ. Spróbuj ponownie", "Wróæ", "Zamknij");
					return 1;
				}
				
				if(strval(inputtext) > 5000)
				{
					ShowPlayerDialog(playerid, DIALOG_COMPANY_PAYMENT_MSG, DIALOG_STYLE_MSGBOX, "Informacja", "Niepoprawna wartoœæ. Spróbuj ponownie", "Wróæ", "Zamknij");
					return 1;
				}
				
				if(strval(inputtext) <= 0)
				{
					ShowPlayerDialog(playerid, DIALOG_COMPANY_PAYMENT_MSG, DIALOG_STYLE_MSGBOX, "Informacja", "Niepoprawna wartoœæ. Spróbuj ponownie", "Wróæ", "Zamknij");
					return 1;
				}
				
				PayRank[gPlayerData[playerid][pFaction2]][Rank2] = strval(inputtext);

				SavePayRank();
				
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Wysokoœæ wyp³aty dla pracowników zosta³a zmieniona", "Zamknij", "");
			}
			else
			{
				return 1;
			}
		}
		case DIALOG_OBJECT_TXT:
		{
			gPlayerVars[playerid][mEditObj] = strval(inputtext);
			SetDynamicObjectMaterialText(gPlayerVars[playerid][mEditObj], 2, "\n\nLinia 1 - potrzebujesz mechanika ? dzwon 666 154 123|Nie potrzebu", 140, "Arial", 20, 0, 0xFFFFFFFF, 1, 1);
			return 1;
		}
		case DIALOG_ENGINE_REPAIR_CONFIRM:
		{
			if(response)
			{
				RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
				
				gPlayerVars[playerid][mRepairProgress] = 15;
				gPlayerVars[playerid][mRepairingItemId] = 175;
				gPlayerVars[playerid][mRepairingItemType] = 1;
				
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Naprawa w toku...", "Zamknij", "");
				
				GetPlayerFacingAngle(playerid, gPlayerData[playerid][pCrashAngle]);
				SetPlayerFacingAngle(playerid, gPlayerData[playerid][pCrashAngle]+180.0);
				
				ApplyAnimation(playerid, "CAR", "Fixn_Car_Loop", 4.1, 1, 0, 0, 1, 0, 1);
				
				
				return 1;
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Anulowa³eœ naprawe silnika.", "Wróæ", "");
				
				return 1;
			}
		}
		case DIALOG_SELECT_WHEEL_TO_FIX:
		{
			if(response)
			{
				gPlayerVars[playerid][mWheelToChange] = listitem;
				ShowPlayerDialog(playerid, DIALOG_WHEEL_REPAIR_CONFIRM, DIALOG_STYLE_MSGBOX, "Informacja", "Naprawa zajmie 15 sekund i nie mo¿na jej przerwaæ.\nCzy chcesz kontunuuowaæ?", "Tak", "Anuluj");
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Anulowa³eœ wymiane ko³a.", "Wróæ", "");
				return 1;
			}
		}
		case DIALOG_WHEEL_REPAIR_CONFIRM:
		{
			if(response)
			{
				RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
				
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Naprawa w toku...", "Zamknij", "");
				
				gPlayerVars[playerid][mRepairProgress] = 15;
				gPlayerVars[playerid][mRepairingItemId] = 176;
				gPlayerVars[playerid][mRepairingItemType] = 1;
				
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 1, 0, 0, 1, 0, 1);
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Anulowa³eœ wymiane ko³a.", "Wróæ", "");
				return 1;
			}
		}
		case DIALOG_BULB_CHANGE_SELECT:
		{
			if(response)
			{
				gPlayerVars[playerid][mBulbToChange] = listitem;
				ShowPlayerDialog(playerid, DIALOG_BULB_CHANGE_CONFIRM, DIALOG_STYLE_MSGBOX, "Informacja", "Naprawa zajmie 15 sekund i nie mo¿na jej przerwaæ.\nCzy chcesz kontunuuowaæ?", "Tak", "Anuluj");
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Anulowa³eœ wymiane ¿arówki.", "Wróæ", "");
				return 1;
			}
		}
		case DIALOG_BULB_CHANGE_CONFIRM:
		{
			if(response)
			{
				RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
				
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Naprawa w toku...", "Zamknij", "");
				
				gPlayerVars[playerid][mRepairProgress] = 15;
				gPlayerVars[playerid][mRepairingItemId] = 7;
				gPlayerVars[playerid][mRepairingItemType] = 1;
				
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 1, 0, 0, 1, 0, 1);
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Anulowa³eœ wymiane ¿arówki.", "Wróæ", "");
				return 1;
			}
		}
		case DIALOG_HOOK_ADD_CONFIRM:
		{
			if(response)
			{
				RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
				
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Monta¿ w toku...", "Zamknij", "");
				
				gPlayerVars[playerid][mRepairProgress] = 15;
				gPlayerVars[playerid][mRepairingItemId] = 10;
				gPlayerVars[playerid][mRepairingItemType] = 1;
				
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 1, 0, 0, 1, 0, 1);
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Anulowa³eœ monta¿ haka.", "Wróæ", "");
				return 1;
			}
		}
		case DIALOG_TUNING_ADD_CONFIRM:
		{
			if(response)
			{
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Monta¿ w toku...", "Zamknij", "");
				
				gPlayerVars[playerid][mRepairProgress] = 15;
				gPlayerVars[playerid][mRepairingItemId] = ShowSlotItem(playerid, gSelectedSlot[playerid]);
				gPlayerVars[playerid][mRepairingItemType] = 8;
				
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 1, 0, 0, 1, 0, 1);
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Anulowa³eœ monta¿ haka.", "Wróæ", "");
				return 1;
			}
		}
		case DIALOG_STOCK_ADD_CONFIRM:
		{
			if(response)
			{
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Monta¿ w toku...", "Zamknij", "");
				
				gPlayerVars[playerid][mRepairProgress] = 15;
				gPlayerVars[playerid][mRepairingItemId] = ShowSlotItem(playerid, gSelectedSlot[playerid]);
				gPlayerVars[playerid][mRepairingItemType] = 9;
				
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 1, 0, 0, 1, 0, 1);
				return 1;
			}
			else
			{
			}
		}
		case DIALOG_LPG_ADD_CONFIRM:
		{
			if(response)
			{
				RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
				
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Monta¿ w toku...", "Zamknij", "");
				
				gPlayerVars[playerid][mRepairProgress] = 15;
				gPlayerVars[playerid][mRepairingItemId] = 177;
				gPlayerVars[playerid][mRepairingItemType] = 1;
				
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 1, 0, 0, 1, 0, 1);
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Anulowa³eœ monta¿ gazu.", "Wróæ", "");
				return 1;
			}
		}
		case DIALOG_SELECT_BIZ_INT:
		{
			if(response)
			{
				listitem = strval(inputtext)-1;
				Businesses[gPlayerVars[playerid][mBizIdIntEdit]][BInterior] = listitem+1;
				SaveBizData(gPlayerVars[playerid][mBizIdIntEdit], "Interior");
				if(listitem+1 == 1)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = -794.806396;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = 489.284973;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1376.195;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 1;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 0.458332;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Marcos Bistro.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 2)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 1212.265625;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -25.877540;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1001.089966;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 3;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 181.8332;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Big Spread Ranch Strip Club.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 3)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 362.909484;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -75.193481;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1001.507812;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 10;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 311.5311;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Burger Shot.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 4)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 365.672974;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -10.713200;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1001.869995;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 9;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 0.458332;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Cluckin Bell.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 5)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 372.579650;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -133.515899;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1001.449951;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 5;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 3.834877;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Well Stacked Pizza.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 6)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 377.098999;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -192.439987;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1000.643982;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 17;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 0.458332;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Rusty Brown Dohnuts.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 7)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 460.099976;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -88.428497;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 999.621948;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 4;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 0.458332;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Jays Diner.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 8)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 681.474976;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -451.150970;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = -25.616798;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 1;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 0.458332;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Pump Truck Stop Diner DZIURA W PODLODZE.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 9)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 493.484588;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -24.906007;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1000.671875;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 17;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 356.2913;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Alhambra.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 10)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 502.039733;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -67.637390;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 998.834961;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 11;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 191.93478;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Mistys.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 11)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = -229.289276;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = 1401.314331;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 27.769798;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 18;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 270.3904;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Lil' Probe Inn.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 12)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 204.608230;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -168.851776;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1000.578979;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 14;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 6.87463;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: EXcLusive.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 13)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 207.801361;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -111.258720;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1005.269958;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 15;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 358.414;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Binco.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 14)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 207.054993;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -138.804993;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1003.519958;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 3;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 0.458332;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: ProLaps.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 15)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 203.568298;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -50.662452;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1001.799988;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 1;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 356.82446;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: SubUrban.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 16)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 227.542633;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -8.100092;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1002.259949;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 5;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 88.921981;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Victim.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 17)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 161.205780;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -97.102127;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1001.804687;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 18;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 356.4877;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Zip.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 18)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 1133.523559;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -15.807713;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1000.750000;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 12;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 0.22441;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Small Casino in Redsands West.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 19)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 834.660888;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = 7.240708;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1004.179993;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 3;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 92.031906;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Off Track Betting.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 20)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = -100.083061;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -25.029542;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1000.741943;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 3;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 0.224439;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Sex Shop.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 21)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = -2240.955322;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = 128.451400;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1035.419922;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 6;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 268.416;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Zero's RC Shop.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 22)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 285.404602;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -41.745178;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1001.569946;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 1;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] =357.69436;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Ammunation 1.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 23)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 285.780487;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -86.71318;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1001.539978;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 4;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 351.74093;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Ammunation 2.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 24)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 296.711975;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -112.048240;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1001.569946;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 6;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 358.6343;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Ammunation 3.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 25)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 316.569549;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -170.279464;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 999.661987;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 6;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 2.081076;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Ammunation 4.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 26)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 304.572479;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -142.094192;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1004.062500;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 7;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 94.17852;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Ammunation Shooting Range.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 27)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = -2636.974121;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = 1402.319213;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 906.457947;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 3;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 8.61428;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Jizzys.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 28)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = -25.819719;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -188.238037;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1003.549988;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 17;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 1.72090;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: 24-7 1.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 29)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 5.933865;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -31.750873;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1003.549988;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 10;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 359.527526;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: 24-7 2.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 30)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = -30.683946;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -92.002952;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1003.549988;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 18;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 2.660877;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: 24-7 3.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 31)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = -25.878168;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -141.549636;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1003.549988;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 16;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 352.320;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: 24-7 4.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 32)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = -27.321363;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -31.754938;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1003.549988;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 4;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 356.70745;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: 24-7 5.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 33)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = -27.389696;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -58.260951;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1003.549988;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 6;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 358.27413;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][BizPrice] = 4000000;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: 24-7 6.", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 35)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = -2213.684814;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = 1143.244140;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 173.895568;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 0;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 0.0;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Kibelek", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 36)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = -461.70;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -2016.68;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 24.97;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 1;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 0.0;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Wiejskie Disco", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 37)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 1285.54;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -1652.21;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 13.74;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 0;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 0.458332;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Disco", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 38)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 1003.77;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = 52.20;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 55.42;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 3;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 0.458332;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Sklep Elektrolux", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 39)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 1513.09;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -1576.66;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 24.55;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 0;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 0.458332;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Restauracja", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 40)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 370.46;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -1720.76;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 17.1;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 0;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 0.458332;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Restauracja", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD,string);
				}
				else if(listitem+1 == 41)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 2247.9302;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = 1595.4698;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1018.8124;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 10;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 0.0;
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Sklep komputerowy", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD, string);
				}
				else if(listitem+1 == 42)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 1521.21;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = 1561.55;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1010.85;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 1;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 178.34;				
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Apteka", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD, string);
				}
				else if(listitem+1 == 43)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 1473.91;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = 1291.64;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1010.82;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 1;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 272.94;				
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Moto Shop", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD, string);
				}
				else if(listitem+1 == 44)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 1247.83;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -659.72;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1194.20;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 1;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 176.0;				
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Bar", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD, string);
				}
				else if(listitem+1 == 45)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 1690.93;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -1451.53;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 13.57;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 1;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 178.0;				
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Restauracja/Bar", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD, string);
				}
				else if(listitem+1 == 46)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = -397.14;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = 256.82;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 489.96;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 1;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 360.0;				
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Restauracja", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD, string);
				}
				else if(listitem+1 == 47)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 1646.58;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -1452.09;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 13.67;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 1;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 128.0;				
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: 24/7", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD, string);
				}
				else if(listitem+1 == 48)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 307.07;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = 1824.99;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1598.0;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 1;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 277.0;				
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Sklep meblowy", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD, string);
				}
				else if(listitem+1 == 49)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 973.38;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -1546.3;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 22.18;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 1;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 178.0;				
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Biznes", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD, string);
				}
				else if(listitem+1 == 50)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 1793.43;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -1162.42;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 23.97;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 1;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 253.0;				
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Office", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD, string);
				}
				else if(listitem+1 == 51)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 2512.9;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -1793.54;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 1010.24;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 1;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 89.0;				
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Bar na eventy", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD, string);
				}
				else if(listitem+1 == 52)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 2059.9;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = -1874.94;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = 14.70;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 1;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 93.0;				
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Bar", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD, string);
				}
				else if(listitem+1 == 53)
				{
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitX] = 2900.32;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitY] = 2470.12;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitZ] = -43.91;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitInterior] = 1;
					Businesses[gPlayerVars[playerid][mBizIdIntEdit]][ExitAngle] = 13.0;				
					format(string, sizeof string, "Business gPlayerVars[playerid][mBizIdIntEdit]: %d - Description: Club", gPlayerVars[playerid][mBizIdIntEdit]);
					SendClientMessage(playerid, COLOR_ADMINCMD, string);
				}
				SaveBizData(gPlayerVars[playerid][mBizIdIntEdit], "ExitX");
				SaveBizData(gPlayerVars[playerid][mBizIdIntEdit], "ExitY");
				SaveBizData(gPlayerVars[playerid][mBizIdIntEdit], "ExitZ");
				SaveBizData(gPlayerVars[playerid][mBizIdIntEdit], "ExitInterior");
				SaveBizData(gPlayerVars[playerid][mBizIdIntEdit], "ExitAngle");
				SaveBizData(gPlayerVars[playerid][mBizIdIntEdit], "BizPrice");
				return 1;
			}
			
		}
		case DIALOG_BUY_BUILDING:
		{
			if(response)
			{				
				if(listitem == 0)
				{
					if(gPlayerData[playerid][pFaction] == 255)
					{
						ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Nie jesteœ liderem ¿adnej frakcji.", "Zamknij", "");
						return 1;
					}
					ResetBuildingData(gPlayerVars[playerid][mBuildingBuyId]);
					
					Building[gPlayerVars[playerid][mBuildingBuyId]][FactionOwnerId] = gPlayerData[playerid][pFaction];
					SaveBData(gPlayerVars[playerid][mBuildingBuyId], "FactionOwnerId");
				}
				else if(listitem == 1)
				{
					if(gPlayerData[playerid][pFaction2] == 255)
					{
						ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Nie jesteœ w³aœcicielem ¿adnej firmy.", "Zamknij", "");
						return 1;
					}
					ResetBuildingData(gPlayerVars[playerid][mBuildingBuyId]);
					
					Building[gPlayerVars[playerid][mBuildingBuyId]][FactionOwnerId] = gPlayerData[playerid][pFaction2];
					SaveBData(gPlayerVars[playerid][mBuildingBuyId], "FactionOwnerId");
				}
	
				gPlayerData[playerid][pBank] -= Building[gPlayerVars[playerid][mBuildingBuyId]][Price];
				SavePlayerData(playerid, "Bank");
				
				RefreshBuildingDescription(gPlayerVars[playerid][mBuildingBuyId]);
				
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Kupi³eœ budynek", "Zamknij", "");
				
				return 1;
			}
		}
		case DIALOG_POLICELIGHT_ADD_CONFIRM:
		{
			if(response)
			{
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Monta¿ w toku...", "Zamknij", "");
				
				PlayerActionMessage(playerid, 15.0, "montuje œwiat³a policyjne w pojeŸdzie");
				RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Anulowa³eœ monta¿ gazu.", "Wróæ", "");
				return 1;
			}
		}
		case DIALOG_TAXILIGHT1_ADD_CONFIRM:
		{
			if(response)
			{
				RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
				
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Monta¿ w toku...", "Zamknij", "");
				
				gPlayerVars[playerid][mRepairProgress] = 15;
				gPlayerVars[playerid][mRepairingItemId] = 154;
				gPlayerVars[playerid][mRepairingItemType] = 1;
				
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 1, 0, 0, 1, 0, 1);
				
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Anulowa³eœ monta¿ gazu.", "Wróæ", "");
				return 1;
			}
		}
		case DIALOG_TAXILIGHT2_ADD_CONFIRM:
		{
			if(response)
			{
				RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
				
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Monta¿ w toku...", "Zamknij", "");
				
				gPlayerVars[playerid][mRepairProgress] = 15;
				gPlayerVars[playerid][mRepairingItemId] = 155;
				gPlayerVars[playerid][mRepairingItemType] = 1;
				
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 1, 0, 0, 1, 0, 1);
				
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Anulowa³eœ monta¿ gazu.", "Wróæ", "");
				return 1;
			}
		}
		case DIALOG_TAXILIGHT3_ADD_CONFIRM:
		{
			if(response)
			{
				RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
				
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Monta¿ w toku...", "Zamknij", "");
				
				gPlayerVars[playerid][mRepairProgress] = 15;
				gPlayerVars[playerid][mRepairingItemId] = 156;
				gPlayerVars[playerid][mRepairingItemType] = 1;
				
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 1, 0, 0, 1, 0, 1);
				
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Anulowa³eœ monta¿ gazu.", "Wróæ", "");
				return 1;
			}
		}
		case DIALOG_TAXILIGHT4_ADD_CONFIRM:
		{
			if(response)
			{
				RemovePlayerItemExUsed(playerid, gSelectedSlot[playerid]);
				
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Monta¿ w toku...", "Zamknij", "");
				
				gPlayerVars[playerid][mRepairProgress] = 15;
				gPlayerVars[playerid][mRepairingItemId] = 157;
				gPlayerVars[playerid][mRepairingItemType] = 1;
				
				ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 1, 0, 0, 1, 0, 1);
				
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, "Informacja", "Anulowa³eœ monta¿ gazu.", "Wróæ", "");
				return 1;
			}
		}
		case DIALOG_EVENT_SELECT:
		{
			if(response)
			{
				// Area51 game
				if(listitem == 0)
				{
					if(gEvent1isRunning)
					{
						ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Ten event jest ju¿ uruchomiony.", "Zamknij", "");
						return 1;
					}
					
					gSelectedSlot[playerid] = 1;
					
					ShowPlayerDialog(playerid, DIALOG_EVENT_SELECT_TIME, DIALOG_STYLE_INPUT, "Czas do rozpoczêcia eventu", "Podaj czas jaki gracze bêdê mieli na do¹³¹czenie do eventu (w minutach).", "Dalej", "Zamknij");
				}
				// lowrider
				if(listitem == 1)
				{
					if(gEvent2isRunning)
					{
						ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Ten event jest ju¿ uruchomiony.", "Zamknij", "");
						return 1;
					}
					
					gSelectedSlot[playerid] = 2;
					
					ShowPlayerDialog(playerid, DIALOG_EVENT_SELECT_TIME, DIALOG_STYLE_INPUT, "Czas do rozpoczêcia eventu", "Podaj czas jaki gracze bêdê mieli na do¹³¹czenie do eventu (w minutach).", "Dalej", "Zamknij");
				}
			}
		}
		case DIALOG_EVENT_SELECT_TIME:
		{
			if(response)
			{
				if(!IsNumeric(inputtext))
				{
					ShowPlayerDialog(playerid, DIALOG_EVENT_SELECT_TIME, DIALOG_STYLE_INPUT, "Czas do rozpoczêcia eventu", "Poda³eœ nieprawid³ow¹ wartoœæ.\nSpróbuj ponownie.", "Dalej", "Zamknij");
					return 1;
				}
				
				switch(gSelectedSlot[playerid])
				{
					case 1:
					{
						if(strval(inputtext) > 0)
						{
							gEvent1timeToJoin = floatround(strval(inputtext))*60;
							
							ShowPlayerDialog(playerid, DIALOG_EVENT_SELECT_PRIZE, DIALOG_STYLE_INPUT, "Nagroda", "Podaj wysokoœæ nagrody.", "Dalej", "Zamknij");
							
							return 1;
						}
					}
					case 2:
					{
						if(strval(inputtext) > 0)
						{
							gEvent2timeToJoin = floatround(strval(inputtext))*60;
							
							ShowPlayerDialog(playerid, DIALOG_EVENT_SELECT_PRIZE, DIALOG_STYLE_INPUT, "Nagroda", "Podaj wysokoœæ nagrody.", "Dalej", "Zamknij");
							
							return 1;
						}
					}
				}
			}
		}
		case DIALOG_EVENT_SELECT_PRIZE:
		{
			if(response)
			{
				if(!IsNumeric(inputtext))
				{
					ShowPlayerDialog(playerid, DIALOG_EVENT_SELECT_PRIZE, DIALOG_STYLE_INPUT, "Nagroda", "Poda³eœ nieprawid³ow¹ wartoœæ.\nSpróbuj ponownie.", "Dalej", "Zamknij");
					return 1;
				}
				
				switch(gSelectedSlot[playerid])
				{
					case 1:
					{
						if(strval(inputtext) > 0)
						{
							gEvent1prize = strval(inputtext);
							PrepareEvent(1);
							
							ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Event przygotowany.", "Zamknij", "");
							return 1;
						}
					}
					case 2:
					{
						if(strval(inputtext) > 0)
						{
							gEvent2prize = strval(inputtext);
							PrepareEvent(2);
							
							ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Event przygotowany.", "Zamknij", "");
							return 1;
						}
					}
				}
			}
		}
		case DIALOG_EVENT_JOIN:
		{
			if(response)
			{
				switch(gActiveEventList[playerid][listitem])
				{
					case 1:
					{
						if(gEvent1timeToJoin <= 0)
						{
							ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Niestety ten event ju¿ siê rozpocz¹³.", "Zamknij", "");
							return 1;
						}

						for(new i = 0; i < sizeof(gEvent1players); i++)
						{
							if(gEvent1players[i] == -1)
							{
								gEvent1players[i] = playerid;
								
								ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Zapisa³eœ siê na event !\nGdy siê on rozpocznie zostaniesz przeniesiony na miejsce.", "Zamknij", "");
								return 1;
							}
						}
					}
					case 2:
					{
						if(gEvent2timeToJoin <= 0)
						{
							ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Niestety ten event ju¿ siê rozpocz¹³.", "Zamknij", "");
							return 1;
						}

						for(new i = 0; i < sizeof(gEvent2players); i++)
						{
							if(gEvent2players[i] == -1)
							{
								gEvent2players[i] = playerid;
								
								ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Zapisa³eœ siê na event !\nGdy siê on rozpocznie zostaniesz przeniesiony na miejsce.", "Zamknij", "");
								
								return 1;
							}
						}
					}
				}
			}
		}
		case DIALOG_EVENT_STOP:
		{
			if(response)
			{
				switch(gActiveEventList[playerid][listitem])
				{
					case 1:
					{
						if(!gEvent1isRunning)
						{
							ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Niestety ten event ju¿ siê zakoñczy³.", "Zamknij", "");
							return 1;
						}

						EndEvent(1);
					}
					case 2:
					{
						if(!gEvent2isRunning)
						{
							ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Informacja", "Niestety ten event ju¿ siê zakoñczy³.", "Zamknij", "");
							return 1;
						}

						EndEvent(2);
					}
				}
			}
		}
		case DIALOG_FACTORY_BUILD:
		{
			if(response)
			{
				gPlayerData[playerid][pBank] -= WFACTORY_COST;
				
				new Float:px, Float:py, Float:pz;
				GetPlayerPos(playerid, px, py, pz);
				
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryJustBought] = 1;
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryCentrePosX] = px;
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryCentrePosY] = py;
				DynamicFactions[gPlayerData[playerid][pFaction]][WFactoryCentrePosZ] = pz;
				
				
				SaveFData(gPlayerData[playerid][pFaction], "WFactoryCentrePosX");
				SaveFData(gPlayerData[playerid][pFaction], "WFactoryCentrePosY");
				SaveFData(gPlayerData[playerid][pFaction], "WFactoryCentrePosZ");
				SaveFData(gPlayerData[playerid][pFaction], "WFactoryJustBought");
				
				SendClientMessage( playerid, COLOR_ORANGE, "[INFO:] Zakupi³eœ fabryke broni. Zostanie ona postawiona nastêpnego dnia.");
				return 1;
			}
		}
		case DIALOG_REPORTS:
		{
			new localId = 0;
			for(new i = 0; i < sizeof(gPlayersReports); i++)
			{
				if(!gPlayersReports[i][mReportUsed])
				{
					continue;
				}
				
				if(localId == listitem)
				{
					format(string, sizeof(string), "Reporter: %s, time left: %d(min)\n\nReported: %s\nContent\n%s", gPlayersReports[localId][mReporter], floatround(gPlayersReports[localId][mReportTimeLeft]/60), gPlayersReports[localId][mReported], gPlayersReports[localId][mReportContent]);
					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Raport", string, "Zamknij", "");
					return 1;
				}
				
				localId++;
			}
		}
		case DIALOG_MAP_LOCATIONS:
		{
			if(response)
			{
				gListItem[playerid] = listitem;
				ShowPlayerDialog(playerid, DIALOG_MAP_LOCATIONS_SET, DIALOG_STYLE_LIST, "Mapa", "Poka¿ obszar", "Wybierz", "Anuluj");
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, ""#COLOR_TITLE"Informacja", ""#COLOR_DEFAULT"Anulowa³eœ operacje", "Wróæ", "Zamknij");
				return 1;
			}
		}
		case DIALOG_MAP_LOCATIONS_SET:
		{
			if(response)
			{
				TogglePlayerControllable(playerid, 0);
				
				defer UnfreezePlayer[3500](playerid);
				
				SetPlayerCameraPos(playerid, gLsLocations[gListItem[playerid]][mLocationPosCamX], gLsLocations[gListItem[playerid]][mLocationPosCamY], gLsLocations[gListItem[playerid]][mLocationPosCamZ]);
				SetPlayerCameraLookAt(playerid, gLsLocations[gListItem[playerid]][mLocationPosCamLookX], gLsLocations[gListItem[playerid]][mLocationPosCamLookY], gLsLocations[gListItem[playerid]][mLocationPosCamLookZ]);
				
				defer SetCameraBehindPlayerEx[3500](playerid);
				
				defer ReturnPlayerFromTempPos[3500](playerid);
				
				if(IsPlayerInAnyVehicle(playerid))
				{
					gPlayerVars[playerid][tempVehId] = GetPlayerVehicleID(playerid);
					gPlayerVars[playerid][tempVehSeat] = GetPlayerVehicleSeat(playerid);
				}
				
				GetPlayerPos(playerid, gPlayerVars[playerid][tempPosX], gPlayerVars[playerid][tempPosY], gPlayerVars[playerid][tempPosZ]);
				gPlayerVars[playerid][tempInterior] = GetPlayerInterior(playerid);
				gPlayerVars[playerid][tempWorld] = GetPlayerInterior(playerid);
				
				gPlayerData[playerid][pCrashX] = gLsLocations[gListItem[playerid]][mLocationPosCamX];
				gPlayerData[playerid][pCrashY] = gLsLocations[gListItem[playerid]][mLocationPosCamY];
				gPlayerData[playerid][pCrashZ] = gLsLocations[gListItem[playerid]][mLocationPosCamZ]-1.0;
				gPlayerData[playerid][pCrashW] = 0;
				gPlayerData[playerid][pCrashInt] = 0;
				
				SetPlayerToPos(playerid, gPlayerData[playerid][pCrashX], gPlayerData[playerid][pCrashY], gPlayerData[playerid][pCrashZ]);
				SetPlayerVirtualWorld(playerid, 0);
				SetPlayerInterior(playerid, 0);
			}
		}
		case DIALOG_GPS_LOCATIONS:
		{
			if(response)
			{
				gListItem[playerid] = listitem;
				ShowPlayerDialog(playerid, DIALOG_GPS_LOCATIONS_SET, DIALOG_STYLE_LIST, "Mapa", "Poka¿ obszar\nPoka¿ punkt na mapie", "Wybierz", "Anuluj");
			}
			else
			{
				ShowPlayerDialog(playerid, DIALOG_ITEM_3, DIALOG_STYLE_MSGBOX, ""#COLOR_TITLE"Informacja", ""#COLOR_DEFAULT"Anulowa³eœ operacje", "Wróæ", "Zamknij");
				return 1;
			}
		}
		case DIALOG_GPS_LOCATIONS_SET:
		{
			if(response)
			{
				if(listitem == 0)
				{
					TogglePlayerControllable(playerid, 0);
					
					defer UnfreezePlayer[3500](playerid);
					
					SetPlayerCameraPos(playerid, gLsLocations[gListItem[playerid]][mLocationPosCamX], gLsLocations[gListItem[playerid]][mLocationPosCamY], gLsLocations[gListItem[playerid]][mLocationPosCamZ]);
					SetPlayerCameraLookAt(playerid, gLsLocations[gListItem[playerid]][mLocationPosCamLookX], gLsLocations[gListItem[playerid]][mLocationPosCamLookY], gLsLocations[gListItem[playerid]][mLocationPosCamLookZ]);
					
					defer SetCameraBehindPlayerEx[3500](playerid);
					
					defer ReturnPlayerFromTempPos[3500](playerid);
					
					if(IsPlayerInAnyVehicle(playerid))
					{
						gPlayerVars[playerid][tempVehId] = GetPlayerVehicleID(playerid);
						gPlayerVars[playerid][tempVehSeat] = GetPlayerVehicleSeat(playerid);
					}
					
					GetPlayerPos(playerid, gPlayerVars[playerid][tempPosX], gPlayerVars[playerid][tempPosY], gPlayerVars[playerid][tempPosZ]);
					gPlayerVars[playerid][tempInterior] = GetPlayerInterior(playerid);
					gPlayerVars[playerid][tempWorld] = GetPlayerInterior(playerid);
					
					gPlayerData[playerid][pCrashX] = gLsLocations[gListItem[playerid]][mLocationPosCamX];
					gPlayerData[playerid][pCrashY] = gLsLocations[gListItem[playerid]][mLocationPosCamY];
					gPlayerData[playerid][pCrashZ] = gLsLocations[gListItem[playerid]][mLocationPosCamZ]-1.0;
					gPlayerData[playerid][pCrashW] = 0;
					gPlayerData[playerid][pCrashInt] = 0;
					
					SetPlayerToPos(playerid, gPlayerData[playerid][pCrashX], gPlayerData[playerid][pCrashY], gPlayerData[playerid][pCrashZ]);
					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerInterior(playerid, 0);
				}
				else
				{
					TogglePlayerDynamicCP(playerid, gLsLocations[gListItem[playerid]][mLocationPosCp], 1);
					defer HideDynamicCheckpointEx[30000](playerid, gLsLocations[gListItem[playerid]][mLocationPosCp]);
				}
			}
		}
		case DIALOG_RENT_VEH:
		{
			if(response)
			{
				new vehId = GetPlayerVehicleID(playerid);
				
				if(vehId == 0)
				{
					return 1;
				}
				
				if(gVehData[vehId-1][mRentPrice] > gPlayerData[playerid][pCash])
				{
					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, ""#COLOR_TITLE"Wynajem pojazdu", ""#COLOR_DEFAULT"Nie masz wystarczaj¹cej iloœci pieniêdzy", "Zamknij", "");
					return 1;
				}
				
				if(PlayerFreeSlotCount(playerid) < 2)
				{
					ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, ""#COLOR_TITLE"Wynajem pojazdu", ""#COLOR_DEFAULT"Musisz mieæ wolne przynajmniej 2 sloty na przedmioty", "Zamknij", "");
					return 1;
				}
				
				GivePlayerCash(playerid, -gVehData[vehId-1][mRentPrice]);
				
				InsertPlayerItemEx(playerid, 2, gVehData[vehId-1][CarSerial], 0, 0, 0, 0, "Puste", 1);
				InsertPlayerItemEx(playerid, 3, 25, gVehData[vehId-1][CarSerial], 0, 0, 0, gPlayerData[playerid][pName], 1);
				
				format(gVehData[vehId-1][mRenter], MAX_PLAYER_NAME, gPlayerData[playerid][pName]);
				SaveVehData(vehId-1, "Renter");
				
				RefreshVehicleDescription(vehId);
				
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, ""#COLOR_TITLE"Wynajem pojazdu", ""#COLOR_DEFAULT"Wynaj¹³eœ pojazd !\nAby go zwróciæ musisz wróciæ pod salon, z którego zosta³ wynajêty pojazd i wpisaæ komende:\n/zwrocpojazd", "Zamknij", "");
			}
			else
			{
			}
		}
		case DIALOG_TELEPORT_TAXI:
		{
			if(response)
			{
				gPlayerVars[playerid][mIsInTaxiTeleportId] = listitem;
				gPlayerVars[playerid][mTaxiTeleportTimeLeft] = 15;
				
				SetPlayerVirtualWorld(playerid, 999);
				
				new vehId = GetPlayerVehicleID(playerid);
				
				switch(vehId)
				{
					case 1990:
					{
						PutPlayerInVehicle(playerid, 1991, 3);
						SetPlayerCameraPos(playerid, gTaxiLocations[6][mPosCamX], gTaxiLocations[6][mPosCamY], gTaxiLocations[6][mPosCamZ]);
						SetPlayerCameraLookAt(playerid, gTaxiLocations[6][mPosCamLookX], gTaxiLocations[6][mPosCamLookY], gTaxiLocations[6][mPosCamLookZ]);
					}
					case 1989:
					{
						PutPlayerInVehicle(playerid, 1992, 3);
						SetPlayerCameraPos(playerid, gTaxiLocations[3][mPosCamX], gTaxiLocations[3][mPosCamY], gTaxiLocations[3][mPosCamZ]);
						SetPlayerCameraLookAt(playerid, gTaxiLocations[3][mPosCamLookX], gTaxiLocations[3][mPosCamLookY], gTaxiLocations[3][mPosCamLookZ]);
					}
					case 1988:
					{
						PutPlayerInVehicle(playerid, 1993, 3);
						SetPlayerCameraPos(playerid, gTaxiLocations[4][mPosCamX], gTaxiLocations[4][mPosCamY], gTaxiLocations[4][mPosCamZ]);
						SetPlayerCameraLookAt(playerid, gTaxiLocations[4][mPosCamLookX], gTaxiLocations[4][mPosCamLookY], gTaxiLocations[4][mPosCamLookZ]);
					}
					case 1987:
					{
						PutPlayerInVehicle(playerid, 1994, 3);
						SetPlayerCameraPos(playerid, gTaxiLocations[5][mPosCamX], gTaxiLocations[5][mPosCamY], gTaxiLocations[5][mPosCamZ]);
						SetPlayerCameraLookAt(playerid, gTaxiLocations[5][mPosCamLookX], gTaxiLocations[5][mPosCamLookY], gTaxiLocations[5][mPosCamLookZ]);
					}
					case 1986:
					{
						PutPlayerInVehicle(playerid, 1995, 3);
						SetPlayerCameraPos(playerid, gTaxiLocations[1][mPosCamX], gTaxiLocations[1][mPosCamY], gTaxiLocations[1][mPosCamZ]);
						SetPlayerCameraLookAt(playerid, gTaxiLocations[1][mPosCamLookX], gTaxiLocations[1][mPosCamLookY], gTaxiLocations[1][mPosCamLookZ]);
					}
					case 1985:
					{
						PutPlayerInVehicle(playerid, 1996, 3);
						SetPlayerCameraPos(playerid, gTaxiLocations[0][mPosCamX], gTaxiLocations[0][mPosCamY], gTaxiLocations[0][mPosCamZ]);
						SetPlayerCameraLookAt(playerid, gTaxiLocations[0][mPosCamLookX], gTaxiLocations[0][mPosCamLookY], gTaxiLocations[0][mPosCamLookZ]);
					}
					case 1984:
					{
						PutPlayerInVehicle(playerid, 1997, 3);
						SetPlayerCameraPos(playerid, gTaxiLocations[2][mPosCamX], gTaxiLocations[2][mPosCamY], gTaxiLocations[2][mPosCamZ]);
						SetPlayerCameraLookAt(playerid, gTaxiLocations[2][mPosCamLookX], gTaxiLocations[2][mPosCamLookY], gTaxiLocations[2][mPosCamLookZ]);
					}
				}
			}
		}
		case DIALOG_NEW_NEWS:
		{
			if(response)
			{
				for(new i = 0; i < sizeof(gSanNewsMsgs); i++)
				{
					if(gSanNewsMsgs[i][mUsed])
					{
						continue;
					}
					
					gSanNewsMsgs[i][mUsed] = 1;
					format(gSanNewsMsgs[i][mContent], 255, inputtext);
					SaveNews(i, "Used");
					SaveNews(i, "Content");
					
					gListItem[playerid] = i;
					
					ShowPlayerDialog(playerid, DIALOG_NEW_NEWS2, DIALOG_STYLE_INPUT, #COLOR_TITLE"News panel", #COLOR_DEFAULT"Wpisz liczbe dni przez jak¹ news bêdzie wyœwietlany:", "Dalej", "Anuluj");
					
					return 1;
				}
				
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, #COLOR_TITLE"Informacja", #COLOR_DEFAULT"Brak wolnych slotów na now¹ wiadomoœæ !", "Zamknij", "");
			}
		}
		case DIALOG_NEW_NEWS2:
		{
			if(response)
			{
				if(!IsNumeric(inputtext))
				{
					ShowPlayerDialog(playerid, DIALOG_NEW_NEWS, DIALOG_STYLE_INPUT, #COLOR_TITLE"News panel", #COLOR_DEFAULT"Poda³eœ niepoprawn¹ wartoœæ - spróbuj ponownie:", "Dalej", "Anuluj");
				}
				
				gSanNewsMsgs[gListItem[playerid]][mTimeLeft] = strval(inputtext);
				SaveNews(gListItem[playerid], "TimeLeft");
				
				ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, #COLOR_TITLE"Informacja", #COLOR_DEFAULT"News zosta³ zapisany", "Zamknij", "");
			}
		}
		case DIALOG_HOUSE:
		{
			if(response)
			{
				switch(listitem)
				{
					// Sejf
					case 0:
					{
						GOTO_HOUSE_MONEY:
						format(string, sizeof(string), #COLOR_DEFAULT"Suma pieniêdzy w sejfie: $%d\nZabierz\nW³ó¿", Houses[gPlayerVars[playerid][mAtHouseID]][Money]);
						ShowPlayerDialog(playerid, DIALOG_HOUSE_MONEY, DIALOG_STYLE_LIST, #COLOR_TITLE"Panel domu", string, "Wybierz", "Zamknij");
					}
					// Przedmioty
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOG_HOUSE_ITEMS, DIALOG_STYLE_LIST, #COLOR_TITLE"Panel domu", #COLOR_DEFAULT"W³ó¿ przedmioty do schowka\nZabierz przedmioty ze schowka", "Wybierz", "Zamknij");
					}
					// Wynajem
					case 2:
					{
						GOTO_HOUSE_RENT:
						if(Houses[gPlayerVars[playerid][mAtHouseID]][Rentable])
						{
							format(string, sizeof(string), #COLOR_DEFAULT"Zrezygnuj z wynajmu\n");
						}
						else
						{
							format(string, sizeof(string),	#COLOR_DEFAULT"Wynajmij\n");
						}
						
						format(string, sizeof(string), "%sKoszt wynajmu: %d", string, Houses[gPlayerVars[playerid][mAtHouseID]][RentCost]);
						
						ShowPlayerDialog(playerid, DIALOG_HOUSE_RENT, DIALOG_STYLE_LIST, #COLOR_TITLE"Panel domu", string, "Wybierz", "Zamknij");
					}
				}
			}
		}
		case DIALOG_HOUSE_MONEY:
		{
			if(response)
			{
				switch(listitem)
				{
					// Suma pieniêdzy w sejfie
					case 0:
					{
						goto GOTO_HOUSE_MONEY;
					}
					// Zabierz
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOG_HOUSE_MONEY_TAKE, DIALOG_STYLE_INPUT, #COLOR_TITLE"Panel domu", #COLOR_DEFAULT"Wpisz sume pieniêdzy któr¹ chcesz zabraæ z sejfu:", "Dalej", "Wróæ");
					}
					// W³ó¿
					case 2:
					{
						ShowPlayerDialog(playerid, DIALOG_HOUSE_MONEY_PUT, DIALOG_STYLE_INPUT, #COLOR_TITLE"Panel domu", #COLOR_DEFAULT"Wpisz sume pieniêdzy któr¹ chcesz w³o¿yæ do sejfu:", "Dalej", "Wróæ");
					}
				}
			}
		}
		case DIALOG_HOUSE_MONEY_TAKE:
		{
			if(response)
			{
				if(!IsNumeric(inputtext))
				{
					ShowPlayerDialog(playerid, DIALOG_HOUSE_MONEY_TAKE, DIALOG_STYLE_INPUT, #COLOR_TITLE"Panel domu", #COLOR_DEFAULT"Poda³eœ niepoprawne dane.\nWpisz ponownie sumê pieniêdzy któr¹ chcesz zabraæ z sejfu:", "Dalej", "Wróæ");
				}
				
				if(strval(inputtext) <= 0)
				{
					ShowPlayerDialog(playerid, DIALOG_HOUSE_MONEY_TAKE, DIALOG_STYLE_INPUT, #COLOR_TITLE"Panel domu", #COLOR_DEFAULT"Poda³eœ niepoprawne dane.\nWpisz ponownie sumê pieniêdzy któr¹ chcesz zabraæ z sejfu:", "Dalej", "Wróæ");
				}
				
				if(strval(inputtext) > Houses[gPlayerVars[playerid][mAtHouseID]][Money])
				{
					ShowPlayerDialog(playerid, DIALOG_HOUSE_MONEY_TAKE, DIALOG_STYLE_INPUT, #COLOR_TITLE"Panel domu", #COLOR_DEFAULT"Niestety nie posiadasz takiej kwoty.\nWpisz ponownie sumê pieniêdzy któr¹ chcesz zabraæ z sejfu:", "Dalej", "Wróæ");
				}
				
				Houses[gPlayerVars[playerid][mAtHouseID]][Money] -= strval(inputtext);
				SaveHouseData(gPlayerVars[playerid][mAtHouseID], "Money");
				
				GivePlayerCash(playerid, strval(inputtext));
				
				format(string, sizeof(string), #COLOR_DEFAULT"Wyp³aci³eœ z sejfu $%d", strval(inputtext));
				
				ShowPlayerDialog(playerid, DIALOG_HOUSE_MONEY_MSG, DIALOG_STYLE_MSGBOX, #COLOR_TITLE"Panel domu", string, "Wróæ", "Zamknij");
			}
			else
			{
				goto GOTO_HOUSE_MONEY;
			}
		}
		case DIALOG_HOUSE_MONEY_PUT:
		{
			if(response)
			{
				if(!IsNumeric(inputtext))
				{
					ShowPlayerDialog(playerid, DIALOG_HOUSE_MONEY_PUT, DIALOG_STYLE_INPUT, #COLOR_TITLE"Panel domu", #COLOR_DEFAULT"Poda³eœ niepoprawne dane.\nWpisz ponownie sumê pieniêdzy któr¹ chcesz w³o¿yæ do sejfu:", "Dalej", "Wróæ");
				}
				
				if(strval(inputtext) <= 0)
				{
					ShowPlayerDialog(playerid, DIALOG_HOUSE_MONEY_PUT, DIALOG_STYLE_INPUT, #COLOR_TITLE"Panel domu", #COLOR_DEFAULT"Poda³eœ niepoprawne dane.\nWpisz ponownie sumê pieniêdzy któr¹ chcesz w³o¿yæ do sejfu:", "Dalej", "Wróæ");
				}
				
				if(gPlayerData[playerid][pCash] < strval(inputtext))
				{
					ShowPlayerDialog(playerid, DIALOG_HOUSE_MONEY_PUT, DIALOG_STYLE_INPUT, #COLOR_TITLE"Panel domu", #COLOR_DEFAULT"Niestety nie posiadasz takiej kwoty.\nWpisz ponownie sumê pieniêdzy któr¹ chcesz w³o¿yæ do sejfu:", "Dalej", "Wróæ");
				}
				
				Houses[gPlayerVars[playerid][mAtHouseID]][Money] += strval(inputtext);
				SaveHouseData(gPlayerVars[playerid][mAtHouseID], "Money");
				
				GivePlayerCash(playerid, -strval(inputtext));
				
				format(string, sizeof(string), #COLOR_DEFAULT"Wp³aci³eœ do sejfu $%d", strval(inputtext));
				
				ShowPlayerDialog(playerid, DIALOG_HOUSE_MONEY_MSG, DIALOG_STYLE_MSGBOX, #COLOR_TITLE"Panel domu", string, "Wróæ", "Zamknij");
			}
			else
			{
				goto GOTO_HOUSE_MONEY;
			}
		}
		case DIALOG_HOUSE_MONEY_MSG:
		{
			if(response)
			{
				goto GOTO_HOUSE_MONEY;
			}
		}
		case DIALOG_HOUSE_RENT:
		{
			if(response)
			{
				switch(listitem)
				{
					// On/off wynajem
					case 0:
					{
						if(Houses[gPlayerVars[playerid][mAtHouseID]][Rentable])
						{
							Houses[gPlayerVars[playerid][mAtHouseID]][Rentable] = 0;
							SaveHouseData(gPlayerVars[playerid][mAtHouseID], "Rentable");
							
							ShowPlayerDialog(playerid, DIALOG_HOUSE_RENT_MSG, DIALOG_STYLE_MSGBOX, #COLOR_TITLE"Panel domu", #COLOR_DEFAULT"Zrezygnowa³eœ z wynajmu domu.", "Wróæ", "Zamknij");
						}
						else
						{
							Houses[gPlayerVars[playerid][mAtHouseID]][Rentable] = 1;
							SaveHouseData(gPlayerVars[playerid][mAtHouseID], "Rentable");
							
							ShowPlayerDialog(playerid, DIALOG_HOUSE_RENT_MSG, DIALOG_STYLE_MSGBOX, #COLOR_TITLE"Panel domu", #COLOR_DEFAULT"Umo¿liwi³eœ wynajem domu.", "Wróæ", "Zamknij");
						}
					}
					// Koszt wynajmu
					case 1:
					{
						ShowPlayerDialog(playerid, DIALOG_HOUSE_RENT_PRICE, DIALOG_STYLE_INPUT, #COLOR_TITLE"Panel domu", #COLOR_DEFAULT"Wpisz kwote za jak¹ chcesz wynajmowaæ dom.", "PotwierdŸ", "Wróæ");
					}
				}
			}
			else
			{
				
			}
		}
		case DIALOG_HOUSE_RENT_PRICE:
		{
			if(response)
			{
				if(!IsNumeric(inputtext))
				{
					ShowPlayerDialog(playerid, DIALOG_HOUSE_RENT_PRICE, DIALOG_STYLE_INPUT, #COLOR_TITLE"Panel domu", #COLOR_DEFAULT"Poda³eœ nieporawn¹ wartoœæ.\nWpisz kwote za jak¹ chcesz wynajmowaæ dom.", "PotwierdŸ", "Wróæ");
				}
				
				if(strval(inputtext) <= 0)
				{
					ShowPlayerDialog(playerid, DIALOG_HOUSE_RENT_PRICE, DIALOG_STYLE_INPUT, #COLOR_TITLE"Panel domu", #COLOR_DEFAULT"Poda³eœ nieporawn¹ wartoœæ.\nWpisz kwote za jak¹ chcesz wynajmowaæ dom.", "PotwierdŸ", "Wróæ");
				}
				
				Houses[gPlayerVars[playerid][mAtHouseID]][RentCost] = strval(inputtext);
				SaveHouseData(gPlayerVars[playerid][mAtHouseID], "RentCost");
				
				format(string, sizeof(string), #COLOR_DEFAULT"Zmieni³eœ kwote wynajmu na $%d", strval(inputtext));
				
				ShowPlayerDialog(playerid, DIALOG_HOUSE_RENT_MSG, DIALOG_STYLE_MSGBOX, #COLOR_TITLE"Panel domu", string, "Wróæ", "Zamknij");
			}
			else
			{
				
			}
		}
		case DIALOG_HOUSE_RENT_MSG:
		{
			if(response)
			{
				goto GOTO_HOUSE_RENT;
			}
		}
		case DIALOG_HOUSE_ITEMS:
		{
			if(response)
			{
				switch(listitem)
				{
					// W³ó¿ itemy
					case 0:
					{
						gDSelectedHItemHouse[playerid] = gPlayerVars[playerid][mAtHouseID];
						
						ShowPItemsHIns(playerid);
					}
					// Wyjmij itemy
					case 1:
					{
						gDSelectedHItemHouse[playerid] = gPlayerVars[playerid][mAtHouseID];
						format(string, sizeof(string), "1. %s [iloœæ: %d] [waga: %d]\n2. %s [iloœæ: %d] [waga: %d]\n3. %s [iloœæ: %d] [waga: %d]\n4. %s [iloœæ: %d] [waga: %d]\n5. %s [iloœæ: %d] [waga: %d]",
						ItemName(Houses[gPlayerVars[playerid][mAtHouseID]][HItem1type], Houses[gPlayerVars[playerid][mAtHouseID]][HItem1]),HSlotParam6(gPlayerVars[playerid][mAtHouseID], 1), ItemWeight(Houses[gPlayerVars[playerid][mAtHouseID]][HItem1type], Houses[gPlayerVars[playerid][mAtHouseID]][HItem1]),
						ItemName(Houses[gPlayerVars[playerid][mAtHouseID]][HItem2type], Houses[gPlayerVars[playerid][mAtHouseID]][HItem2]),HSlotParam6(gPlayerVars[playerid][mAtHouseID], 2), ItemWeight(Houses[gPlayerVars[playerid][mAtHouseID]][HItem2type], Houses[gPlayerVars[playerid][mAtHouseID]][HItem2]),
						ItemName(Houses[gPlayerVars[playerid][mAtHouseID]][HItem3type], Houses[gPlayerVars[playerid][mAtHouseID]][HItem3]),HSlotParam6(gPlayerVars[playerid][mAtHouseID], 3), ItemWeight(Houses[gPlayerVars[playerid][mAtHouseID]][HItem3type], Houses[gPlayerVars[playerid][mAtHouseID]][HItem3]),
						ItemName(Houses[gPlayerVars[playerid][mAtHouseID]][HItem4type], Houses[gPlayerVars[playerid][mAtHouseID]][HItem4]),HSlotParam6(gPlayerVars[playerid][mAtHouseID], 4), ItemWeight(Houses[gPlayerVars[playerid][mAtHouseID]][HItem4type], Houses[gPlayerVars[playerid][mAtHouseID]][HItem4]),
						ItemName(Houses[gPlayerVars[playerid][mAtHouseID]][HItem5type], Houses[gPlayerVars[playerid][mAtHouseID]][HItem5]),HSlotParam6(gPlayerVars[playerid][mAtHouseID], 5), ItemWeight(Houses[gPlayerVars[playerid][mAtHouseID]][HItem5type], Houses[gPlayerVars[playerid][mAtHouseID]][HItem5]) );
						format(string2, sizeof(string2), "Moje itemy w domu - waga ca³kowita %d", HItemWeight(gPlayerVars[playerid][mAtHouseID]));
						ShowPlayerDialog(playerid,DIALOG_HITEM_1,DIALOG_STYLE_LIST,string2,string,"Wybierz","Anuluj");
						return 1;
					}
				}
			}
		}
	}
	return 1;
} // end of OnDialogResponse